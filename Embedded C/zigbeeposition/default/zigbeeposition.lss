
zigbeeposition.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000108  00800200  0000294e  000029e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000294e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000020  00800308  00800308  00002aea  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00002aea  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000557  00000000  00000000  00002b0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ab1  00000000  00000000  00003061  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001c9  00000000  00000000  00003b12  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000f34  00000000  00000000  00003cdb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003d0  00000000  00000000  00004c10  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000057b  00000000  00000000  00004fe0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b3 00 	jmp	0x166	; 0x166 <__ctors_end>
       4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
       8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
       c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      10:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      14:	0c 94 cc 03 	jmp	0x798	; 0x798 <__vector_5>
      18:	0c 94 a1 03 	jmp	0x742	; 0x742 <__vector_6>
      1c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      20:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      24:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      28:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      2c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      30:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      34:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      38:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      3c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      40:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      44:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      48:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      4c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      50:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      54:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      58:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      5c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      60:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      64:	0c 94 2c 08 	jmp	0x1058	; 0x1058 <__vector_25>
      68:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      6c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      70:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      74:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      78:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      7c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      80:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      84:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      88:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      8c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      90:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      94:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      98:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      9c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      ac:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      bc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      cc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      d0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      d4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      d8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      dc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      e0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      e4:	07 63       	ori	r16, 0x37	; 55
      e6:	42 36       	cpi	r20, 0x62	; 98
      e8:	b7 9b       	sbis	0x16, 7	; 22
      ea:	d8 a7       	std	Y+40, r29	; 0x28
      ec:	1a 39       	cpi	r17, 0x9A	; 154
      ee:	68 56       	subi	r22, 0x68	; 104
      f0:	18 ae       	std	Y+56, r1	; 0x38
      f2:	ba ab       	std	Y+50, r27	; 0x32
      f4:	55 8c       	ldd	r5, Z+29	; 0x1d
      f6:	1d 3c       	cpi	r17, 0xCD	; 205
      f8:	b7 cc       	rjmp	.-1682   	; 0xfffffa68 <__eeprom_end+0xff7efa68>
      fa:	57 63       	ori	r21, 0x37	; 55
      fc:	bd 6d       	ori	r27, 0xDD	; 221
      fe:	ed fd       	.word	0xfded	; ????
     100:	75 3e       	cpi	r23, 0xE5	; 229
     102:	f6 17       	cp	r31, r22
     104:	72 31       	cpi	r23, 0x12	; 18
     106:	bf 00       	.word	0x00bf	; ????
     108:	00 00       	nop
     10a:	80 3f       	cpi	r24, 0xF0	; 240
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 00       	nop
     110:	be 92       	st	-X, r11
     112:	24 49       	sbci	r18, 0x94	; 148
     114:	12 3e       	cpi	r17, 0xE2	; 226
     116:	ab aa       	std	Y+51, r10	; 0x33
     118:	aa 2a       	or	r10, r26
     11a:	be cd       	rjmp	.-1156   	; 0xfffffc98 <__eeprom_end+0xff7efc98>
     11c:	cc cc       	rjmp	.-1640   	; 0xfffffab6 <__eeprom_end+0xff7efab6>
     11e:	4c 3e       	cpi	r20, 0xEC	; 236
     120:	00 00       	nop
     122:	00 80       	ld	r0, Z
     124:	be ab       	std	Y+54, r27	; 0x36
     126:	aa aa       	std	Y+50, r10	; 0x32
     128:	aa 3e       	cpi	r26, 0xEA	; 234
     12a:	00 00       	nop
     12c:	00 00       	nop
     12e:	bf 00       	.word	0x00bf	; ????
     130:	00 00       	nop
     132:	80 3f       	cpi	r24, 0xF0	; 240
     134:	00 00       	nop
     136:	00 00       	nop
     138:	00 08       	sbc	r0, r0
     13a:	41 78       	andi	r20, 0x81	; 129
     13c:	d3 bb       	out	0x13, r29	; 19
     13e:	43 87       	std	Z+11, r20	; 0x0b
     140:	d1 13       	cpse	r29, r17
     142:	3d 19       	sub	r19, r13
     144:	0e 3c       	cpi	r16, 0xCE	; 206
     146:	c3 bd       	out	0x23, r28	; 35
     148:	42 82       	std	Z+2, r4	; 0x02
     14a:	ad 2b       	or	r26, r29
     14c:	3e 68       	ori	r19, 0x8E	; 142
     14e:	ec 82       	std	Y+4, r14	; 0x04
     150:	76 be       	out	0x36, r7	; 54
     152:	d9 8f       	std	Y+25, r29	; 0x19
     154:	e1 a9       	ldd	r30, Z+49	; 0x31
     156:	3e 4c       	sbci	r19, 0xCE	; 206
     158:	80 ef       	ldi	r24, 0xF0	; 240
     15a:	ff be       	out	0x3f, r15	; 63
     15c:	01 c4       	rjmp	.+2050   	; 0x960 <left+0x4>
     15e:	ff 7f       	andi	r31, 0xFF	; 255
     160:	3f 00       	.word	0x003f	; ????
     162:	00 00       	nop
	...

00000166 <__ctors_end>:
     166:	11 24       	eor	r1, r1
     168:	1f be       	out	0x3f, r1	; 63
     16a:	cf ef       	ldi	r28, 0xFF	; 255
     16c:	d1 e2       	ldi	r29, 0x21	; 33
     16e:	de bf       	out	0x3e, r29	; 62
     170:	cd bf       	out	0x3d, r28	; 61
     172:	00 e0       	ldi	r16, 0x00	; 0
     174:	0c bf       	out	0x3c, r16	; 60

00000176 <__do_copy_data>:
     176:	13 e0       	ldi	r17, 0x03	; 3
     178:	a0 e0       	ldi	r26, 0x00	; 0
     17a:	b2 e0       	ldi	r27, 0x02	; 2
     17c:	ee e4       	ldi	r30, 0x4E	; 78
     17e:	f9 e2       	ldi	r31, 0x29	; 41
     180:	00 e0       	ldi	r16, 0x00	; 0
     182:	0b bf       	out	0x3b, r16	; 59
     184:	02 c0       	rjmp	.+4      	; 0x18a <__do_copy_data+0x14>
     186:	07 90       	elpm	r0, Z+
     188:	0d 92       	st	X+, r0
     18a:	a8 30       	cpi	r26, 0x08	; 8
     18c:	b1 07       	cpc	r27, r17
     18e:	d9 f7       	brne	.-10     	; 0x186 <__do_copy_data+0x10>

00000190 <__do_clear_bss>:
     190:	13 e0       	ldi	r17, 0x03	; 3
     192:	a8 e0       	ldi	r26, 0x08	; 8
     194:	b3 e0       	ldi	r27, 0x03	; 3
     196:	01 c0       	rjmp	.+2      	; 0x19a <.do_clear_bss_start>

00000198 <.do_clear_bss_loop>:
     198:	1d 92       	st	X+, r1

0000019a <.do_clear_bss_start>:
     19a:	a8 32       	cpi	r26, 0x28	; 40
     19c:	b1 07       	cpc	r27, r17
     19e:	e1 f7       	brne	.-8      	; 0x198 <.do_clear_bss_loop>
     1a0:	0e 94 be 0a 	call	0x157c	; 0x157c <main>
     1a4:	0c 94 a5 14 	jmp	0x294a	; 0x294a <_exit>

000001a8 <__bad_interrupt>:
     1a8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ac <uart0_init>:
unsigned int value;

float BATT_Voltage, BATT_V;

void uart0_init(void)
{
     1ac:	df 93       	push	r29
     1ae:	cf 93       	push	r28
     1b0:	cd b7       	in	r28, 0x3d	; 61
     1b2:	de b7       	in	r29, 0x3e	; 62
 UCSR0B = 0x00; //disable while setting baud rate
     1b4:	e1 ec       	ldi	r30, 0xC1	; 193
     1b6:	f0 e0       	ldi	r31, 0x00	; 0
     1b8:	10 82       	st	Z, r1
 UCSR0A = 0x00;
     1ba:	e0 ec       	ldi	r30, 0xC0	; 192
     1bc:	f0 e0       	ldi	r31, 0x00	; 0
     1be:	10 82       	st	Z, r1
 UCSR0C = 0x06;
     1c0:	e2 ec       	ldi	r30, 0xC2	; 194
     1c2:	f0 e0       	ldi	r31, 0x00	; 0
     1c4:	86 e0       	ldi	r24, 0x06	; 6
     1c6:	80 83       	st	Z, r24
 UBRR0L = 0x5F; //set baud rate lo
     1c8:	e4 ec       	ldi	r30, 0xC4	; 196
     1ca:	f0 e0       	ldi	r31, 0x00	; 0
     1cc:	8f e5       	ldi	r24, 0x5F	; 95
     1ce:	80 83       	st	Z, r24
 UBRR0H = 0x00; //set baud rate hi
     1d0:	e5 ec       	ldi	r30, 0xC5	; 197
     1d2:	f0 e0       	ldi	r31, 0x00	; 0
     1d4:	10 82       	st	Z, r1
 UCSR0B = 0x98;
     1d6:	e1 ec       	ldi	r30, 0xC1	; 193
     1d8:	f0 e0       	ldi	r31, 0x00	; 0
     1da:	88 e9       	ldi	r24, 0x98	; 152
     1dc:	80 83       	st	Z, r24
}
     1de:	cf 91       	pop	r28
     1e0:	df 91       	pop	r29
     1e2:	08 95       	ret

000001e4 <spi_pin_config>:

//configure spi pins to talk to secondary microcontroller
void spi_pin_config (void)
{
     1e4:	df 93       	push	r29
     1e6:	cf 93       	push	r28
     1e8:	cd b7       	in	r28, 0x3d	; 61
     1ea:	de b7       	in	r29, 0x3e	; 62
 DDRB = DDRB | 0x07;
     1ec:	a4 e2       	ldi	r26, 0x24	; 36
     1ee:	b0 e0       	ldi	r27, 0x00	; 0
     1f0:	e4 e2       	ldi	r30, 0x24	; 36
     1f2:	f0 e0       	ldi	r31, 0x00	; 0
     1f4:	80 81       	ld	r24, Z
     1f6:	87 60       	ori	r24, 0x07	; 7
     1f8:	8c 93       	st	X, r24
 PORTB = PORTB | 0x07;
     1fa:	a5 e2       	ldi	r26, 0x25	; 37
     1fc:	b0 e0       	ldi	r27, 0x00	; 0
     1fe:	e5 e2       	ldi	r30, 0x25	; 37
     200:	f0 e0       	ldi	r31, 0x00	; 0
     202:	80 81       	ld	r24, Z
     204:	87 60       	ori	r24, 0x07	; 7
     206:	8c 93       	st	X, r24
}
     208:	cf 91       	pop	r28
     20a:	df 91       	pop	r29
     20c:	08 95       	ret

0000020e <MOSFET_switch_config>:

//MOSFET switch port configuration
void MOSFET_switch_config (void)
{
     20e:	df 93       	push	r29
     210:	cf 93       	push	r28
     212:	cd b7       	in	r28, 0x3d	; 61
     214:	de b7       	in	r29, 0x3e	; 62
 DDRH = DDRH | 0x0C; //make PORTH 3 and PORTH 1 pins as output
     216:	a1 e0       	ldi	r26, 0x01	; 1
     218:	b1 e0       	ldi	r27, 0x01	; 1
     21a:	e1 e0       	ldi	r30, 0x01	; 1
     21c:	f1 e0       	ldi	r31, 0x01	; 1
     21e:	80 81       	ld	r24, Z
     220:	8c 60       	ori	r24, 0x0C	; 12
     222:	8c 93       	st	X, r24
 PORTH = PORTH & 0xF3; //set PORTH 3 and PORTH 1 pins to 0
     224:	a2 e0       	ldi	r26, 0x02	; 2
     226:	b1 e0       	ldi	r27, 0x01	; 1
     228:	e2 e0       	ldi	r30, 0x02	; 2
     22a:	f1 e0       	ldi	r31, 0x01	; 1
     22c:	80 81       	ld	r24, Z
     22e:	83 7f       	andi	r24, 0xF3	; 243
     230:	8c 93       	st	X, r24

 DDRG = DDRG | 0x04; //make PORTG 2 pin as output
     232:	a3 e3       	ldi	r26, 0x33	; 51
     234:	b0 e0       	ldi	r27, 0x00	; 0
     236:	e3 e3       	ldi	r30, 0x33	; 51
     238:	f0 e0       	ldi	r31, 0x00	; 0
     23a:	80 81       	ld	r24, Z
     23c:	84 60       	ori	r24, 0x04	; 4
     23e:	8c 93       	st	X, r24
 PORTG = PORTG & 0xFB; //set PORTG 2 pin to 0
     240:	a4 e3       	ldi	r26, 0x34	; 52
     242:	b0 e0       	ldi	r27, 0x00	; 0
     244:	e4 e3       	ldi	r30, 0x34	; 52
     246:	f0 e0       	ldi	r31, 0x00	; 0
     248:	80 81       	ld	r24, Z
     24a:	8b 7f       	andi	r24, 0xFB	; 251
     24c:	8c 93       	st	X, r24
}
     24e:	cf 91       	pop	r28
     250:	df 91       	pop	r29
     252:	08 95       	ret

00000254 <buzzer_pin_config>:

//Function to initialize Buzzer 
void buzzer_pin_config (void)
{
     254:	df 93       	push	r29
     256:	cf 93       	push	r28
     258:	cd b7       	in	r28, 0x3d	; 61
     25a:	de b7       	in	r29, 0x3e	; 62
 DDRC = DDRC | 0x08;		//Setting PORTC 3 as output
     25c:	a7 e2       	ldi	r26, 0x27	; 39
     25e:	b0 e0       	ldi	r27, 0x00	; 0
     260:	e7 e2       	ldi	r30, 0x27	; 39
     262:	f0 e0       	ldi	r31, 0x00	; 0
     264:	80 81       	ld	r24, Z
     266:	88 60       	ori	r24, 0x08	; 8
     268:	8c 93       	st	X, r24
 PORTC = PORTC & 0xF7;		//Setting PORTC 3 logic low to turnoff buzzer
     26a:	a8 e2       	ldi	r26, 0x28	; 40
     26c:	b0 e0       	ldi	r27, 0x00	; 0
     26e:	e8 e2       	ldi	r30, 0x28	; 40
     270:	f0 e0       	ldi	r31, 0x00	; 0
     272:	80 81       	ld	r24, Z
     274:	87 7f       	andi	r24, 0xF7	; 247
     276:	8c 93       	st	X, r24
}
     278:	cf 91       	pop	r28
     27a:	df 91       	pop	r29
     27c:	08 95       	ret

0000027e <adc_pin_config>:

//ADC pin configuration
void adc_pin_config (void)
{
     27e:	df 93       	push	r29
     280:	cf 93       	push	r28
     282:	cd b7       	in	r28, 0x3d	; 61
     284:	de b7       	in	r29, 0x3e	; 62
 DDRF = 0x00; //set PORTF direction as input
     286:	e0 e3       	ldi	r30, 0x30	; 48
     288:	f0 e0       	ldi	r31, 0x00	; 0
     28a:	10 82       	st	Z, r1
 PORTF = 0x00; //set PORTF pins floating
     28c:	e1 e3       	ldi	r30, 0x31	; 49
     28e:	f0 e0       	ldi	r31, 0x00	; 0
     290:	10 82       	st	Z, r1
 DDRK = 0x00; //set PORTK direction as input
     292:	e7 e0       	ldi	r30, 0x07	; 7
     294:	f1 e0       	ldi	r31, 0x01	; 1
     296:	10 82       	st	Z, r1
 PORTK = 0x00; //set PORTK pins floating
     298:	e8 e0       	ldi	r30, 0x08	; 8
     29a:	f1 e0       	ldi	r31, 0x01	; 1
     29c:	10 82       	st	Z, r1
}
     29e:	cf 91       	pop	r28
     2a0:	df 91       	pop	r29
     2a2:	08 95       	ret

000002a4 <servo1_pin_config>:

//Configure PORTB 5 pin for servo motor 1 operation
void servo1_pin_config (void)
{
     2a4:	df 93       	push	r29
     2a6:	cf 93       	push	r28
     2a8:	cd b7       	in	r28, 0x3d	; 61
     2aa:	de b7       	in	r29, 0x3e	; 62
 DDRB  = DDRB | 0x20;  //making PORTB 5 pin output
     2ac:	a4 e2       	ldi	r26, 0x24	; 36
     2ae:	b0 e0       	ldi	r27, 0x00	; 0
     2b0:	e4 e2       	ldi	r30, 0x24	; 36
     2b2:	f0 e0       	ldi	r31, 0x00	; 0
     2b4:	80 81       	ld	r24, Z
     2b6:	80 62       	ori	r24, 0x20	; 32
     2b8:	8c 93       	st	X, r24
 PORTB = PORTB | 0x20; //setting PORTB 5 pin to logic 1
     2ba:	a5 e2       	ldi	r26, 0x25	; 37
     2bc:	b0 e0       	ldi	r27, 0x00	; 0
     2be:	e5 e2       	ldi	r30, 0x25	; 37
     2c0:	f0 e0       	ldi	r31, 0x00	; 0
     2c2:	80 81       	ld	r24, Z
     2c4:	80 62       	ori	r24, 0x20	; 32
     2c6:	8c 93       	st	X, r24
}
     2c8:	cf 91       	pop	r28
     2ca:	df 91       	pop	r29
     2cc:	08 95       	ret

000002ce <servo2_pin_config>:

//Configure PORTB 6 pin for servo motor 2 operation
void servo2_pin_config (void)
{
     2ce:	df 93       	push	r29
     2d0:	cf 93       	push	r28
     2d2:	cd b7       	in	r28, 0x3d	; 61
     2d4:	de b7       	in	r29, 0x3e	; 62
 DDRB  = DDRB | 0x40;  //making PORTB 6 pin output
     2d6:	a4 e2       	ldi	r26, 0x24	; 36
     2d8:	b0 e0       	ldi	r27, 0x00	; 0
     2da:	e4 e2       	ldi	r30, 0x24	; 36
     2dc:	f0 e0       	ldi	r31, 0x00	; 0
     2de:	80 81       	ld	r24, Z
     2e0:	80 64       	ori	r24, 0x40	; 64
     2e2:	8c 93       	st	X, r24
 PORTB = PORTB | 0x40; //setting PORTB 6 pin to logic 1
     2e4:	a5 e2       	ldi	r26, 0x25	; 37
     2e6:	b0 e0       	ldi	r27, 0x00	; 0
     2e8:	e5 e2       	ldi	r30, 0x25	; 37
     2ea:	f0 e0       	ldi	r31, 0x00	; 0
     2ec:	80 81       	ld	r24, Z
     2ee:	80 64       	ori	r24, 0x40	; 64
     2f0:	8c 93       	st	X, r24
}
     2f2:	cf 91       	pop	r28
     2f4:	df 91       	pop	r29
     2f6:	08 95       	ret

000002f8 <motion_pin_config>:

//Function to configure ports to enable robot's motion
void motion_pin_config (void) 
{
     2f8:	df 93       	push	r29
     2fa:	cf 93       	push	r28
     2fc:	cd b7       	in	r28, 0x3d	; 61
     2fe:	de b7       	in	r29, 0x3e	; 62
 DDRA = DDRA | 0x0F;
     300:	a1 e2       	ldi	r26, 0x21	; 33
     302:	b0 e0       	ldi	r27, 0x00	; 0
     304:	e1 e2       	ldi	r30, 0x21	; 33
     306:	f0 e0       	ldi	r31, 0x00	; 0
     308:	80 81       	ld	r24, Z
     30a:	8f 60       	ori	r24, 0x0F	; 15
     30c:	8c 93       	st	X, r24
 PORTA = PORTA & 0xF0;
     30e:	a2 e2       	ldi	r26, 0x22	; 34
     310:	b0 e0       	ldi	r27, 0x00	; 0
     312:	e2 e2       	ldi	r30, 0x22	; 34
     314:	f0 e0       	ldi	r31, 0x00	; 0
     316:	80 81       	ld	r24, Z
     318:	80 7f       	andi	r24, 0xF0	; 240
     31a:	8c 93       	st	X, r24
 DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
     31c:	aa e0       	ldi	r26, 0x0A	; 10
     31e:	b1 e0       	ldi	r27, 0x01	; 1
     320:	ea e0       	ldi	r30, 0x0A	; 10
     322:	f1 e0       	ldi	r31, 0x01	; 1
     324:	80 81       	ld	r24, Z
     326:	88 61       	ori	r24, 0x18	; 24
     328:	8c 93       	st	X, r24
 PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
     32a:	ab e0       	ldi	r26, 0x0B	; 11
     32c:	b1 e0       	ldi	r27, 0x01	; 1
     32e:	eb e0       	ldi	r30, 0x0B	; 11
     330:	f1 e0       	ldi	r31, 0x01	; 1
     332:	80 81       	ld	r24, Z
     334:	88 61       	ori	r24, 0x18	; 24
     336:	8c 93       	st	X, r24
}
     338:	cf 91       	pop	r28
     33a:	df 91       	pop	r29
     33c:	08 95       	ret

0000033e <left_encoder_pin_config>:

//Function to configure INT4 (PORTE 4) pin as input for the left position encoder
void left_encoder_pin_config (void)
{
     33e:	df 93       	push	r29
     340:	cf 93       	push	r28
     342:	cd b7       	in	r28, 0x3d	; 61
     344:	de b7       	in	r29, 0x3e	; 62
 DDRE  = DDRE & 0xEF;  //Set the direction of the PORTE 4 pin as input
     346:	ad e2       	ldi	r26, 0x2D	; 45
     348:	b0 e0       	ldi	r27, 0x00	; 0
     34a:	ed e2       	ldi	r30, 0x2D	; 45
     34c:	f0 e0       	ldi	r31, 0x00	; 0
     34e:	80 81       	ld	r24, Z
     350:	8f 7e       	andi	r24, 0xEF	; 239
     352:	8c 93       	st	X, r24
 PORTE = PORTE | 0x10; //Enable internal pull-up for PORTE 4 pin
     354:	ae e2       	ldi	r26, 0x2E	; 46
     356:	b0 e0       	ldi	r27, 0x00	; 0
     358:	ee e2       	ldi	r30, 0x2E	; 46
     35a:	f0 e0       	ldi	r31, 0x00	; 0
     35c:	80 81       	ld	r24, Z
     35e:	80 61       	ori	r24, 0x10	; 16
     360:	8c 93       	st	X, r24
}
     362:	cf 91       	pop	r28
     364:	df 91       	pop	r29
     366:	08 95       	ret

00000368 <right_encoder_pin_config>:

//Function to configure INT5 (PORTE 5) pin as input for the right position encoder
void right_encoder_pin_config (void)
{
     368:	df 93       	push	r29
     36a:	cf 93       	push	r28
     36c:	cd b7       	in	r28, 0x3d	; 61
     36e:	de b7       	in	r29, 0x3e	; 62
 DDRE  = DDRE & 0xDF;  //Set the direction of the PORTE 4 pin as input
     370:	ad e2       	ldi	r26, 0x2D	; 45
     372:	b0 e0       	ldi	r27, 0x00	; 0
     374:	ed e2       	ldi	r30, 0x2D	; 45
     376:	f0 e0       	ldi	r31, 0x00	; 0
     378:	80 81       	ld	r24, Z
     37a:	8f 7d       	andi	r24, 0xDF	; 223
     37c:	8c 93       	st	X, r24
 PORTE = PORTE | 0x20; //Enable internal pull-up for PORTE 4 pin
     37e:	ae e2       	ldi	r26, 0x2E	; 46
     380:	b0 e0       	ldi	r27, 0x00	; 0
     382:	ee e2       	ldi	r30, 0x2E	; 46
     384:	f0 e0       	ldi	r31, 0x00	; 0
     386:	80 81       	ld	r24, Z
     388:	80 62       	ori	r24, 0x20	; 32
     38a:	8c 93       	st	X, r24
}
     38c:	cf 91       	pop	r28
     38e:	df 91       	pop	r29
     390:	08 95       	ret

00000392 <port_init>:

//Function to initialize ports
void port_init()
{
     392:	df 93       	push	r29
     394:	cf 93       	push	r28
     396:	cd b7       	in	r28, 0x3d	; 61
     398:	de b7       	in	r29, 0x3e	; 62
 motion_pin_config(); //robot motion pins config
     39a:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <motion_pin_config>
 buzzer_pin_config(); //buzzer pins config
     39e:	0e 94 2a 01 	call	0x254	; 0x254 <buzzer_pin_config>
 adc_pin_config();	//adc pins config
     3a2:	0e 94 3f 01 	call	0x27e	; 0x27e <adc_pin_config>
 spi_pin_config(); //initialize spi interface
     3a6:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <spi_pin_config>
 MOSFET_switch_config(); //configure MOSFETs
     3aa:	0e 94 07 01 	call	0x20e	; 0x20e <MOSFET_switch_config>
 left_encoder_pin_config(); //left encoder pin config
     3ae:	0e 94 9f 01 	call	0x33e	; 0x33e <left_encoder_pin_config>
 right_encoder_pin_config(); //right encoder pin config	
     3b2:	0e 94 b4 01 	call	0x368	; 0x368 <right_encoder_pin_config>
 servo1_pin_config(); //Configure PORTB 5 pin for servo motor 1 operation
     3b6:	0e 94 52 01 	call	0x2a4	; 0x2a4 <servo1_pin_config>
 servo2_pin_config(); //Configure PORTB 6 pin for servo motor 2 operation 
     3ba:	0e 94 67 01 	call	0x2ce	; 0x2ce <servo2_pin_config>
}
     3be:	cf 91       	pop	r28
     3c0:	df 91       	pop	r29
     3c2:	08 95       	ret

000003c4 <spi_init>:


//SPI initialize
// clock rate: 921600hz
void spi_init(void)
{
     3c4:	df 93       	push	r29
     3c6:	cf 93       	push	r28
     3c8:	cd b7       	in	r28, 0x3d	; 61
     3ca:	de b7       	in	r29, 0x3e	; 62
 SPCR = 0x53; //setup SPI
     3cc:	ec e4       	ldi	r30, 0x4C	; 76
     3ce:	f0 e0       	ldi	r31, 0x00	; 0
     3d0:	83 e5       	ldi	r24, 0x53	; 83
     3d2:	80 83       	st	Z, r24
 SPSR = 0x00; //setup SPI
     3d4:	ed e4       	ldi	r30, 0x4D	; 77
     3d6:	f0 e0       	ldi	r31, 0x00	; 0
     3d8:	10 82       	st	Z, r1
 SPDR = 0x00;
     3da:	ee e4       	ldi	r30, 0x4E	; 78
     3dc:	f0 e0       	ldi	r31, 0x00	; 0
     3de:	10 82       	st	Z, r1
}
     3e0:	cf 91       	pop	r28
     3e2:	df 91       	pop	r29
     3e4:	08 95       	ret

000003e6 <adc_init>:

//Function to Initialize ADC
void adc_init()
{
     3e6:	df 93       	push	r29
     3e8:	cf 93       	push	r28
     3ea:	cd b7       	in	r28, 0x3d	; 61
     3ec:	de b7       	in	r29, 0x3e	; 62
	ADCSRA = 0x00;
     3ee:	ea e7       	ldi	r30, 0x7A	; 122
     3f0:	f0 e0       	ldi	r31, 0x00	; 0
     3f2:	10 82       	st	Z, r1
	ADCSRB = 0x00;		//MUX5 = 0
     3f4:	eb e7       	ldi	r30, 0x7B	; 123
     3f6:	f0 e0       	ldi	r31, 0x00	; 0
     3f8:	10 82       	st	Z, r1
	ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
     3fa:	ec e7       	ldi	r30, 0x7C	; 124
     3fc:	f0 e0       	ldi	r31, 0x00	; 0
     3fe:	80 e2       	ldi	r24, 0x20	; 32
     400:	80 83       	st	Z, r24
	ACSR = 0x80;
     402:	e0 e5       	ldi	r30, 0x50	; 80
     404:	f0 e0       	ldi	r31, 0x00	; 0
     406:	80 e8       	ldi	r24, 0x80	; 128
     408:	80 83       	st	Z, r24
	ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
     40a:	ea e7       	ldi	r30, 0x7A	; 122
     40c:	f0 e0       	ldi	r31, 0x00	; 0
     40e:	86 e8       	ldi	r24, 0x86	; 134
     410:	80 83       	st	Z, r24
}
     412:	cf 91       	pop	r28
     414:	df 91       	pop	r29
     416:	08 95       	ret

00000418 <ADC_Conversion>:

unsigned char ADC_Conversion(unsigned char Ch)
{
     418:	df 93       	push	r29
     41a:	cf 93       	push	r28
     41c:	00 d0       	rcall	.+0      	; 0x41e <ADC_Conversion+0x6>
     41e:	cd b7       	in	r28, 0x3d	; 61
     420:	de b7       	in	r29, 0x3e	; 62
     422:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char a;
	unsigned char t;
	t = Ch;
     424:	8b 81       	ldd	r24, Y+3	; 0x03
     426:	89 83       	std	Y+1, r24	; 0x01
	if(Ch>7)
     428:	8b 81       	ldd	r24, Y+3	; 0x03
     42a:	88 30       	cpi	r24, 0x08	; 8
     42c:	20 f0       	brcs	.+8      	; 0x436 <ADC_Conversion+0x1e>
	{
		ADCSRB = 0x08;
     42e:	eb e7       	ldi	r30, 0x7B	; 123
     430:	f0 e0       	ldi	r31, 0x00	; 0
     432:	88 e0       	ldi	r24, 0x08	; 8
     434:	80 83       	st	Z, r24
	}
	Ch = Ch & 0x07;  			
     436:	8b 81       	ldd	r24, Y+3	; 0x03
     438:	87 70       	andi	r24, 0x07	; 7
     43a:	8b 83       	std	Y+3, r24	; 0x03
	ADMUX= 0x20| Ch;	   		
     43c:	ec e7       	ldi	r30, 0x7C	; 124
     43e:	f0 e0       	ldi	r31, 0x00	; 0
     440:	8b 81       	ldd	r24, Y+3	; 0x03
     442:	80 62       	ori	r24, 0x20	; 32
     444:	80 83       	st	Z, r24
	ADCSRA = ADCSRA | 0x40;		//Set start conversion bit
     446:	aa e7       	ldi	r26, 0x7A	; 122
     448:	b0 e0       	ldi	r27, 0x00	; 0
     44a:	ea e7       	ldi	r30, 0x7A	; 122
     44c:	f0 e0       	ldi	r31, 0x00	; 0
     44e:	80 81       	ld	r24, Z
     450:	80 64       	ori	r24, 0x40	; 64
     452:	8c 93       	st	X, r24
	while((ADCSRA&0x10)==0);	//Wait for ADC conversion to complete
     454:	ea e7       	ldi	r30, 0x7A	; 122
     456:	f0 e0       	ldi	r31, 0x00	; 0
     458:	80 81       	ld	r24, Z
     45a:	88 2f       	mov	r24, r24
     45c:	90 e0       	ldi	r25, 0x00	; 0
     45e:	80 71       	andi	r24, 0x10	; 16
     460:	90 70       	andi	r25, 0x00	; 0
     462:	00 97       	sbiw	r24, 0x00	; 0
     464:	b9 f3       	breq	.-18     	; 0x454 <ADC_Conversion+0x3c>
	a=ADCH;
     466:	e9 e7       	ldi	r30, 0x79	; 121
     468:	f0 e0       	ldi	r31, 0x00	; 0
     46a:	80 81       	ld	r24, Z
     46c:	8a 83       	std	Y+2, r24	; 0x02
	ADCSRA = ADCSRA|0x10; //clear ADIF (ADC Interrupt Flag) by writing 1 to it
     46e:	aa e7       	ldi	r26, 0x7A	; 122
     470:	b0 e0       	ldi	r27, 0x00	; 0
     472:	ea e7       	ldi	r30, 0x7A	; 122
     474:	f0 e0       	ldi	r31, 0x00	; 0
     476:	80 81       	ld	r24, Z
     478:	80 61       	ori	r24, 0x10	; 16
     47a:	8c 93       	st	X, r24
	ADCSRB = 0x00;
     47c:	eb e7       	ldi	r30, 0x7B	; 123
     47e:	f0 e0       	ldi	r31, 0x00	; 0
     480:	10 82       	st	Z, r1
	if(t<9 && t>0)
     482:	89 81       	ldd	r24, Y+1	; 0x01
     484:	89 30       	cpi	r24, 0x09	; 9
     486:	38 f4       	brcc	.+14     	; 0x496 <ADC_Conversion+0x7e>
     488:	89 81       	ldd	r24, Y+1	; 0x01
     48a:	88 23       	and	r24, r24
     48c:	21 f0       	breq	.+8      	; 0x496 <ADC_Conversion+0x7e>
	{
		UDR0 = a;
     48e:	e6 ec       	ldi	r30, 0xC6	; 198
     490:	f0 e0       	ldi	r31, 0x00	; 0
     492:	8a 81       	ldd	r24, Y+2	; 0x02
     494:	80 83       	st	Z, r24
	}
	return a;
     496:	8a 81       	ldd	r24, Y+2	; 0x02
}
     498:	0f 90       	pop	r0
     49a:	0f 90       	pop	r0
     49c:	0f 90       	pop	r0
     49e:	cf 91       	pop	r28
     4a0:	df 91       	pop	r29
     4a2:	08 95       	ret

000004a4 <spi_master_tx_and_rx>:

//-------------------------------------------------------------------------------
//-- Function To Transmit/Receive through SPI interface ------
//-------------------------------------------------------------------------------
unsigned char spi_master_tx_and_rx (unsigned char data)
{
     4a4:	df 93       	push	r29
     4a6:	cf 93       	push	r28
     4a8:	cd b7       	in	r28, 0x3d	; 61
     4aa:	de b7       	in	r29, 0x3e	; 62
     4ac:	60 97       	sbiw	r28, 0x10	; 16
     4ae:	0f b6       	in	r0, 0x3f	; 63
     4b0:	f8 94       	cli
     4b2:	de bf       	out	0x3e, r29	; 62
     4b4:	0f be       	out	0x3f, r0	; 63
     4b6:	cd bf       	out	0x3d, r28	; 61
     4b8:	88 8b       	std	Y+16, r24	; 0x10
 unsigned char rx_data = 0;
     4ba:	1f 86       	std	Y+15, r1	; 0x0f

 PORTB = PORTB & 0xFE;        // make SS pin low
     4bc:	a5 e2       	ldi	r26, 0x25	; 37
     4be:	b0 e0       	ldi	r27, 0x00	; 0
     4c0:	e5 e2       	ldi	r30, 0x25	; 37
     4c2:	f0 e0       	ldi	r31, 0x00	; 0
     4c4:	80 81       	ld	r24, Z
     4c6:	8e 7f       	andi	r24, 0xFE	; 254
     4c8:	8c 93       	st	X, r24
 SPDR = data;
     4ca:	ee e4       	ldi	r30, 0x4E	; 78
     4cc:	f0 e0       	ldi	r31, 0x00	; 0
     4ce:	88 89       	ldd	r24, Y+16	; 0x10
     4d0:	80 83       	st	Z, r24
 while(!(SPSR & (1<<SPIF)));  //wait for data transmission to complete
     4d2:	ed e4       	ldi	r30, 0x4D	; 77
     4d4:	f0 e0       	ldi	r31, 0x00	; 0
     4d6:	80 81       	ld	r24, Z
     4d8:	88 23       	and	r24, r24
     4da:	dc f7       	brge	.-10     	; 0x4d2 <spi_master_tx_and_rx+0x2e>
     4dc:	80 e0       	ldi	r24, 0x00	; 0
     4de:	90 e0       	ldi	r25, 0x00	; 0
     4e0:	a0 e8       	ldi	r26, 0x80	; 128
     4e2:	bf e3       	ldi	r27, 0x3F	; 63
     4e4:	8b 87       	std	Y+11, r24	; 0x0b
     4e6:	9c 87       	std	Y+12, r25	; 0x0c
     4e8:	ad 87       	std	Y+13, r26	; 0x0d
     4ea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     4ec:	6b 85       	ldd	r22, Y+11	; 0x0b
     4ee:	7c 85       	ldd	r23, Y+12	; 0x0c
     4f0:	8d 85       	ldd	r24, Y+13	; 0x0d
     4f2:	9e 85       	ldd	r25, Y+14	; 0x0e
     4f4:	26 e6       	ldi	r18, 0x66	; 102
     4f6:	36 e6       	ldi	r19, 0x66	; 102
     4f8:	46 e6       	ldi	r20, 0x66	; 102
     4fa:	55 e4       	ldi	r21, 0x45	; 69
     4fc:	0e 94 a1 0c 	call	0x1942	; 0x1942 <__mulsf3>
     500:	dc 01       	movw	r26, r24
     502:	cb 01       	movw	r24, r22
     504:	8f 83       	std	Y+7, r24	; 0x07
     506:	98 87       	std	Y+8, r25	; 0x08
     508:	a9 87       	std	Y+9, r26	; 0x09
     50a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     50c:	6f 81       	ldd	r22, Y+7	; 0x07
     50e:	78 85       	ldd	r23, Y+8	; 0x08
     510:	89 85       	ldd	r24, Y+9	; 0x09
     512:	9a 85       	ldd	r25, Y+10	; 0x0a
     514:	20 e0       	ldi	r18, 0x00	; 0
     516:	30 e0       	ldi	r19, 0x00	; 0
     518:	40 e8       	ldi	r20, 0x80	; 128
     51a:	5f e3       	ldi	r21, 0x3F	; 63
     51c:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <__ltsf2>
     520:	88 23       	and	r24, r24
     522:	2c f4       	brge	.+10     	; 0x52e <spi_master_tx_and_rx+0x8a>
		__ticks = 1;
     524:	81 e0       	ldi	r24, 0x01	; 1
     526:	90 e0       	ldi	r25, 0x00	; 0
     528:	9e 83       	std	Y+6, r25	; 0x06
     52a:	8d 83       	std	Y+5, r24	; 0x05
     52c:	3f c0       	rjmp	.+126    	; 0x5ac <spi_master_tx_and_rx+0x108>
	else if (__tmp > 65535)
     52e:	6f 81       	ldd	r22, Y+7	; 0x07
     530:	78 85       	ldd	r23, Y+8	; 0x08
     532:	89 85       	ldd	r24, Y+9	; 0x09
     534:	9a 85       	ldd	r25, Y+10	; 0x0a
     536:	20 e0       	ldi	r18, 0x00	; 0
     538:	3f ef       	ldi	r19, 0xFF	; 255
     53a:	4f e7       	ldi	r20, 0x7F	; 127
     53c:	57 e4       	ldi	r21, 0x47	; 71
     53e:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <__gtsf2>
     542:	18 16       	cp	r1, r24
     544:	4c f5       	brge	.+82     	; 0x598 <spi_master_tx_and_rx+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     546:	6b 85       	ldd	r22, Y+11	; 0x0b
     548:	7c 85       	ldd	r23, Y+12	; 0x0c
     54a:	8d 85       	ldd	r24, Y+13	; 0x0d
     54c:	9e 85       	ldd	r25, Y+14	; 0x0e
     54e:	20 e0       	ldi	r18, 0x00	; 0
     550:	30 e0       	ldi	r19, 0x00	; 0
     552:	40 e2       	ldi	r20, 0x20	; 32
     554:	51 e4       	ldi	r21, 0x41	; 65
     556:	0e 94 a1 0c 	call	0x1942	; 0x1942 <__mulsf3>
     55a:	dc 01       	movw	r26, r24
     55c:	cb 01       	movw	r24, r22
     55e:	bc 01       	movw	r22, r24
     560:	cd 01       	movw	r24, r26
     562:	0e 94 cb 0a 	call	0x1596	; 0x1596 <__fixunssfsi>
     566:	dc 01       	movw	r26, r24
     568:	cb 01       	movw	r24, r22
     56a:	9e 83       	std	Y+6, r25	; 0x06
     56c:	8d 83       	std	Y+5, r24	; 0x05
     56e:	0f c0       	rjmp	.+30     	; 0x58e <spi_master_tx_and_rx+0xea>
     570:	80 e7       	ldi	r24, 0x70	; 112
     572:	91 e0       	ldi	r25, 0x01	; 1
     574:	9c 83       	std	Y+4, r25	; 0x04
     576:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     578:	8b 81       	ldd	r24, Y+3	; 0x03
     57a:	9c 81       	ldd	r25, Y+4	; 0x04
     57c:	01 97       	sbiw	r24, 0x01	; 1
     57e:	f1 f7       	brne	.-4      	; 0x57c <spi_master_tx_and_rx+0xd8>
     580:	9c 83       	std	Y+4, r25	; 0x04
     582:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     584:	8d 81       	ldd	r24, Y+5	; 0x05
     586:	9e 81       	ldd	r25, Y+6	; 0x06
     588:	01 97       	sbiw	r24, 0x01	; 1
     58a:	9e 83       	std	Y+6, r25	; 0x06
     58c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     58e:	8d 81       	ldd	r24, Y+5	; 0x05
     590:	9e 81       	ldd	r25, Y+6	; 0x06
     592:	00 97       	sbiw	r24, 0x00	; 0
     594:	69 f7       	brne	.-38     	; 0x570 <spi_master_tx_and_rx+0xcc>
     596:	14 c0       	rjmp	.+40     	; 0x5c0 <spi_master_tx_and_rx+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     598:	6f 81       	ldd	r22, Y+7	; 0x07
     59a:	78 85       	ldd	r23, Y+8	; 0x08
     59c:	89 85       	ldd	r24, Y+9	; 0x09
     59e:	9a 85       	ldd	r25, Y+10	; 0x0a
     5a0:	0e 94 cb 0a 	call	0x1596	; 0x1596 <__fixunssfsi>
     5a4:	dc 01       	movw	r26, r24
     5a6:	cb 01       	movw	r24, r22
     5a8:	9e 83       	std	Y+6, r25	; 0x06
     5aa:	8d 83       	std	Y+5, r24	; 0x05
     5ac:	8d 81       	ldd	r24, Y+5	; 0x05
     5ae:	9e 81       	ldd	r25, Y+6	; 0x06
     5b0:	9a 83       	std	Y+2, r25	; 0x02
     5b2:	89 83       	std	Y+1, r24	; 0x01
     5b4:	89 81       	ldd	r24, Y+1	; 0x01
     5b6:	9a 81       	ldd	r25, Y+2	; 0x02
     5b8:	01 97       	sbiw	r24, 0x01	; 1
     5ba:	f1 f7       	brne	.-4      	; 0x5b8 <spi_master_tx_and_rx+0x114>
     5bc:	9a 83       	std	Y+2, r25	; 0x02
     5be:	89 83       	std	Y+1, r24	; 0x01

 _delay_ms(1);                //time for ADC conversion in the slave microcontroller
 
 SPDR = 0x50;                 // send dummy byte to read back data from the slave microcontroller
     5c0:	ee e4       	ldi	r30, 0x4E	; 78
     5c2:	f0 e0       	ldi	r31, 0x00	; 0
     5c4:	80 e5       	ldi	r24, 0x50	; 80
     5c6:	80 83       	st	Z, r24
 while(!(SPSR & (1<<SPIF)));  //wait for data reception to complete
     5c8:	ed e4       	ldi	r30, 0x4D	; 77
     5ca:	f0 e0       	ldi	r31, 0x00	; 0
     5cc:	80 81       	ld	r24, Z
     5ce:	88 23       	and	r24, r24
     5d0:	dc f7       	brge	.-10     	; 0x5c8 <spi_master_tx_and_rx+0x124>
 rx_data = SPDR;
     5d2:	ee e4       	ldi	r30, 0x4E	; 78
     5d4:	f0 e0       	ldi	r31, 0x00	; 0
     5d6:	80 81       	ld	r24, Z
     5d8:	8f 87       	std	Y+15, r24	; 0x0f
 PORTB = PORTB | 0x01;        // make SS high
     5da:	a5 e2       	ldi	r26, 0x25	; 37
     5dc:	b0 e0       	ldi	r27, 0x00	; 0
     5de:	e5 e2       	ldi	r30, 0x25	; 37
     5e0:	f0 e0       	ldi	r31, 0x00	; 0
     5e2:	80 81       	ld	r24, Z
     5e4:	81 60       	ori	r24, 0x01	; 1
     5e6:	8c 93       	st	X, r24
 UDR0 = rx_data;
     5e8:	e6 ec       	ldi	r30, 0xC6	; 198
     5ea:	f0 e0       	ldi	r31, 0x00	; 0
     5ec:	8f 85       	ldd	r24, Y+15	; 0x0f
     5ee:	80 83       	st	Z, r24
 return rx_data;
     5f0:	8f 85       	ldd	r24, Y+15	; 0x0f
}
     5f2:	60 96       	adiw	r28, 0x10	; 16
     5f4:	0f b6       	in	r0, 0x3f	; 63
     5f6:	f8 94       	cli
     5f8:	de bf       	out	0x3e, r29	; 62
     5fa:	0f be       	out	0x3f, r0	; 63
     5fc:	cd bf       	out	0x3d, r28	; 61
     5fe:	cf 91       	pop	r28
     600:	df 91       	pop	r29
     602:	08 95       	ret

00000604 <Sharp_GP2D12_estimation>:


// This Function calculates the actual distance in millimeters(mm) from the input
// analog value of Sharp Sensor. 
unsigned int Sharp_GP2D12_estimation(unsigned char adc_reading)
{
     604:	df 93       	push	r29
     606:	cf 93       	push	r28
     608:	cd b7       	in	r28, 0x3d	; 61
     60a:	de b7       	in	r29, 0x3e	; 62
     60c:	27 97       	sbiw	r28, 0x07	; 7
     60e:	0f b6       	in	r0, 0x3f	; 63
     610:	f8 94       	cli
     612:	de bf       	out	0x3e, r29	; 62
     614:	0f be       	out	0x3f, r0	; 63
     616:	cd bf       	out	0x3d, r28	; 61
     618:	8f 83       	std	Y+7, r24	; 0x07
	float distance;
	unsigned int distanceInt;
	distance = (int)(10.00*(2799.6*(1.00/(pow(adc_reading,1.1546)))));
     61a:	8f 81       	ldd	r24, Y+7	; 0x07
     61c:	88 2f       	mov	r24, r24
     61e:	90 e0       	ldi	r25, 0x00	; 0
     620:	a0 e0       	ldi	r26, 0x00	; 0
     622:	b0 e0       	ldi	r27, 0x00	; 0
     624:	bc 01       	movw	r22, r24
     626:	cd 01       	movw	r24, r26
     628:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <__floatunsisf>
     62c:	dc 01       	movw	r26, r24
     62e:	cb 01       	movw	r24, r22
     630:	bc 01       	movw	r22, r24
     632:	cd 01       	movw	r24, r26
     634:	2f ee       	ldi	r18, 0xEF	; 239
     636:	39 ec       	ldi	r19, 0xC9	; 201
     638:	43 e9       	ldi	r20, 0x93	; 147
     63a:	5f e3       	ldi	r21, 0x3F	; 63
     63c:	0e 94 2e 12 	call	0x245c	; 0x245c <pow>
     640:	dc 01       	movw	r26, r24
     642:	cb 01       	movw	r24, r22
     644:	9c 01       	movw	r18, r24
     646:	ad 01       	movw	r20, r26
     648:	60 e0       	ldi	r22, 0x00	; 0
     64a:	70 e0       	ldi	r23, 0x00	; 0
     64c:	80 e8       	ldi	r24, 0x80	; 128
     64e:	9f e3       	ldi	r25, 0x3F	; 63
     650:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <__divsf3>
     654:	dc 01       	movw	r26, r24
     656:	cb 01       	movw	r24, r22
     658:	bc 01       	movw	r22, r24
     65a:	cd 01       	movw	r24, r26
     65c:	2a e9       	ldi	r18, 0x9A	; 154
     65e:	39 ef       	ldi	r19, 0xF9	; 249
     660:	4e e2       	ldi	r20, 0x2E	; 46
     662:	55 e4       	ldi	r21, 0x45	; 69
     664:	0e 94 a1 0c 	call	0x1942	; 0x1942 <__mulsf3>
     668:	dc 01       	movw	r26, r24
     66a:	cb 01       	movw	r24, r22
     66c:	bc 01       	movw	r22, r24
     66e:	cd 01       	movw	r24, r26
     670:	20 e0       	ldi	r18, 0x00	; 0
     672:	30 e0       	ldi	r19, 0x00	; 0
     674:	40 e2       	ldi	r20, 0x20	; 32
     676:	51 e4       	ldi	r21, 0x41	; 65
     678:	0e 94 a1 0c 	call	0x1942	; 0x1942 <__mulsf3>
     67c:	dc 01       	movw	r26, r24
     67e:	cb 01       	movw	r24, r22
     680:	bc 01       	movw	r22, r24
     682:	cd 01       	movw	r24, r26
     684:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <__fixsfsi>
     688:	dc 01       	movw	r26, r24
     68a:	cb 01       	movw	r24, r22
     68c:	aa 27       	eor	r26, r26
     68e:	97 fd       	sbrc	r25, 7
     690:	a0 95       	com	r26
     692:	ba 2f       	mov	r27, r26
     694:	bc 01       	movw	r22, r24
     696:	cd 01       	movw	r24, r26
     698:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <__floatsisf>
     69c:	dc 01       	movw	r26, r24
     69e:	cb 01       	movw	r24, r22
     6a0:	8b 83       	std	Y+3, r24	; 0x03
     6a2:	9c 83       	std	Y+4, r25	; 0x04
     6a4:	ad 83       	std	Y+5, r26	; 0x05
     6a6:	be 83       	std	Y+6, r27	; 0x06
	distanceInt = (int)distance;
     6a8:	6b 81       	ldd	r22, Y+3	; 0x03
     6aa:	7c 81       	ldd	r23, Y+4	; 0x04
     6ac:	8d 81       	ldd	r24, Y+5	; 0x05
     6ae:	9e 81       	ldd	r25, Y+6	; 0x06
     6b0:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <__fixsfsi>
     6b4:	dc 01       	movw	r26, r24
     6b6:	cb 01       	movw	r24, r22
     6b8:	9a 83       	std	Y+2, r25	; 0x02
     6ba:	89 83       	std	Y+1, r24	; 0x01
	if(distanceInt>800)
     6bc:	89 81       	ldd	r24, Y+1	; 0x01
     6be:	9a 81       	ldd	r25, Y+2	; 0x02
     6c0:	23 e0       	ldi	r18, 0x03	; 3
     6c2:	81 32       	cpi	r24, 0x21	; 33
     6c4:	92 07       	cpc	r25, r18
     6c6:	20 f0       	brcs	.+8      	; 0x6d0 <Sharp_GP2D12_estimation+0xcc>
	{
		distanceInt=800;
     6c8:	80 e2       	ldi	r24, 0x20	; 32
     6ca:	93 e0       	ldi	r25, 0x03	; 3
     6cc:	9a 83       	std	Y+2, r25	; 0x02
     6ce:	89 83       	std	Y+1, r24	; 0x01
	}
	return distanceInt;
     6d0:	89 81       	ldd	r24, Y+1	; 0x01
     6d2:	9a 81       	ldd	r25, Y+2	; 0x02
}
     6d4:	27 96       	adiw	r28, 0x07	; 7
     6d6:	0f b6       	in	r0, 0x3f	; 63
     6d8:	f8 94       	cli
     6da:	de bf       	out	0x3e, r29	; 62
     6dc:	0f be       	out	0x3f, r0	; 63
     6de:	cd bf       	out	0x3d, r28	; 61
     6e0:	cf 91       	pop	r28
     6e2:	df 91       	pop	r29
     6e4:	08 95       	ret

000006e6 <left_position_encoder_interrupt_init>:

void left_position_encoder_interrupt_init (void) //Interrupt 4 enable
{
     6e6:	df 93       	push	r29
     6e8:	cf 93       	push	r28
     6ea:	cd b7       	in	r28, 0x3d	; 61
     6ec:	de b7       	in	r29, 0x3e	; 62
 cli(); //Clears the global interrupt
     6ee:	f8 94       	cli
 EICRB = EICRB | 0x02; // INT4 is set to trigger with falling edge
     6f0:	aa e6       	ldi	r26, 0x6A	; 106
     6f2:	b0 e0       	ldi	r27, 0x00	; 0
     6f4:	ea e6       	ldi	r30, 0x6A	; 106
     6f6:	f0 e0       	ldi	r31, 0x00	; 0
     6f8:	80 81       	ld	r24, Z
     6fa:	82 60       	ori	r24, 0x02	; 2
     6fc:	8c 93       	st	X, r24
 EIMSK = EIMSK | 0x10; // Enable Interrupt INT4 for left position encoder
     6fe:	ad e3       	ldi	r26, 0x3D	; 61
     700:	b0 e0       	ldi	r27, 0x00	; 0
     702:	ed e3       	ldi	r30, 0x3D	; 61
     704:	f0 e0       	ldi	r31, 0x00	; 0
     706:	80 81       	ld	r24, Z
     708:	80 61       	ori	r24, 0x10	; 16
     70a:	8c 93       	st	X, r24
 sei();   // Enables the global interrupt 
     70c:	78 94       	sei
}
     70e:	cf 91       	pop	r28
     710:	df 91       	pop	r29
     712:	08 95       	ret

00000714 <right_position_encoder_interrupt_init>:

void right_position_encoder_interrupt_init (void) //Interrupt 5 enable
{
     714:	df 93       	push	r29
     716:	cf 93       	push	r28
     718:	cd b7       	in	r28, 0x3d	; 61
     71a:	de b7       	in	r29, 0x3e	; 62
 cli(); //Clears the global interrupt
     71c:	f8 94       	cli
 EICRB = EICRB | 0x08; // INT5 is set to trigger with falling edge
     71e:	aa e6       	ldi	r26, 0x6A	; 106
     720:	b0 e0       	ldi	r27, 0x00	; 0
     722:	ea e6       	ldi	r30, 0x6A	; 106
     724:	f0 e0       	ldi	r31, 0x00	; 0
     726:	80 81       	ld	r24, Z
     728:	88 60       	ori	r24, 0x08	; 8
     72a:	8c 93       	st	X, r24
 EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
     72c:	ad e3       	ldi	r26, 0x3D	; 61
     72e:	b0 e0       	ldi	r27, 0x00	; 0
     730:	ed e3       	ldi	r30, 0x3D	; 61
     732:	f0 e0       	ldi	r31, 0x00	; 0
     734:	80 81       	ld	r24, Z
     736:	80 62       	ori	r24, 0x20	; 32
     738:	8c 93       	st	X, r24
 sei();   // Enables the global interrupt 
     73a:	78 94       	sei
}
     73c:	cf 91       	pop	r28
     73e:	df 91       	pop	r29
     740:	08 95       	ret

00000742 <__vector_6>:

//ISR for right position encoder
ISR(INT5_vect)  
{
     742:	1f 92       	push	r1
     744:	0f 92       	push	r0
     746:	0f b6       	in	r0, 0x3f	; 63
     748:	0f 92       	push	r0
     74a:	11 24       	eor	r1, r1
     74c:	8f 93       	push	r24
     74e:	9f 93       	push	r25
     750:	af 93       	push	r26
     752:	bf 93       	push	r27
     754:	df 93       	push	r29
     756:	cf 93       	push	r28
     758:	cd b7       	in	r28, 0x3d	; 61
     75a:	de b7       	in	r29, 0x3e	; 62
 ShaftCountRight++;  //increment right shaft position count
     75c:	80 91 0e 03 	lds	r24, 0x030E
     760:	90 91 0f 03 	lds	r25, 0x030F
     764:	a0 91 10 03 	lds	r26, 0x0310
     768:	b0 91 11 03 	lds	r27, 0x0311
     76c:	01 96       	adiw	r24, 0x01	; 1
     76e:	a1 1d       	adc	r26, r1
     770:	b1 1d       	adc	r27, r1
     772:	80 93 0e 03 	sts	0x030E, r24
     776:	90 93 0f 03 	sts	0x030F, r25
     77a:	a0 93 10 03 	sts	0x0310, r26
     77e:	b0 93 11 03 	sts	0x0311, r27
}
     782:	cf 91       	pop	r28
     784:	df 91       	pop	r29
     786:	bf 91       	pop	r27
     788:	af 91       	pop	r26
     78a:	9f 91       	pop	r25
     78c:	8f 91       	pop	r24
     78e:	0f 90       	pop	r0
     790:	0f be       	out	0x3f, r0	; 63
     792:	0f 90       	pop	r0
     794:	1f 90       	pop	r1
     796:	18 95       	reti

00000798 <__vector_5>:


//ISR for left position encoder
ISR(INT4_vect)
{
     798:	1f 92       	push	r1
     79a:	0f 92       	push	r0
     79c:	0f b6       	in	r0, 0x3f	; 63
     79e:	0f 92       	push	r0
     7a0:	11 24       	eor	r1, r1
     7a2:	8f 93       	push	r24
     7a4:	9f 93       	push	r25
     7a6:	af 93       	push	r26
     7a8:	bf 93       	push	r27
     7aa:	df 93       	push	r29
     7ac:	cf 93       	push	r28
     7ae:	cd b7       	in	r28, 0x3d	; 61
     7b0:	de b7       	in	r29, 0x3e	; 62
 ShaftCountLeft++;  //increment left shaft position count
     7b2:	80 91 0a 03 	lds	r24, 0x030A
     7b6:	90 91 0b 03 	lds	r25, 0x030B
     7ba:	a0 91 0c 03 	lds	r26, 0x030C
     7be:	b0 91 0d 03 	lds	r27, 0x030D
     7c2:	01 96       	adiw	r24, 0x01	; 1
     7c4:	a1 1d       	adc	r26, r1
     7c6:	b1 1d       	adc	r27, r1
     7c8:	80 93 0a 03 	sts	0x030A, r24
     7cc:	90 93 0b 03 	sts	0x030B, r25
     7d0:	a0 93 0c 03 	sts	0x030C, r26
     7d4:	b0 93 0d 03 	sts	0x030D, r27
}
     7d8:	cf 91       	pop	r28
     7da:	df 91       	pop	r29
     7dc:	bf 91       	pop	r27
     7de:	af 91       	pop	r26
     7e0:	9f 91       	pop	r25
     7e2:	8f 91       	pop	r24
     7e4:	0f 90       	pop	r0
     7e6:	0f be       	out	0x3f, r0	; 63
     7e8:	0f 90       	pop	r0
     7ea:	1f 90       	pop	r1
     7ec:	18 95       	reti

000007ee <timer1_init>:
//TIMER1 initialization in 10 bit fast PWM mode  
//prescale:256
// WGM: 7) PWM 10bit fast, TOP=0x03FF
// actual value: 52.25Hz 
void timer1_init(void)
{
     7ee:	df 93       	push	r29
     7f0:	cf 93       	push	r28
     7f2:	cd b7       	in	r28, 0x3d	; 61
     7f4:	de b7       	in	r29, 0x3e	; 62
 TCCR1B = 0x00; //stop
     7f6:	e1 e8       	ldi	r30, 0x81	; 129
     7f8:	f0 e0       	ldi	r31, 0x00	; 0
     7fa:	10 82       	st	Z, r1
 TCNT1H = 0xFC; //Counter high value to which OCR1xH value is to be compared with
     7fc:	e5 e8       	ldi	r30, 0x85	; 133
     7fe:	f0 e0       	ldi	r31, 0x00	; 0
     800:	8c ef       	ldi	r24, 0xFC	; 252
     802:	80 83       	st	Z, r24
 TCNT1L = 0x01;	//Counter low value to which OCR1xH value is to be compared with
     804:	e4 e8       	ldi	r30, 0x84	; 132
     806:	f0 e0       	ldi	r31, 0x00	; 0
     808:	81 e0       	ldi	r24, 0x01	; 1
     80a:	80 83       	st	Z, r24
 OCR1AH = 0x03;	//Output compare Register high value for servo 1
     80c:	e9 e8       	ldi	r30, 0x89	; 137
     80e:	f0 e0       	ldi	r31, 0x00	; 0
     810:	83 e0       	ldi	r24, 0x03	; 3
     812:	80 83       	st	Z, r24
 OCR1AL = 0xFF;	//Output Compare Register low Value For servo 1
     814:	e8 e8       	ldi	r30, 0x88	; 136
     816:	f0 e0       	ldi	r31, 0x00	; 0
     818:	8f ef       	ldi	r24, 0xFF	; 255
     81a:	80 83       	st	Z, r24
 OCR1BH = 0x03;	//Output compare Register high value for servo 2
     81c:	eb e8       	ldi	r30, 0x8B	; 139
     81e:	f0 e0       	ldi	r31, 0x00	; 0
     820:	83 e0       	ldi	r24, 0x03	; 3
     822:	80 83       	st	Z, r24
 OCR1BL = 0xFF;	//Output Compare Register low Value For servo 2
     824:	ea e8       	ldi	r30, 0x8A	; 138
     826:	f0 e0       	ldi	r31, 0x00	; 0
     828:	8f ef       	ldi	r24, 0xFF	; 255
     82a:	80 83       	st	Z, r24
 OCR1CH = 0x03;	//Output compare Register high value for servo 3
     82c:	ed e8       	ldi	r30, 0x8D	; 141
     82e:	f0 e0       	ldi	r31, 0x00	; 0
     830:	83 e0       	ldi	r24, 0x03	; 3
     832:	80 83       	st	Z, r24
 OCR1CL = 0xFF;	//Output Compare Register low Value For servo 3
     834:	ec e8       	ldi	r30, 0x8C	; 140
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	8f ef       	ldi	r24, 0xFF	; 255
     83a:	80 83       	st	Z, r24
 ICR1H  = 0x03;	
     83c:	e7 e8       	ldi	r30, 0x87	; 135
     83e:	f0 e0       	ldi	r31, 0x00	; 0
     840:	83 e0       	ldi	r24, 0x03	; 3
     842:	80 83       	st	Z, r24
 ICR1L  = 0xFF;
     844:	e6 e8       	ldi	r30, 0x86	; 134
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	8f ef       	ldi	r24, 0xFF	; 255
     84a:	80 83       	st	Z, r24
 TCCR1A = 0xAB; /*{COM1A1=1, COM1A0=0; COM1B1=1, COM1B0=0; COM1C1=1 COM1C0=0}
     84c:	e0 e8       	ldi	r30, 0x80	; 128
     84e:	f0 e0       	ldi	r31, 0x00	; 0
     850:	8b ea       	ldi	r24, 0xAB	; 171
     852:	80 83       	st	Z, r24
 					For Overriding normal port functionality to OCRnA outputs.
				  {WGM11=1, WGM10=1} Along With WGM12 in TCCR1B for Selecting FAST PWM Mode*/
 TCCR1C = 0x00;
     854:	e2 e8       	ldi	r30, 0x82	; 130
     856:	f0 e0       	ldi	r31, 0x00	; 0
     858:	10 82       	st	Z, r1
 TCCR1B = 0x0C; //WGM12=1; CS12=1, CS11=0, CS10=0 (Prescaler=256)
     85a:	e1 e8       	ldi	r30, 0x81	; 129
     85c:	f0 e0       	ldi	r31, 0x00	; 0
     85e:	8c e0       	ldi	r24, 0x0C	; 12
     860:	80 83       	st	Z, r24
}
     862:	cf 91       	pop	r28
     864:	df 91       	pop	r29
     866:	08 95       	ret

00000868 <timer5_init>:
// Timer 5 initialized in PWM mode for velocity control
// Prescale:256
// PWM 8bit fast, TOP=0x00FF
// Timer Frequency:225.000Hz
void timer5_init()
{
     868:	df 93       	push	r29
     86a:	cf 93       	push	r28
     86c:	cd b7       	in	r28, 0x3d	; 61
     86e:	de b7       	in	r29, 0x3e	; 62
	TCCR5B = 0x00;	//Stop
     870:	e1 e2       	ldi	r30, 0x21	; 33
     872:	f1 e0       	ldi	r31, 0x01	; 1
     874:	10 82       	st	Z, r1
	TCNT5H = 0xFF;	//Counter higher 8-bit value to which OCR5xH value is compared with
     876:	e5 e2       	ldi	r30, 0x25	; 37
     878:	f1 e0       	ldi	r31, 0x01	; 1
     87a:	8f ef       	ldi	r24, 0xFF	; 255
     87c:	80 83       	st	Z, r24
	TCNT5L = 0x01;	//Counter lower 8-bit value to which OCR5xH value is compared with
     87e:	e4 e2       	ldi	r30, 0x24	; 36
     880:	f1 e0       	ldi	r31, 0x01	; 1
     882:	81 e0       	ldi	r24, 0x01	; 1
     884:	80 83       	st	Z, r24
	OCR5AH = 0x00;	//Output compare register high value for Left Motor
     886:	e9 e2       	ldi	r30, 0x29	; 41
     888:	f1 e0       	ldi	r31, 0x01	; 1
     88a:	10 82       	st	Z, r1
	OCR5AL = 0xFF;	//Output compare register low value for Left Motor
     88c:	e8 e2       	ldi	r30, 0x28	; 40
     88e:	f1 e0       	ldi	r31, 0x01	; 1
     890:	8f ef       	ldi	r24, 0xFF	; 255
     892:	80 83       	st	Z, r24
	OCR5BH = 0x00;	//Output compare register high value for Right Motor
     894:	eb e2       	ldi	r30, 0x2B	; 43
     896:	f1 e0       	ldi	r31, 0x01	; 1
     898:	10 82       	st	Z, r1
	OCR5BL = 0xFF;	//Output compare register low value for Right Motor
     89a:	ea e2       	ldi	r30, 0x2A	; 42
     89c:	f1 e0       	ldi	r31, 0x01	; 1
     89e:	8f ef       	ldi	r24, 0xFF	; 255
     8a0:	80 83       	st	Z, r24
	OCR5CH = 0x00;	//Output compare register high value for Motor C1
     8a2:	ed e2       	ldi	r30, 0x2D	; 45
     8a4:	f1 e0       	ldi	r31, 0x01	; 1
     8a6:	10 82       	st	Z, r1
	OCR5CL = 0xFF;	//Output compare register low value for Motor C1
     8a8:	ec e2       	ldi	r30, 0x2C	; 44
     8aa:	f1 e0       	ldi	r31, 0x01	; 1
     8ac:	8f ef       	ldi	r24, 0xFF	; 255
     8ae:	80 83       	st	Z, r24
	TCCR5A = 0xA9;	/*{COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1 COM5C0=0}
     8b0:	e0 e2       	ldi	r30, 0x20	; 32
     8b2:	f1 e0       	ldi	r31, 0x01	; 1
     8b4:	89 ea       	ldi	r24, 0xA9	; 169
     8b6:	80 83       	st	Z, r24
 					  For Overriding normal port functionality to OCRnA outputs.
				  	  {WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
     8b8:	e1 e2       	ldi	r30, 0x21	; 33
     8ba:	f1 e0       	ldi	r31, 0x01	; 1
     8bc:	8b e0       	ldi	r24, 0x0B	; 11
     8be:	80 83       	st	Z, r24
}
     8c0:	cf 91       	pop	r28
     8c2:	df 91       	pop	r29
     8c4:	08 95       	ret

000008c6 <velocity>:

// Function for robot velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
     8c6:	df 93       	push	r29
     8c8:	cf 93       	push	r28
     8ca:	0f 92       	push	r0
     8cc:	0f 92       	push	r0
     8ce:	cd b7       	in	r28, 0x3d	; 61
     8d0:	de b7       	in	r29, 0x3e	; 62
     8d2:	89 83       	std	Y+1, r24	; 0x01
     8d4:	6a 83       	std	Y+2, r22	; 0x02
	OCR5AL = (unsigned char)left_motor;
     8d6:	e8 e2       	ldi	r30, 0x28	; 40
     8d8:	f1 e0       	ldi	r31, 0x01	; 1
     8da:	89 81       	ldd	r24, Y+1	; 0x01
     8dc:	80 83       	st	Z, r24
	OCR5BL = (unsigned char)right_motor;
     8de:	ea e2       	ldi	r30, 0x2A	; 42
     8e0:	f1 e0       	ldi	r31, 0x01	; 1
     8e2:	8a 81       	ldd	r24, Y+2	; 0x02
     8e4:	80 83       	st	Z, r24
	UDR0 = 0x00;
     8e6:	e6 ec       	ldi	r30, 0xC6	; 198
     8e8:	f0 e0       	ldi	r31, 0x00	; 0
     8ea:	10 82       	st	Z, r1
}
     8ec:	0f 90       	pop	r0
     8ee:	0f 90       	pop	r0
     8f0:	cf 91       	pop	r28
     8f2:	df 91       	pop	r29
     8f4:	08 95       	ret

000008f6 <motion_set>:

//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
     8f6:	df 93       	push	r29
     8f8:	cf 93       	push	r28
     8fa:	0f 92       	push	r0
     8fc:	0f 92       	push	r0
     8fe:	cd b7       	in	r28, 0x3d	; 61
     900:	de b7       	in	r29, 0x3e	; 62
     902:	8a 83       	std	Y+2, r24	; 0x02
 unsigned char PortARestore = 0;
     904:	19 82       	std	Y+1, r1	; 0x01

 Direction &= 0x0F; 		// removing upper nibbel for the protection
     906:	8a 81       	ldd	r24, Y+2	; 0x02
     908:	8f 70       	andi	r24, 0x0F	; 15
     90a:	8a 83       	std	Y+2, r24	; 0x02
 PortARestore = PORTA; 		// reading the PORTA original status
     90c:	e2 e2       	ldi	r30, 0x22	; 34
     90e:	f0 e0       	ldi	r31, 0x00	; 0
     910:	80 81       	ld	r24, Z
     912:	89 83       	std	Y+1, r24	; 0x01
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     914:	89 81       	ldd	r24, Y+1	; 0x01
     916:	80 7f       	andi	r24, 0xF0	; 240
     918:	89 83       	std	Y+1, r24	; 0x01
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     91a:	99 81       	ldd	r25, Y+1	; 0x01
     91c:	8a 81       	ldd	r24, Y+2	; 0x02
     91e:	89 2b       	or	r24, r25
     920:	89 83       	std	Y+1, r24	; 0x01
 PORTA = PortARestore; 		// executing the command
     922:	e2 e2       	ldi	r30, 0x22	; 34
     924:	f0 e0       	ldi	r31, 0x00	; 0
     926:	89 81       	ldd	r24, Y+1	; 0x01
     928:	80 83       	st	Z, r24
}
     92a:	0f 90       	pop	r0
     92c:	0f 90       	pop	r0
     92e:	cf 91       	pop	r28
     930:	df 91       	pop	r29
     932:	08 95       	ret

00000934 <forward>:

void forward (void) //both wheels forward
{
     934:	df 93       	push	r29
     936:	cf 93       	push	r28
     938:	cd b7       	in	r28, 0x3d	; 61
     93a:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x06);
     93c:	86 e0       	ldi	r24, 0x06	; 6
     93e:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <motion_set>
}
     942:	cf 91       	pop	r28
     944:	df 91       	pop	r29
     946:	08 95       	ret

00000948 <back>:

void back (void) //both wheels backward
{
     948:	df 93       	push	r29
     94a:	cf 93       	push	r28
     94c:	cd b7       	in	r28, 0x3d	; 61
     94e:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x09);
     950:	89 e0       	ldi	r24, 0x09	; 9
     952:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <motion_set>
}
     956:	cf 91       	pop	r28
     958:	df 91       	pop	r29
     95a:	08 95       	ret

0000095c <left>:

void left (void) //Left wheel backward, Right wheel forward
{
     95c:	df 93       	push	r29
     95e:	cf 93       	push	r28
     960:	cd b7       	in	r28, 0x3d	; 61
     962:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x05);
     964:	85 e0       	ldi	r24, 0x05	; 5
     966:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <motion_set>
}
     96a:	cf 91       	pop	r28
     96c:	df 91       	pop	r29
     96e:	08 95       	ret

00000970 <right>:

void right (void) //Left wheel forward, Right wheel backward
{
     970:	df 93       	push	r29
     972:	cf 93       	push	r28
     974:	cd b7       	in	r28, 0x3d	; 61
     976:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x0A);
     978:	8a e0       	ldi	r24, 0x0A	; 10
     97a:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <motion_set>
}
     97e:	cf 91       	pop	r28
     980:	df 91       	pop	r29
     982:	08 95       	ret

00000984 <soft_left>:

void soft_left (void) //Left wheel stationary, Right wheel forward
{
     984:	df 93       	push	r29
     986:	cf 93       	push	r28
     988:	cd b7       	in	r28, 0x3d	; 61
     98a:	de b7       	in	r29, 0x3e	; 62
 motion_set(0x04);
     98c:	84 e0       	ldi	r24, 0x04	; 4
     98e:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <motion_set>
}
     992:	cf 91       	pop	r28
     994:	df 91       	pop	r29
     996:	08 95       	ret

00000998 <soft_right>:

void soft_right (void) //Left wheel forward, Right wheel is stationary
{
     998:	df 93       	push	r29
     99a:	cf 93       	push	r28
     99c:	cd b7       	in	r28, 0x3d	; 61
     99e:	de b7       	in	r29, 0x3e	; 62
 motion_set(0x02);
     9a0:	82 e0       	ldi	r24, 0x02	; 2
     9a2:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <motion_set>
}
     9a6:	cf 91       	pop	r28
     9a8:	df 91       	pop	r29
     9aa:	08 95       	ret

000009ac <soft_left_2>:

void soft_left_2 (void) //Left wheel backward, right wheel stationary
{
     9ac:	df 93       	push	r29
     9ae:	cf 93       	push	r28
     9b0:	cd b7       	in	r28, 0x3d	; 61
     9b2:	de b7       	in	r29, 0x3e	; 62
 motion_set(0x01);
     9b4:	81 e0       	ldi	r24, 0x01	; 1
     9b6:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <motion_set>
}
     9ba:	cf 91       	pop	r28
     9bc:	df 91       	pop	r29
     9be:	08 95       	ret

000009c0 <soft_right_2>:

void soft_right_2 (void) //Left wheel stationary, Right wheel backward
{
     9c0:	df 93       	push	r29
     9c2:	cf 93       	push	r28
     9c4:	cd b7       	in	r28, 0x3d	; 61
     9c6:	de b7       	in	r29, 0x3e	; 62
 motion_set(0x08);
     9c8:	88 e0       	ldi	r24, 0x08	; 8
     9ca:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <motion_set>
}
     9ce:	cf 91       	pop	r28
     9d0:	df 91       	pop	r29
     9d2:	08 95       	ret

000009d4 <stop>:

void stop (void) //stops robot motion
{
     9d4:	df 93       	push	r29
     9d6:	cf 93       	push	r28
     9d8:	cd b7       	in	r28, 0x3d	; 61
     9da:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x00);
     9dc:	80 e0       	ldi	r24, 0x00	; 0
     9de:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <motion_set>
}
     9e2:	cf 91       	pop	r28
     9e4:	df 91       	pop	r29
     9e6:	08 95       	ret

000009e8 <turn_on_sharp234_wl>:

void turn_on_sharp234_wl (void) //turn on Sharp IR range sensors 2, 3, 4 and white line sensor's red LED
{
     9e8:	df 93       	push	r29
     9ea:	cf 93       	push	r28
     9ec:	cd b7       	in	r28, 0x3d	; 61
     9ee:	de b7       	in	r29, 0x3e	; 62
  PORTG = PORTG & 0xFB;
     9f0:	a4 e3       	ldi	r26, 0x34	; 52
     9f2:	b0 e0       	ldi	r27, 0x00	; 0
     9f4:	e4 e3       	ldi	r30, 0x34	; 52
     9f6:	f0 e0       	ldi	r31, 0x00	; 0
     9f8:	80 81       	ld	r24, Z
     9fa:	8b 7f       	andi	r24, 0xFB	; 251
     9fc:	8c 93       	st	X, r24
}
     9fe:	cf 91       	pop	r28
     a00:	df 91       	pop	r29
     a02:	08 95       	ret

00000a04 <turn_off_sharp234_wl>:

void turn_off_sharp234_wl (void) //turn off Sharp IR range sensors 2, 3, 4 and white line sensor's red LED
{
     a04:	df 93       	push	r29
     a06:	cf 93       	push	r28
     a08:	cd b7       	in	r28, 0x3d	; 61
     a0a:	de b7       	in	r29, 0x3e	; 62
 PORTG = PORTG | 0x04;
     a0c:	a4 e3       	ldi	r26, 0x34	; 52
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	e4 e3       	ldi	r30, 0x34	; 52
     a12:	f0 e0       	ldi	r31, 0x00	; 0
     a14:	80 81       	ld	r24, Z
     a16:	84 60       	ori	r24, 0x04	; 4
     a18:	8c 93       	st	X, r24
}
     a1a:	cf 91       	pop	r28
     a1c:	df 91       	pop	r29
     a1e:	08 95       	ret

00000a20 <turn_on_sharp15>:

void turn_on_sharp15 (void) //turn on Sharp IR range sensors 1,5
{
     a20:	df 93       	push	r29
     a22:	cf 93       	push	r28
     a24:	cd b7       	in	r28, 0x3d	; 61
     a26:	de b7       	in	r29, 0x3e	; 62
  PORTH = PORTH & 0xFB;
     a28:	a2 e0       	ldi	r26, 0x02	; 2
     a2a:	b1 e0       	ldi	r27, 0x01	; 1
     a2c:	e2 e0       	ldi	r30, 0x02	; 2
     a2e:	f1 e0       	ldi	r31, 0x01	; 1
     a30:	80 81       	ld	r24, Z
     a32:	8b 7f       	andi	r24, 0xFB	; 251
     a34:	8c 93       	st	X, r24
}
     a36:	cf 91       	pop	r28
     a38:	df 91       	pop	r29
     a3a:	08 95       	ret

00000a3c <turn_off_sharp15>:

void turn_off_sharp15 (void) //turn off Sharp IR range sensors 1,5
{
     a3c:	df 93       	push	r29
     a3e:	cf 93       	push	r28
     a40:	cd b7       	in	r28, 0x3d	; 61
     a42:	de b7       	in	r29, 0x3e	; 62
 PORTH = PORTH | 0x04;
     a44:	a2 e0       	ldi	r26, 0x02	; 2
     a46:	b1 e0       	ldi	r27, 0x01	; 1
     a48:	e2 e0       	ldi	r30, 0x02	; 2
     a4a:	f1 e0       	ldi	r31, 0x01	; 1
     a4c:	80 81       	ld	r24, Z
     a4e:	84 60       	ori	r24, 0x04	; 4
     a50:	8c 93       	st	X, r24
}
     a52:	cf 91       	pop	r28
     a54:	df 91       	pop	r29
     a56:	08 95       	ret

00000a58 <turn_on_ir_proxi_sensors>:

void turn_on_ir_proxi_sensors (void) //turn on IR Proximity sensors
{
     a58:	df 93       	push	r29
     a5a:	cf 93       	push	r28
     a5c:	cd b7       	in	r28, 0x3d	; 61
     a5e:	de b7       	in	r29, 0x3e	; 62
 PORTH = PORTH & 0xF7;
     a60:	a2 e0       	ldi	r26, 0x02	; 2
     a62:	b1 e0       	ldi	r27, 0x01	; 1
     a64:	e2 e0       	ldi	r30, 0x02	; 2
     a66:	f1 e0       	ldi	r31, 0x01	; 1
     a68:	80 81       	ld	r24, Z
     a6a:	87 7f       	andi	r24, 0xF7	; 247
     a6c:	8c 93       	st	X, r24
 UDR0 = 0x00;
     a6e:	e6 ec       	ldi	r30, 0xC6	; 198
     a70:	f0 e0       	ldi	r31, 0x00	; 0
     a72:	10 82       	st	Z, r1
}
     a74:	cf 91       	pop	r28
     a76:	df 91       	pop	r29
     a78:	08 95       	ret

00000a7a <turn_off_ir_proxi_sensors>:

void turn_off_ir_proxi_sensors (void) //turn off IR Proximity sensors
{
     a7a:	df 93       	push	r29
     a7c:	cf 93       	push	r28
     a7e:	cd b7       	in	r28, 0x3d	; 61
     a80:	de b7       	in	r29, 0x3e	; 62
 PORTH = PORTH | 0x08;
     a82:	a2 e0       	ldi	r26, 0x02	; 2
     a84:	b1 e0       	ldi	r27, 0x01	; 1
     a86:	e2 e0       	ldi	r30, 0x02	; 2
     a88:	f1 e0       	ldi	r31, 0x01	; 1
     a8a:	80 81       	ld	r24, Z
     a8c:	88 60       	ori	r24, 0x08	; 8
     a8e:	8c 93       	st	X, r24
 UDR0 = 0x00;
     a90:	e6 ec       	ldi	r30, 0xC6	; 198
     a92:	f0 e0       	ldi	r31, 0x00	; 0
     a94:	10 82       	st	Z, r1
}
     a96:	cf 91       	pop	r28
     a98:	df 91       	pop	r29
     a9a:	08 95       	ret

00000a9c <turn_on_all_proxy_sensors>:

void turn_on_all_proxy_sensors (void) // turn on Sharp 2, 3, 4, red LED of the white line sensors
									  // Sharp 1, 5 and IR proximity sensor
{
     a9c:	df 93       	push	r29
     a9e:	cf 93       	push	r28
     aa0:	cd b7       	in	r28, 0x3d	; 61
     aa2:	de b7       	in	r29, 0x3e	; 62
 PORTH = PORTH & 0xF3; //set PORTH 3 and PORTH 1 pins to 0
     aa4:	a2 e0       	ldi	r26, 0x02	; 2
     aa6:	b1 e0       	ldi	r27, 0x01	; 1
     aa8:	e2 e0       	ldi	r30, 0x02	; 2
     aaa:	f1 e0       	ldi	r31, 0x01	; 1
     aac:	80 81       	ld	r24, Z
     aae:	83 7f       	andi	r24, 0xF3	; 243
     ab0:	8c 93       	st	X, r24
 PORTG = PORTG & 0xFB; //set PORTG 2 pin to 0
     ab2:	a4 e3       	ldi	r26, 0x34	; 52
     ab4:	b0 e0       	ldi	r27, 0x00	; 0
     ab6:	e4 e3       	ldi	r30, 0x34	; 52
     ab8:	f0 e0       	ldi	r31, 0x00	; 0
     aba:	80 81       	ld	r24, Z
     abc:	8b 7f       	andi	r24, 0xFB	; 251
     abe:	8c 93       	st	X, r24
 UDR0 = 0x00;
     ac0:	e6 ec       	ldi	r30, 0xC6	; 198
     ac2:	f0 e0       	ldi	r31, 0x00	; 0
     ac4:	10 82       	st	Z, r1
}
     ac6:	cf 91       	pop	r28
     ac8:	df 91       	pop	r29
     aca:	08 95       	ret

00000acc <turn_off_all_proxy_sensors>:

void turn_off_all_proxy_sensors (void) // turn off Sharp 2, 3, 4, red LED of the white line sensors
									  // Sharp 1, 5 and IR proximity sensor
{
     acc:	df 93       	push	r29
     ace:	cf 93       	push	r28
     ad0:	cd b7       	in	r28, 0x3d	; 61
     ad2:	de b7       	in	r29, 0x3e	; 62
 PORTH = PORTH | 0x0C; //set PORTH 3 and PORTH 1 pins to 1
     ad4:	a2 e0       	ldi	r26, 0x02	; 2
     ad6:	b1 e0       	ldi	r27, 0x01	; 1
     ad8:	e2 e0       	ldi	r30, 0x02	; 2
     ada:	f1 e0       	ldi	r31, 0x01	; 1
     adc:	80 81       	ld	r24, Z
     ade:	8c 60       	ori	r24, 0x0C	; 12
     ae0:	8c 93       	st	X, r24
 PORTG = PORTG | 0x04; //set PORTG 2 pin to 1
     ae2:	a4 e3       	ldi	r26, 0x34	; 52
     ae4:	b0 e0       	ldi	r27, 0x00	; 0
     ae6:	e4 e3       	ldi	r30, 0x34	; 52
     ae8:	f0 e0       	ldi	r31, 0x00	; 0
     aea:	80 81       	ld	r24, Z
     aec:	84 60       	ori	r24, 0x04	; 4
     aee:	8c 93       	st	X, r24
 UDR0 = 0x00;
     af0:	e6 ec       	ldi	r30, 0xC6	; 198
     af2:	f0 e0       	ldi	r31, 0x00	; 0
     af4:	10 82       	st	Z, r1
}
     af6:	cf 91       	pop	r28
     af8:	df 91       	pop	r29
     afa:	08 95       	ret

00000afc <buzzer_on>:

//Function to turn on the buzzer
void buzzer_on (void)
{
     afc:	df 93       	push	r29
     afe:	cf 93       	push	r28
     b00:	0f 92       	push	r0
     b02:	cd b7       	in	r28, 0x3d	; 61
     b04:	de b7       	in	r29, 0x3e	; 62
 unsigned char port_restore = 0;
     b06:	19 82       	std	Y+1, r1	; 0x01
 port_restore = PINC;
     b08:	e6 e2       	ldi	r30, 0x26	; 38
     b0a:	f0 e0       	ldi	r31, 0x00	; 0
     b0c:	80 81       	ld	r24, Z
     b0e:	89 83       	std	Y+1, r24	; 0x01
 port_restore = port_restore | 0x08;
     b10:	89 81       	ldd	r24, Y+1	; 0x01
     b12:	88 60       	ori	r24, 0x08	; 8
     b14:	89 83       	std	Y+1, r24	; 0x01
 PORTC = port_restore;
     b16:	e8 e2       	ldi	r30, 0x28	; 40
     b18:	f0 e0       	ldi	r31, 0x00	; 0
     b1a:	89 81       	ldd	r24, Y+1	; 0x01
     b1c:	80 83       	st	Z, r24
 UDR0 = 0x00;
     b1e:	e6 ec       	ldi	r30, 0xC6	; 198
     b20:	f0 e0       	ldi	r31, 0x00	; 0
     b22:	10 82       	st	Z, r1
}
     b24:	0f 90       	pop	r0
     b26:	cf 91       	pop	r28
     b28:	df 91       	pop	r29
     b2a:	08 95       	ret

00000b2c <buzzer_off>:

//Function to turn off the buzzer
void buzzer_off (void)
{
     b2c:	df 93       	push	r29
     b2e:	cf 93       	push	r28
     b30:	0f 92       	push	r0
     b32:	cd b7       	in	r28, 0x3d	; 61
     b34:	de b7       	in	r29, 0x3e	; 62
 unsigned char port_restore = 0;
     b36:	19 82       	std	Y+1, r1	; 0x01
 port_restore = PINC;
     b38:	e6 e2       	ldi	r30, 0x26	; 38
     b3a:	f0 e0       	ldi	r31, 0x00	; 0
     b3c:	80 81       	ld	r24, Z
     b3e:	89 83       	std	Y+1, r24	; 0x01
 port_restore = port_restore & 0xF7;
     b40:	89 81       	ldd	r24, Y+1	; 0x01
     b42:	87 7f       	andi	r24, 0xF7	; 247
     b44:	89 83       	std	Y+1, r24	; 0x01
 PORTC = port_restore;
     b46:	e8 e2       	ldi	r30, 0x28	; 40
     b48:	f0 e0       	ldi	r31, 0x00	; 0
     b4a:	89 81       	ldd	r24, Y+1	; 0x01
     b4c:	80 83       	st	Z, r24
 UDR0 = 0x00;
     b4e:	e6 ec       	ldi	r30, 0xC6	; 198
     b50:	f0 e0       	ldi	r31, 0x00	; 0
     b52:	10 82       	st	Z, r1
}
     b54:	0f 90       	pop	r0
     b56:	cf 91       	pop	r28
     b58:	df 91       	pop	r29
     b5a:	08 95       	ret

00000b5c <angle_rotate>:

//Function used for turning robot by specified degrees
void angle_rotate(unsigned int Degrees)
{
     b5c:	df 93       	push	r29
     b5e:	cf 93       	push	r28
     b60:	cd b7       	in	r28, 0x3d	; 61
     b62:	de b7       	in	r29, 0x3e	; 62
     b64:	2c 97       	sbiw	r28, 0x0c	; 12
     b66:	0f b6       	in	r0, 0x3f	; 63
     b68:	f8 94       	cli
     b6a:	de bf       	out	0x3e, r29	; 62
     b6c:	0f be       	out	0x3f, r0	; 63
     b6e:	cd bf       	out	0x3d, r28	; 61
     b70:	9a 87       	std	Y+10, r25	; 0x0a
     b72:	89 87       	std	Y+9, r24	; 0x09
 float ReqdShaftCount = 0;
     b74:	80 e0       	ldi	r24, 0x00	; 0
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	a0 e0       	ldi	r26, 0x00	; 0
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	8d 83       	std	Y+5, r24	; 0x05
     b7e:	9e 83       	std	Y+6, r25	; 0x06
     b80:	af 83       	std	Y+7, r26	; 0x07
     b82:	b8 87       	std	Y+8, r27	; 0x08
 unsigned long int ReqdShaftCountInt = 0;
     b84:	19 82       	std	Y+1, r1	; 0x01
     b86:	1a 82       	std	Y+2, r1	; 0x02
     b88:	1b 82       	std	Y+3, r1	; 0x03
     b8a:	1c 82       	std	Y+4, r1	; 0x04

 ReqdShaftCount = (float) Degrees/ 4.090; // division by resolution to get shaft count
     b8c:	89 85       	ldd	r24, Y+9	; 0x09
     b8e:	9a 85       	ldd	r25, Y+10	; 0x0a
     b90:	cc 01       	movw	r24, r24
     b92:	a0 e0       	ldi	r26, 0x00	; 0
     b94:	b0 e0       	ldi	r27, 0x00	; 0
     b96:	bc 01       	movw	r22, r24
     b98:	cd 01       	movw	r24, r26
     b9a:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <__floatunsisf>
     b9e:	dc 01       	movw	r26, r24
     ba0:	cb 01       	movw	r24, r22
     ba2:	bc 01       	movw	r22, r24
     ba4:	cd 01       	movw	r24, r26
     ba6:	28 e4       	ldi	r18, 0x48	; 72
     ba8:	31 ee       	ldi	r19, 0xE1	; 225
     baa:	42 e8       	ldi	r20, 0x82	; 130
     bac:	50 e4       	ldi	r21, 0x40	; 64
     bae:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <__divsf3>
     bb2:	dc 01       	movw	r26, r24
     bb4:	cb 01       	movw	r24, r22
     bb6:	8d 83       	std	Y+5, r24	; 0x05
     bb8:	9e 83       	std	Y+6, r25	; 0x06
     bba:	af 83       	std	Y+7, r26	; 0x07
     bbc:	b8 87       	std	Y+8, r27	; 0x08
 ReqdShaftCountInt = (unsigned int) ReqdShaftCount;
     bbe:	6d 81       	ldd	r22, Y+5	; 0x05
     bc0:	7e 81       	ldd	r23, Y+6	; 0x06
     bc2:	8f 81       	ldd	r24, Y+7	; 0x07
     bc4:	98 85       	ldd	r25, Y+8	; 0x08
     bc6:	0e 94 cb 0a 	call	0x1596	; 0x1596 <__fixunssfsi>
     bca:	dc 01       	movw	r26, r24
     bcc:	cb 01       	movw	r24, r22
     bce:	cc 01       	movw	r24, r24
     bd0:	a0 e0       	ldi	r26, 0x00	; 0
     bd2:	b0 e0       	ldi	r27, 0x00	; 0
     bd4:	89 83       	std	Y+1, r24	; 0x01
     bd6:	9a 83       	std	Y+2, r25	; 0x02
     bd8:	ab 83       	std	Y+3, r26	; 0x03
     bda:	bc 83       	std	Y+4, r27	; 0x04
 ShaftCountRight = 0; 
     bdc:	10 92 0e 03 	sts	0x030E, r1
     be0:	10 92 0f 03 	sts	0x030F, r1
     be4:	10 92 10 03 	sts	0x0310, r1
     be8:	10 92 11 03 	sts	0x0311, r1
 ShaftCountLeft = 0; 
     bec:	10 92 0a 03 	sts	0x030A, r1
     bf0:	10 92 0b 03 	sts	0x030B, r1
     bf4:	10 92 0c 03 	sts	0x030C, r1
     bf8:	10 92 0d 03 	sts	0x030D, r1

 while (1)
 {
  if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
     bfc:	20 91 0e 03 	lds	r18, 0x030E
     c00:	30 91 0f 03 	lds	r19, 0x030F
     c04:	40 91 10 03 	lds	r20, 0x0310
     c08:	50 91 11 03 	lds	r21, 0x0311
     c0c:	1c 86       	std	Y+12, r1	; 0x0c
     c0e:	89 81       	ldd	r24, Y+1	; 0x01
     c10:	9a 81       	ldd	r25, Y+2	; 0x02
     c12:	ab 81       	ldd	r26, Y+3	; 0x03
     c14:	bc 81       	ldd	r27, Y+4	; 0x04
     c16:	28 17       	cp	r18, r24
     c18:	39 07       	cpc	r19, r25
     c1a:	4a 07       	cpc	r20, r26
     c1c:	5b 07       	cpc	r21, r27
     c1e:	10 f0       	brcs	.+4      	; 0xc24 <angle_rotate+0xc8>
     c20:	81 e0       	ldi	r24, 0x01	; 1
     c22:	8c 87       	std	Y+12, r24	; 0x0c
     c24:	20 91 0a 03 	lds	r18, 0x030A
     c28:	30 91 0b 03 	lds	r19, 0x030B
     c2c:	40 91 0c 03 	lds	r20, 0x030C
     c30:	50 91 0d 03 	lds	r21, 0x030D
     c34:	1b 86       	std	Y+11, r1	; 0x0b
     c36:	89 81       	ldd	r24, Y+1	; 0x01
     c38:	9a 81       	ldd	r25, Y+2	; 0x02
     c3a:	ab 81       	ldd	r26, Y+3	; 0x03
     c3c:	bc 81       	ldd	r27, Y+4	; 0x04
     c3e:	28 17       	cp	r18, r24
     c40:	39 07       	cpc	r19, r25
     c42:	4a 07       	cpc	r20, r26
     c44:	5b 07       	cpc	r21, r27
     c46:	10 f0       	brcs	.+4      	; 0xc4c <angle_rotate+0xf0>
     c48:	91 e0       	ldi	r25, 0x01	; 1
     c4a:	9b 87       	std	Y+11, r25	; 0x0b
     c4c:	8c 85       	ldd	r24, Y+12	; 0x0c
     c4e:	9b 85       	ldd	r25, Y+11	; 0x0b
     c50:	89 2b       	or	r24, r25
     c52:	88 23       	and	r24, r24
     c54:	99 f2       	breq	.-90     	; 0xbfc <angle_rotate+0xa0>
  break;
 }
 stop(); //Stop robot
     c56:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <stop>
 UDR0 = 0x00;
     c5a:	e6 ec       	ldi	r30, 0xC6	; 198
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	10 82       	st	Z, r1
}
     c60:	2c 96       	adiw	r28, 0x0c	; 12
     c62:	0f b6       	in	r0, 0x3f	; 63
     c64:	f8 94       	cli
     c66:	de bf       	out	0x3e, r29	; 62
     c68:	0f be       	out	0x3f, r0	; 63
     c6a:	cd bf       	out	0x3d, r28	; 61
     c6c:	cf 91       	pop	r28
     c6e:	df 91       	pop	r29
     c70:	08 95       	ret

00000c72 <linear_distance_mm>:

//Function used for moving robot forward by specified distance

void linear_distance_mm(unsigned int DistanceInMM)
{
     c72:	df 93       	push	r29
     c74:	cf 93       	push	r28
     c76:	cd b7       	in	r28, 0x3d	; 61
     c78:	de b7       	in	r29, 0x3e	; 62
     c7a:	2a 97       	sbiw	r28, 0x0a	; 10
     c7c:	0f b6       	in	r0, 0x3f	; 63
     c7e:	f8 94       	cli
     c80:	de bf       	out	0x3e, r29	; 62
     c82:	0f be       	out	0x3f, r0	; 63
     c84:	cd bf       	out	0x3d, r28	; 61
     c86:	9a 87       	std	Y+10, r25	; 0x0a
     c88:	89 87       	std	Y+9, r24	; 0x09
 float ReqdShaftCount = 0;
     c8a:	80 e0       	ldi	r24, 0x00	; 0
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	a0 e0       	ldi	r26, 0x00	; 0
     c90:	b0 e0       	ldi	r27, 0x00	; 0
     c92:	8d 83       	std	Y+5, r24	; 0x05
     c94:	9e 83       	std	Y+6, r25	; 0x06
     c96:	af 83       	std	Y+7, r26	; 0x07
     c98:	b8 87       	std	Y+8, r27	; 0x08
 unsigned long int ReqdShaftCountInt = 0;
     c9a:	19 82       	std	Y+1, r1	; 0x01
     c9c:	1a 82       	std	Y+2, r1	; 0x02
     c9e:	1b 82       	std	Y+3, r1	; 0x03
     ca0:	1c 82       	std	Y+4, r1	; 0x04

 ReqdShaftCount = DistanceInMM / 5.338; // division by resolution to get shaft count
     ca2:	89 85       	ldd	r24, Y+9	; 0x09
     ca4:	9a 85       	ldd	r25, Y+10	; 0x0a
     ca6:	cc 01       	movw	r24, r24
     ca8:	a0 e0       	ldi	r26, 0x00	; 0
     caa:	b0 e0       	ldi	r27, 0x00	; 0
     cac:	bc 01       	movw	r22, r24
     cae:	cd 01       	movw	r24, r26
     cb0:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <__floatunsisf>
     cb4:	dc 01       	movw	r26, r24
     cb6:	cb 01       	movw	r24, r22
     cb8:	bc 01       	movw	r22, r24
     cba:	cd 01       	movw	r24, r26
     cbc:	25 ee       	ldi	r18, 0xE5	; 229
     cbe:	30 ed       	ldi	r19, 0xD0	; 208
     cc0:	4a ea       	ldi	r20, 0xAA	; 170
     cc2:	50 e4       	ldi	r21, 0x40	; 64
     cc4:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <__divsf3>
     cc8:	dc 01       	movw	r26, r24
     cca:	cb 01       	movw	r24, r22
     ccc:	8d 83       	std	Y+5, r24	; 0x05
     cce:	9e 83       	std	Y+6, r25	; 0x06
     cd0:	af 83       	std	Y+7, r26	; 0x07
     cd2:	b8 87       	std	Y+8, r27	; 0x08
 ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
     cd4:	6d 81       	ldd	r22, Y+5	; 0x05
     cd6:	7e 81       	ldd	r23, Y+6	; 0x06
     cd8:	8f 81       	ldd	r24, Y+7	; 0x07
     cda:	98 85       	ldd	r25, Y+8	; 0x08
     cdc:	0e 94 cb 0a 	call	0x1596	; 0x1596 <__fixunssfsi>
     ce0:	dc 01       	movw	r26, r24
     ce2:	cb 01       	movw	r24, r22
     ce4:	89 83       	std	Y+1, r24	; 0x01
     ce6:	9a 83       	std	Y+2, r25	; 0x02
     ce8:	ab 83       	std	Y+3, r26	; 0x03
     cea:	bc 83       	std	Y+4, r27	; 0x04
  
 ShaftCountRight = 0;
     cec:	10 92 0e 03 	sts	0x030E, r1
     cf0:	10 92 0f 03 	sts	0x030F, r1
     cf4:	10 92 10 03 	sts	0x0310, r1
     cf8:	10 92 11 03 	sts	0x0311, r1
 while(1)
 {
  
  if(ShaftCountRight > ReqdShaftCountInt)
     cfc:	20 91 0e 03 	lds	r18, 0x030E
     d00:	30 91 0f 03 	lds	r19, 0x030F
     d04:	40 91 10 03 	lds	r20, 0x0310
     d08:	50 91 11 03 	lds	r21, 0x0311
     d0c:	89 81       	ldd	r24, Y+1	; 0x01
     d0e:	9a 81       	ldd	r25, Y+2	; 0x02
     d10:	ab 81       	ldd	r26, Y+3	; 0x03
     d12:	bc 81       	ldd	r27, Y+4	; 0x04
     d14:	82 17       	cp	r24, r18
     d16:	93 07       	cpc	r25, r19
     d18:	a4 07       	cpc	r26, r20
     d1a:	b5 07       	cpc	r27, r21
     d1c:	78 f7       	brcc	.-34     	; 0xcfc <linear_distance_mm+0x8a>
  {
  	break;
  }
 } 
 stop(); //Stop robot
     d1e:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <stop>
 UDR0 = 0x00;
     d22:	e6 ec       	ldi	r30, 0xC6	; 198
     d24:	f0 e0       	ldi	r31, 0x00	; 0
     d26:	10 82       	st	Z, r1
}
     d28:	2a 96       	adiw	r28, 0x0a	; 10
     d2a:	0f b6       	in	r0, 0x3f	; 63
     d2c:	f8 94       	cli
     d2e:	de bf       	out	0x3e, r29	; 62
     d30:	0f be       	out	0x3f, r0	; 63
     d32:	cd bf       	out	0x3d, r28	; 61
     d34:	cf 91       	pop	r28
     d36:	df 91       	pop	r29
     d38:	08 95       	ret

00000d3a <forward_mm>:

void forward_mm(unsigned int DistanceInMM)
{
     d3a:	df 93       	push	r29
     d3c:	cf 93       	push	r28
     d3e:	0f 92       	push	r0
     d40:	0f 92       	push	r0
     d42:	cd b7       	in	r28, 0x3d	; 61
     d44:	de b7       	in	r29, 0x3e	; 62
     d46:	9a 83       	std	Y+2, r25	; 0x02
     d48:	89 83       	std	Y+1, r24	; 0x01
 forward();
     d4a:	0e 94 9a 04 	call	0x934	; 0x934 <forward>
 linear_distance_mm(DistanceInMM);
     d4e:	89 81       	ldd	r24, Y+1	; 0x01
     d50:	9a 81       	ldd	r25, Y+2	; 0x02
     d52:	0e 94 39 06 	call	0xc72	; 0xc72 <linear_distance_mm>
}
     d56:	0f 90       	pop	r0
     d58:	0f 90       	pop	r0
     d5a:	cf 91       	pop	r28
     d5c:	df 91       	pop	r29
     d5e:	08 95       	ret

00000d60 <back_mm>:

void back_mm(unsigned int DistanceInMM)
{
     d60:	df 93       	push	r29
     d62:	cf 93       	push	r28
     d64:	0f 92       	push	r0
     d66:	0f 92       	push	r0
     d68:	cd b7       	in	r28, 0x3d	; 61
     d6a:	de b7       	in	r29, 0x3e	; 62
     d6c:	9a 83       	std	Y+2, r25	; 0x02
     d6e:	89 83       	std	Y+1, r24	; 0x01
 back();
     d70:	0e 94 a4 04 	call	0x948	; 0x948 <back>
 linear_distance_mm(DistanceInMM);
     d74:	89 81       	ldd	r24, Y+1	; 0x01
     d76:	9a 81       	ldd	r25, Y+2	; 0x02
     d78:	0e 94 39 06 	call	0xc72	; 0xc72 <linear_distance_mm>
}
     d7c:	0f 90       	pop	r0
     d7e:	0f 90       	pop	r0
     d80:	cf 91       	pop	r28
     d82:	df 91       	pop	r29
     d84:	08 95       	ret

00000d86 <left_degrees>:

void left_degrees(unsigned int Degrees) 
{
     d86:	df 93       	push	r29
     d88:	cf 93       	push	r28
     d8a:	0f 92       	push	r0
     d8c:	0f 92       	push	r0
     d8e:	cd b7       	in	r28, 0x3d	; 61
     d90:	de b7       	in	r29, 0x3e	; 62
     d92:	9a 83       	std	Y+2, r25	; 0x02
     d94:	89 83       	std	Y+1, r24	; 0x01
// 88 pulses for 360 degrees rotation 4.090 degrees per count
 left(); //Turn left
     d96:	0e 94 ae 04 	call	0x95c	; 0x95c <left>
 angle_rotate(Degrees);
     d9a:	89 81       	ldd	r24, Y+1	; 0x01
     d9c:	9a 81       	ldd	r25, Y+2	; 0x02
     d9e:	0e 94 ae 05 	call	0xb5c	; 0xb5c <angle_rotate>
}
     da2:	0f 90       	pop	r0
     da4:	0f 90       	pop	r0
     da6:	cf 91       	pop	r28
     da8:	df 91       	pop	r29
     daa:	08 95       	ret

00000dac <right_degrees>:


void right_degrees(unsigned int Degrees)
{
     dac:	df 93       	push	r29
     dae:	cf 93       	push	r28
     db0:	0f 92       	push	r0
     db2:	0f 92       	push	r0
     db4:	cd b7       	in	r28, 0x3d	; 61
     db6:	de b7       	in	r29, 0x3e	; 62
     db8:	9a 83       	std	Y+2, r25	; 0x02
     dba:	89 83       	std	Y+1, r24	; 0x01
// 88 pulses for 360 degrees rotation 4.090 degrees per count
 right(); //Turn right
     dbc:	0e 94 b8 04 	call	0x970	; 0x970 <right>
 angle_rotate(Degrees);
     dc0:	89 81       	ldd	r24, Y+1	; 0x01
     dc2:	9a 81       	ldd	r25, Y+2	; 0x02
     dc4:	0e 94 ae 05 	call	0xb5c	; 0xb5c <angle_rotate>
}
     dc8:	0f 90       	pop	r0
     dca:	0f 90       	pop	r0
     dcc:	cf 91       	pop	r28
     dce:	df 91       	pop	r29
     dd0:	08 95       	ret

00000dd2 <soft_left_degrees>:

void soft_left_degrees(unsigned int Degrees)
{
     dd2:	df 93       	push	r29
     dd4:	cf 93       	push	r28
     dd6:	0f 92       	push	r0
     dd8:	0f 92       	push	r0
     dda:	cd b7       	in	r28, 0x3d	; 61
     ddc:	de b7       	in	r29, 0x3e	; 62
     dde:	9a 83       	std	Y+2, r25	; 0x02
     de0:	89 83       	std	Y+1, r24	; 0x01
 // 176 pulses for 360 degrees rotation 2.045 degrees per count
 soft_left(); //Turn soft left
     de2:	0e 94 c2 04 	call	0x984	; 0x984 <soft_left>
 Degrees=Degrees*2;
     de6:	89 81       	ldd	r24, Y+1	; 0x01
     de8:	9a 81       	ldd	r25, Y+2	; 0x02
     dea:	88 0f       	add	r24, r24
     dec:	99 1f       	adc	r25, r25
     dee:	9a 83       	std	Y+2, r25	; 0x02
     df0:	89 83       	std	Y+1, r24	; 0x01
 angle_rotate(Degrees);
     df2:	89 81       	ldd	r24, Y+1	; 0x01
     df4:	9a 81       	ldd	r25, Y+2	; 0x02
     df6:	0e 94 ae 05 	call	0xb5c	; 0xb5c <angle_rotate>
}
     dfa:	0f 90       	pop	r0
     dfc:	0f 90       	pop	r0
     dfe:	cf 91       	pop	r28
     e00:	df 91       	pop	r29
     e02:	08 95       	ret

00000e04 <soft_right_degrees>:

void soft_right_degrees(unsigned int Degrees)
{
     e04:	df 93       	push	r29
     e06:	cf 93       	push	r28
     e08:	0f 92       	push	r0
     e0a:	0f 92       	push	r0
     e0c:	cd b7       	in	r28, 0x3d	; 61
     e0e:	de b7       	in	r29, 0x3e	; 62
     e10:	9a 83       	std	Y+2, r25	; 0x02
     e12:	89 83       	std	Y+1, r24	; 0x01
 // 176 pulses for 360 degrees rotation 2.045 degrees per count
 soft_right();  //Turn soft right
     e14:	0e 94 cc 04 	call	0x998	; 0x998 <soft_right>
 Degrees=Degrees*2;
     e18:	89 81       	ldd	r24, Y+1	; 0x01
     e1a:	9a 81       	ldd	r25, Y+2	; 0x02
     e1c:	88 0f       	add	r24, r24
     e1e:	99 1f       	adc	r25, r25
     e20:	9a 83       	std	Y+2, r25	; 0x02
     e22:	89 83       	std	Y+1, r24	; 0x01
 angle_rotate(Degrees);
     e24:	89 81       	ldd	r24, Y+1	; 0x01
     e26:	9a 81       	ldd	r25, Y+2	; 0x02
     e28:	0e 94 ae 05 	call	0xb5c	; 0xb5c <angle_rotate>
}
     e2c:	0f 90       	pop	r0
     e2e:	0f 90       	pop	r0
     e30:	cf 91       	pop	r28
     e32:	df 91       	pop	r29
     e34:	08 95       	ret

00000e36 <soft_left_2_degrees>:

void soft_left_2_degrees(unsigned int Degrees)
{
     e36:	df 93       	push	r29
     e38:	cf 93       	push	r28
     e3a:	0f 92       	push	r0
     e3c:	0f 92       	push	r0
     e3e:	cd b7       	in	r28, 0x3d	; 61
     e40:	de b7       	in	r29, 0x3e	; 62
     e42:	9a 83       	std	Y+2, r25	; 0x02
     e44:	89 83       	std	Y+1, r24	; 0x01
 // 176 pulses for 360 degrees rotation 2.045 degrees per count
 soft_left_2(); //Turn reverse soft left
     e46:	0e 94 d6 04 	call	0x9ac	; 0x9ac <soft_left_2>
 Degrees=Degrees*2;
     e4a:	89 81       	ldd	r24, Y+1	; 0x01
     e4c:	9a 81       	ldd	r25, Y+2	; 0x02
     e4e:	88 0f       	add	r24, r24
     e50:	99 1f       	adc	r25, r25
     e52:	9a 83       	std	Y+2, r25	; 0x02
     e54:	89 83       	std	Y+1, r24	; 0x01
 angle_rotate(Degrees);
     e56:	89 81       	ldd	r24, Y+1	; 0x01
     e58:	9a 81       	ldd	r25, Y+2	; 0x02
     e5a:	0e 94 ae 05 	call	0xb5c	; 0xb5c <angle_rotate>
}
     e5e:	0f 90       	pop	r0
     e60:	0f 90       	pop	r0
     e62:	cf 91       	pop	r28
     e64:	df 91       	pop	r29
     e66:	08 95       	ret

00000e68 <soft_right_2_degrees>:

void soft_right_2_degrees(unsigned int Degrees)
{
     e68:	df 93       	push	r29
     e6a:	cf 93       	push	r28
     e6c:	0f 92       	push	r0
     e6e:	0f 92       	push	r0
     e70:	cd b7       	in	r28, 0x3d	; 61
     e72:	de b7       	in	r29, 0x3e	; 62
     e74:	9a 83       	std	Y+2, r25	; 0x02
     e76:	89 83       	std	Y+1, r24	; 0x01
 // 176 pulses for 360 degrees rotation 2.045 degrees per count
 soft_right_2();  //Turn reverse soft right
     e78:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <soft_right_2>
 Degrees=Degrees*2;
     e7c:	89 81       	ldd	r24, Y+1	; 0x01
     e7e:	9a 81       	ldd	r25, Y+2	; 0x02
     e80:	88 0f       	add	r24, r24
     e82:	99 1f       	adc	r25, r25
     e84:	9a 83       	std	Y+2, r25	; 0x02
     e86:	89 83       	std	Y+1, r24	; 0x01
 angle_rotate(Degrees);
     e88:	89 81       	ldd	r24, Y+1	; 0x01
     e8a:	9a 81       	ldd	r25, Y+2	; 0x02
     e8c:	0e 94 ae 05 	call	0xb5c	; 0xb5c <angle_rotate>
}
     e90:	0f 90       	pop	r0
     e92:	0f 90       	pop	r0
     e94:	cf 91       	pop	r28
     e96:	df 91       	pop	r29
     e98:	08 95       	ret

00000e9a <servo_1>:


//Function to rotate Servo 1 by a specified angle in the multiples of 1.86 degrees
void servo_1(unsigned char degrees)  
{
     e9a:	0f 93       	push	r16
     e9c:	1f 93       	push	r17
     e9e:	df 93       	push	r29
     ea0:	cf 93       	push	r28
     ea2:	00 d0       	rcall	.+0      	; 0xea4 <servo_1+0xa>
     ea4:	0f 92       	push	r0
     ea6:	0f 92       	push	r0
     ea8:	cd b7       	in	r28, 0x3d	; 61
     eaa:	de b7       	in	r29, 0x3e	; 62
     eac:	8d 83       	std	Y+5, r24	; 0x05
 float PositionPanServo = 0;
     eae:	80 e0       	ldi	r24, 0x00	; 0
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	a0 e0       	ldi	r26, 0x00	; 0
     eb4:	b0 e0       	ldi	r27, 0x00	; 0
     eb6:	89 83       	std	Y+1, r24	; 0x01
     eb8:	9a 83       	std	Y+2, r25	; 0x02
     eba:	ab 83       	std	Y+3, r26	; 0x03
     ebc:	bc 83       	std	Y+4, r27	; 0x04
 PositionPanServo = ((float)degrees / 1.86) + 35.0;
     ebe:	8d 81       	ldd	r24, Y+5	; 0x05
     ec0:	88 2f       	mov	r24, r24
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	a0 e0       	ldi	r26, 0x00	; 0
     ec6:	b0 e0       	ldi	r27, 0x00	; 0
     ec8:	bc 01       	movw	r22, r24
     eca:	cd 01       	movw	r24, r26
     ecc:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <__floatunsisf>
     ed0:	dc 01       	movw	r26, r24
     ed2:	cb 01       	movw	r24, r22
     ed4:	bc 01       	movw	r22, r24
     ed6:	cd 01       	movw	r24, r26
     ed8:	2b e7       	ldi	r18, 0x7B	; 123
     eda:	34 e1       	ldi	r19, 0x14	; 20
     edc:	4e ee       	ldi	r20, 0xEE	; 238
     ede:	5f e3       	ldi	r21, 0x3F	; 63
     ee0:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <__divsf3>
     ee4:	dc 01       	movw	r26, r24
     ee6:	cb 01       	movw	r24, r22
     ee8:	bc 01       	movw	r22, r24
     eea:	cd 01       	movw	r24, r26
     eec:	20 e0       	ldi	r18, 0x00	; 0
     eee:	30 e0       	ldi	r19, 0x00	; 0
     ef0:	4c e0       	ldi	r20, 0x0C	; 12
     ef2:	52 e4       	ldi	r21, 0x42	; 66
     ef4:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <__addsf3>
     ef8:	dc 01       	movw	r26, r24
     efa:	cb 01       	movw	r24, r22
     efc:	89 83       	std	Y+1, r24	; 0x01
     efe:	9a 83       	std	Y+2, r25	; 0x02
     f00:	ab 83       	std	Y+3, r26	; 0x03
     f02:	bc 83       	std	Y+4, r27	; 0x04
 OCR1AH = 0x00;
     f04:	e9 e8       	ldi	r30, 0x89	; 137
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	10 82       	st	Z, r1
 OCR1AL = (unsigned char) PositionPanServo;
     f0a:	08 e8       	ldi	r16, 0x88	; 136
     f0c:	10 e0       	ldi	r17, 0x00	; 0
     f0e:	69 81       	ldd	r22, Y+1	; 0x01
     f10:	7a 81       	ldd	r23, Y+2	; 0x02
     f12:	8b 81       	ldd	r24, Y+3	; 0x03
     f14:	9c 81       	ldd	r25, Y+4	; 0x04
     f16:	0e 94 cb 0a 	call	0x1596	; 0x1596 <__fixunssfsi>
     f1a:	dc 01       	movw	r26, r24
     f1c:	cb 01       	movw	r24, r22
     f1e:	f8 01       	movw	r30, r16
     f20:	80 83       	st	Z, r24
 UDR0 = 0x00;
     f22:	e6 ec       	ldi	r30, 0xC6	; 198
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	10 82       	st	Z, r1
}
     f28:	0f 90       	pop	r0
     f2a:	0f 90       	pop	r0
     f2c:	0f 90       	pop	r0
     f2e:	0f 90       	pop	r0
     f30:	0f 90       	pop	r0
     f32:	cf 91       	pop	r28
     f34:	df 91       	pop	r29
     f36:	1f 91       	pop	r17
     f38:	0f 91       	pop	r16
     f3a:	08 95       	ret

00000f3c <servo_2>:


//Function to rotate Servo 2 by a specified angle in the multiples of 1.86 degrees
void servo_2(unsigned char degrees)
{
     f3c:	0f 93       	push	r16
     f3e:	1f 93       	push	r17
     f40:	df 93       	push	r29
     f42:	cf 93       	push	r28
     f44:	00 d0       	rcall	.+0      	; 0xf46 <servo_2+0xa>
     f46:	0f 92       	push	r0
     f48:	0f 92       	push	r0
     f4a:	cd b7       	in	r28, 0x3d	; 61
     f4c:	de b7       	in	r29, 0x3e	; 62
     f4e:	8d 83       	std	Y+5, r24	; 0x05
 float PositionTiltServo = 0;
     f50:	80 e0       	ldi	r24, 0x00	; 0
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	a0 e0       	ldi	r26, 0x00	; 0
     f56:	b0 e0       	ldi	r27, 0x00	; 0
     f58:	89 83       	std	Y+1, r24	; 0x01
     f5a:	9a 83       	std	Y+2, r25	; 0x02
     f5c:	ab 83       	std	Y+3, r26	; 0x03
     f5e:	bc 83       	std	Y+4, r27	; 0x04
 PositionTiltServo = ((float)degrees / 1.86) + 35.0;
     f60:	8d 81       	ldd	r24, Y+5	; 0x05
     f62:	88 2f       	mov	r24, r24
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	a0 e0       	ldi	r26, 0x00	; 0
     f68:	b0 e0       	ldi	r27, 0x00	; 0
     f6a:	bc 01       	movw	r22, r24
     f6c:	cd 01       	movw	r24, r26
     f6e:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <__floatunsisf>
     f72:	dc 01       	movw	r26, r24
     f74:	cb 01       	movw	r24, r22
     f76:	bc 01       	movw	r22, r24
     f78:	cd 01       	movw	r24, r26
     f7a:	2b e7       	ldi	r18, 0x7B	; 123
     f7c:	34 e1       	ldi	r19, 0x14	; 20
     f7e:	4e ee       	ldi	r20, 0xEE	; 238
     f80:	5f e3       	ldi	r21, 0x3F	; 63
     f82:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <__divsf3>
     f86:	dc 01       	movw	r26, r24
     f88:	cb 01       	movw	r24, r22
     f8a:	bc 01       	movw	r22, r24
     f8c:	cd 01       	movw	r24, r26
     f8e:	20 e0       	ldi	r18, 0x00	; 0
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	4c e0       	ldi	r20, 0x0C	; 12
     f94:	52 e4       	ldi	r21, 0x42	; 66
     f96:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <__addsf3>
     f9a:	dc 01       	movw	r26, r24
     f9c:	cb 01       	movw	r24, r22
     f9e:	89 83       	std	Y+1, r24	; 0x01
     fa0:	9a 83       	std	Y+2, r25	; 0x02
     fa2:	ab 83       	std	Y+3, r26	; 0x03
     fa4:	bc 83       	std	Y+4, r27	; 0x04
 OCR1BH = 0x00;
     fa6:	eb e8       	ldi	r30, 0x8B	; 139
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	10 82       	st	Z, r1
 OCR1BL = (unsigned char) PositionTiltServo;
     fac:	0a e8       	ldi	r16, 0x8A	; 138
     fae:	10 e0       	ldi	r17, 0x00	; 0
     fb0:	69 81       	ldd	r22, Y+1	; 0x01
     fb2:	7a 81       	ldd	r23, Y+2	; 0x02
     fb4:	8b 81       	ldd	r24, Y+3	; 0x03
     fb6:	9c 81       	ldd	r25, Y+4	; 0x04
     fb8:	0e 94 cb 0a 	call	0x1596	; 0x1596 <__fixunssfsi>
     fbc:	dc 01       	movw	r26, r24
     fbe:	cb 01       	movw	r24, r22
     fc0:	f8 01       	movw	r30, r16
     fc2:	80 83       	st	Z, r24
 UDR0 = 0x00;
     fc4:	e6 ec       	ldi	r30, 0xC6	; 198
     fc6:	f0 e0       	ldi	r31, 0x00	; 0
     fc8:	10 82       	st	Z, r1
}
     fca:	0f 90       	pop	r0
     fcc:	0f 90       	pop	r0
     fce:	0f 90       	pop	r0
     fd0:	0f 90       	pop	r0
     fd2:	0f 90       	pop	r0
     fd4:	cf 91       	pop	r28
     fd6:	df 91       	pop	r29
     fd8:	1f 91       	pop	r17
     fda:	0f 91       	pop	r16
     fdc:	08 95       	ret

00000fde <servo_1_free>:
//servo_free functions unlocks the servo motors from the any angle 
//and make them free by giving 100% duty cycle at the PWM. This function can be used to 
//reduce the power consumption of the motor if it is holding load against the gravity.

void servo_1_free (void) //makes servo 1 free rotating
{
     fde:	df 93       	push	r29
     fe0:	cf 93       	push	r28
     fe2:	cd b7       	in	r28, 0x3d	; 61
     fe4:	de b7       	in	r29, 0x3e	; 62
 OCR1AH = 0x03; 
     fe6:	e9 e8       	ldi	r30, 0x89	; 137
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	83 e0       	ldi	r24, 0x03	; 3
     fec:	80 83       	st	Z, r24
 OCR1AL = 0xFF; //Servo 1 off
     fee:	e8 e8       	ldi	r30, 0x88	; 136
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	8f ef       	ldi	r24, 0xFF	; 255
     ff4:	80 83       	st	Z, r24
 UDR0 = 0x00;
     ff6:	e6 ec       	ldi	r30, 0xC6	; 198
     ff8:	f0 e0       	ldi	r31, 0x00	; 0
     ffa:	10 82       	st	Z, r1
}
     ffc:	cf 91       	pop	r28
     ffe:	df 91       	pop	r29
    1000:	08 95       	ret

00001002 <servo_2_free>:

void servo_2_free (void) //makes servo 2 free rotating
{
    1002:	df 93       	push	r29
    1004:	cf 93       	push	r28
    1006:	cd b7       	in	r28, 0x3d	; 61
    1008:	de b7       	in	r29, 0x3e	; 62
 OCR1BH = 0x03;
    100a:	eb e8       	ldi	r30, 0x8B	; 139
    100c:	f0 e0       	ldi	r31, 0x00	; 0
    100e:	83 e0       	ldi	r24, 0x03	; 3
    1010:	80 83       	st	Z, r24
 OCR1BL = 0xFF; //Servo 2 off
    1012:	ea e8       	ldi	r30, 0x8A	; 138
    1014:	f0 e0       	ldi	r31, 0x00	; 0
    1016:	8f ef       	ldi	r24, 0xFF	; 255
    1018:	80 83       	st	Z, r24
 UDR0 = 0x00;
    101a:	e6 ec       	ldi	r30, 0xC6	; 198
    101c:	f0 e0       	ldi	r31, 0x00	; 0
    101e:	10 82       	st	Z, r1
}
    1020:	cf 91       	pop	r28
    1022:	df 91       	pop	r29
    1024:	08 95       	ret

00001026 <init_devices>:

//Function to initialize all the devices
void init_devices()
{
    1026:	df 93       	push	r29
    1028:	cf 93       	push	r28
    102a:	cd b7       	in	r28, 0x3d	; 61
    102c:	de b7       	in	r29, 0x3e	; 62
 cli(); //Clears the global interrupt
    102e:	f8 94       	cli
 port_init();  //Initializes all the ports
    1030:	0e 94 c9 01 	call	0x392	; 0x392 <port_init>
 left_position_encoder_interrupt_init();
    1034:	0e 94 73 03 	call	0x6e6	; 0x6e6 <left_position_encoder_interrupt_init>
 right_position_encoder_interrupt_init();
    1038:	0e 94 8a 03 	call	0x714	; 0x714 <right_position_encoder_interrupt_init>
 uart0_init(); //Initailize UART0 for serial communiaction
    103c:	0e 94 d6 00 	call	0x1ac	; 0x1ac <uart0_init>
 timer1_init();
    1040:	0e 94 f7 03 	call	0x7ee	; 0x7ee <timer1_init>
 timer5_init();
    1044:	0e 94 34 04 	call	0x868	; 0x868 <timer5_init>
 adc_init();
    1048:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <adc_init>
 spi_init();
    104c:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <spi_init>
 sei();   // Enables the global interrupt 
    1050:	78 94       	sei
}
    1052:	cf 91       	pop	r28
    1054:	df 91       	pop	r29
    1056:	08 95       	ret

00001058 <__vector_25>:

ISR(USART0_RX_vect) 		// ISR for receive complete interrupt
{
    1058:	1f 92       	push	r1
    105a:	0f 92       	push	r0
    105c:	0f b6       	in	r0, 0x3f	; 63
    105e:	0f 92       	push	r0
    1060:	00 90 5b 00 	lds	r0, 0x005B
    1064:	0f 92       	push	r0
    1066:	11 24       	eor	r1, r1
    1068:	2f 93       	push	r18
    106a:	3f 93       	push	r19
    106c:	4f 93       	push	r20
    106e:	5f 93       	push	r21
    1070:	6f 93       	push	r22
    1072:	7f 93       	push	r23
    1074:	8f 93       	push	r24
    1076:	9f 93       	push	r25
    1078:	af 93       	push	r26
    107a:	bf 93       	push	r27
    107c:	ef 93       	push	r30
    107e:	ff 93       	push	r31
    1080:	df 93       	push	r29
    1082:	cf 93       	push	r28
    1084:	cd b7       	in	r28, 0x3d	; 61
    1086:	de b7       	in	r29, 0x3e	; 62
    1088:	a4 97       	sbiw	r28, 0x24	; 36
    108a:	de bf       	out	0x3e, r29	; 62
    108c:	cd bf       	out	0x3d, r28	; 61
	data[count] = UDR0;	
    108e:	80 91 08 03 	lds	r24, 0x0308
    1092:	90 91 09 03 	lds	r25, 0x0309
    1096:	e6 ec       	ldi	r30, 0xC6	; 198
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	20 81       	ld	r18, Z
    109c:	fc 01       	movw	r30, r24
    109e:	ef 5d       	subi	r30, 0xDF	; 223
    10a0:	fc 4f       	sbci	r31, 0xFC	; 252
    10a2:	20 83       	st	Z, r18
	count = count + 1;
    10a4:	80 91 08 03 	lds	r24, 0x0308
    10a8:	90 91 09 03 	lds	r25, 0x0309
    10ac:	01 96       	adiw	r24, 0x01	; 1
    10ae:	90 93 09 03 	sts	0x0309, r25
    10b2:	80 93 08 03 	sts	0x0308, r24
    10b6:	41 c2       	rjmp	.+1154   	; 0x153a <__vector_25+0x4e2>

	while(count == 4)
	{	
		if(data[0] == 0x10)
    10b8:	80 91 21 03 	lds	r24, 0x0321
    10bc:	80 31       	cpi	r24, 0x10	; 16
    10be:	41 f4       	brne	.+16     	; 0x10d0 <__vector_25+0x78>
		{
			sei();
    10c0:	78 94       	sei
			stop();
    10c2:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <stop>
			count = 0;
    10c6:	10 92 09 03 	sts	0x0309, r1
    10ca:	10 92 08 03 	sts	0x0308, r1
    10ce:	3d c2       	rjmp	.+1146   	; 0x154a <__vector_25+0x4f2>
			break;
		}
		if(data[0] == 0x11)
    10d0:	80 91 21 03 	lds	r24, 0x0321
    10d4:	81 31       	cpi	r24, 0x11	; 17
    10d6:	09 f5       	brne	.+66     	; 0x111a <__vector_25+0xc2>
		{	
			sei();
    10d8:	78 94       	sei
				if(data[2] == 0x01 )
    10da:	80 91 23 03 	lds	r24, 0x0323
    10de:	81 30       	cpi	r24, 0x01	; 1
    10e0:	89 f4       	brne	.+34     	; 0x1104 <__vector_25+0xac>
				{
					unsigned int x = (int)data[1];
    10e2:	80 91 22 03 	lds	r24, 0x0322
    10e6:	88 2f       	mov	r24, r24
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	9c a3       	std	Y+36, r25	; 0x24
    10ec:	8b a3       	std	Y+35, r24	; 0x23
				  	forward_mm(x*8);
    10ee:	8b a1       	ldd	r24, Y+35	; 0x23
    10f0:	9c a1       	ldd	r25, Y+36	; 0x24
    10f2:	88 0f       	add	r24, r24
    10f4:	99 1f       	adc	r25, r25
    10f6:	88 0f       	add	r24, r24
    10f8:	99 1f       	adc	r25, r25
    10fa:	88 0f       	add	r24, r24
    10fc:	99 1f       	adc	r25, r25
    10fe:	0e 94 9d 06 	call	0xd3a	; 0xd3a <forward_mm>
    1102:	06 c0       	rjmp	.+12     	; 0x1110 <__vector_25+0xb8>
				 }
				 else if(data[2] == 0x00)
    1104:	80 91 23 03 	lds	r24, 0x0323
    1108:	88 23       	and	r24, r24
    110a:	11 f4       	brne	.+4      	; 0x1110 <__vector_25+0xb8>
				 {
				 	forward();
    110c:	0e 94 9a 04 	call	0x934	; 0x934 <forward>
				 }
			count = 0;
    1110:	10 92 09 03 	sts	0x0309, r1
    1114:	10 92 08 03 	sts	0x0308, r1
    1118:	18 c2       	rjmp	.+1072   	; 0x154a <__vector_25+0x4f2>
			break;			
		}
		else if(data[0] == 0x12)
    111a:	80 91 21 03 	lds	r24, 0x0321
    111e:	82 31       	cpi	r24, 0x12	; 18
    1120:	09 f5       	brne	.+66     	; 0x1164 <__vector_25+0x10c>
		{
			sei();
    1122:	78 94       	sei
				if(data[2] == 0x01 )
    1124:	80 91 23 03 	lds	r24, 0x0323
    1128:	81 30       	cpi	r24, 0x01	; 1
    112a:	89 f4       	brne	.+34     	; 0x114e <__vector_25+0xf6>
				{
					unsigned int x = (int)data[1];
    112c:	80 91 22 03 	lds	r24, 0x0322
    1130:	88 2f       	mov	r24, r24
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	9a a3       	std	Y+34, r25	; 0x22
    1136:	89 a3       	std	Y+33, r24	; 0x21
					back_mm(x*8);
    1138:	89 a1       	ldd	r24, Y+33	; 0x21
    113a:	9a a1       	ldd	r25, Y+34	; 0x22
    113c:	88 0f       	add	r24, r24
    113e:	99 1f       	adc	r25, r25
    1140:	88 0f       	add	r24, r24
    1142:	99 1f       	adc	r25, r25
    1144:	88 0f       	add	r24, r24
    1146:	99 1f       	adc	r25, r25
    1148:	0e 94 b0 06 	call	0xd60	; 0xd60 <back_mm>
    114c:	06 c0       	rjmp	.+12     	; 0x115a <__vector_25+0x102>
				}
				else if(data[2] == 0x00)
    114e:	80 91 23 03 	lds	r24, 0x0323
    1152:	88 23       	and	r24, r24
    1154:	11 f4       	brne	.+4      	; 0x115a <__vector_25+0x102>
				{
					back();
    1156:	0e 94 a4 04 	call	0x948	; 0x948 <back>
				}
			count = 0;
    115a:	10 92 09 03 	sts	0x0309, r1
    115e:	10 92 08 03 	sts	0x0308, r1
    1162:	f3 c1       	rjmp	.+998    	; 0x154a <__vector_25+0x4f2>
			break;	
		}
		else if(data[0] == 0x13)
    1164:	80 91 21 03 	lds	r24, 0x0321
    1168:	83 31       	cpi	r24, 0x13	; 19
    116a:	91 f4       	brne	.+36     	; 0x1190 <__vector_25+0x138>
		{
			sei();
    116c:	78 94       	sei
			unsigned int x = (int)data[1];
    116e:	80 91 22 03 	lds	r24, 0x0322
    1172:	88 2f       	mov	r24, r24
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	98 a3       	std	Y+32, r25	; 0x20
    1178:	8f 8f       	std	Y+31, r24	; 0x1f
			right_degrees(x*2);
    117a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    117c:	98 a1       	ldd	r25, Y+32	; 0x20
    117e:	88 0f       	add	r24, r24
    1180:	99 1f       	adc	r25, r25
    1182:	0e 94 d6 06 	call	0xdac	; 0xdac <right_degrees>
			count = 0;
    1186:	10 92 09 03 	sts	0x0309, r1
    118a:	10 92 08 03 	sts	0x0308, r1
    118e:	dd c1       	rjmp	.+954    	; 0x154a <__vector_25+0x4f2>
			break;	
		}
		else if(data[0] == 0x14)
    1190:	80 91 21 03 	lds	r24, 0x0321
    1194:	84 31       	cpi	r24, 0x14	; 20
    1196:	91 f4       	brne	.+36     	; 0x11bc <__vector_25+0x164>
		{
			sei();
    1198:	78 94       	sei
			unsigned int x = (int)data[1];
    119a:	80 91 22 03 	lds	r24, 0x0322
    119e:	88 2f       	mov	r24, r24
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	9e 8f       	std	Y+30, r25	; 0x1e
    11a4:	8d 8f       	std	Y+29, r24	; 0x1d
			left_degrees(x*2);
    11a6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    11a8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    11aa:	88 0f       	add	r24, r24
    11ac:	99 1f       	adc	r25, r25
    11ae:	0e 94 c3 06 	call	0xd86	; 0xd86 <left_degrees>
			count = 0;
    11b2:	10 92 09 03 	sts	0x0309, r1
    11b6:	10 92 08 03 	sts	0x0308, r1
    11ba:	c7 c1       	rjmp	.+910    	; 0x154a <__vector_25+0x4f2>
			break;	
		}
		else if(data[0] == 0x15)
    11bc:	80 91 21 03 	lds	r24, 0x0321
    11c0:	85 31       	cpi	r24, 0x15	; 21
    11c2:	71 f4       	brne	.+28     	; 0x11e0 <__vector_25+0x188>
		{
			unsigned int temp;
			sei();
    11c4:	78 94       	sei
			temp = ADC_Conversion(data[1]);
    11c6:	80 91 22 03 	lds	r24, 0x0322
    11ca:	0e 94 0c 02 	call	0x418	; 0x418 <ADC_Conversion>
    11ce:	88 2f       	mov	r24, r24
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	9c 8f       	std	Y+28, r25	; 0x1c
    11d4:	8b 8f       	std	Y+27, r24	; 0x1b
			count = 0;
    11d6:	10 92 09 03 	sts	0x0309, r1
    11da:	10 92 08 03 	sts	0x0308, r1
    11de:	b5 c1       	rjmp	.+874    	; 0x154a <__vector_25+0x4f2>
			break;	
		}
		else if(data[0] == 0x16)
    11e0:	80 91 21 03 	lds	r24, 0x0321
    11e4:	86 31       	cpi	r24, 0x16	; 22
    11e6:	09 f0       	breq	.+2      	; 0x11ea <__vector_25+0x192>
    11e8:	48 c0       	rjmp	.+144    	; 0x127a <__vector_25+0x222>
		{	
			sei();
    11ea:	78 94       	sei
			float temp;
			unsigned int converted;
			sharp = ADC_Conversion(11);						//Stores the Analog value of front sharp connected to ADC channel 11 into variable "sharp"
    11ec:	8b e0       	ldi	r24, 0x0B	; 11
    11ee:	0e 94 0c 02 	call	0x418	; 0x418 <ADC_Conversion>
    11f2:	80 93 25 03 	sts	0x0325, r24
			value = Sharp_GP2D12_estimation(sharp);	
    11f6:	80 91 25 03 	lds	r24, 0x0325
    11fa:	0e 94 02 03 	call	0x604	; 0x604 <Sharp_GP2D12_estimation>
    11fe:	90 93 27 03 	sts	0x0327, r25
    1202:	80 93 26 03 	sts	0x0326, r24
			temp = ((value*255.00)/800.00);
    1206:	80 91 26 03 	lds	r24, 0x0326
    120a:	90 91 27 03 	lds	r25, 0x0327
    120e:	cc 01       	movw	r24, r24
    1210:	a0 e0       	ldi	r26, 0x00	; 0
    1212:	b0 e0       	ldi	r27, 0x00	; 0
    1214:	bc 01       	movw	r22, r24
    1216:	cd 01       	movw	r24, r26
    1218:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <__floatunsisf>
    121c:	dc 01       	movw	r26, r24
    121e:	cb 01       	movw	r24, r22
    1220:	bc 01       	movw	r22, r24
    1222:	cd 01       	movw	r24, r26
    1224:	20 e0       	ldi	r18, 0x00	; 0
    1226:	30 e0       	ldi	r19, 0x00	; 0
    1228:	4f e7       	ldi	r20, 0x7F	; 127
    122a:	53 e4       	ldi	r21, 0x43	; 67
    122c:	0e 94 a1 0c 	call	0x1942	; 0x1942 <__mulsf3>
    1230:	dc 01       	movw	r26, r24
    1232:	cb 01       	movw	r24, r22
    1234:	bc 01       	movw	r22, r24
    1236:	cd 01       	movw	r24, r26
    1238:	20 e0       	ldi	r18, 0x00	; 0
    123a:	30 e0       	ldi	r19, 0x00	; 0
    123c:	48 e4       	ldi	r20, 0x48	; 72
    123e:	54 e4       	ldi	r21, 0x44	; 68
    1240:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <__divsf3>
    1244:	dc 01       	movw	r26, r24
    1246:	cb 01       	movw	r24, r22
    1248:	8f 8b       	std	Y+23, r24	; 0x17
    124a:	98 8f       	std	Y+24, r25	; 0x18
    124c:	a9 8f       	std	Y+25, r26	; 0x19
    124e:	ba 8f       	std	Y+26, r27	; 0x1a
			converted = (int)temp;
    1250:	6f 89       	ldd	r22, Y+23	; 0x17
    1252:	78 8d       	ldd	r23, Y+24	; 0x18
    1254:	89 8d       	ldd	r24, Y+25	; 0x19
    1256:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1258:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <__fixsfsi>
    125c:	dc 01       	movw	r26, r24
    125e:	cb 01       	movw	r24, r22
    1260:	9e 8b       	std	Y+22, r25	; 0x16
    1262:	8d 8b       	std	Y+21, r24	; 0x15
			unsigned char templates = (char)converted;
    1264:	8d 89       	ldd	r24, Y+21	; 0x15
    1266:	8c 8b       	std	Y+20, r24	; 0x14
			UDR0 = templates;
    1268:	e6 ec       	ldi	r30, 0xC6	; 198
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	8c 89       	ldd	r24, Y+20	; 0x14
    126e:	80 83       	st	Z, r24
			count = 0;
    1270:	10 92 09 03 	sts	0x0309, r1
    1274:	10 92 08 03 	sts	0x0308, r1
    1278:	68 c1       	rjmp	.+720    	; 0x154a <__vector_25+0x4f2>
			break;
		}
		else if(data[0] == 0x17)
    127a:	80 91 21 03 	lds	r24, 0x0321
    127e:	87 31       	cpi	r24, 0x17	; 23
    1280:	b9 f4       	brne	.+46     	; 0x12b0 <__vector_25+0x258>
		{
			sei();
    1282:	78 94       	sei
			if(data[1] == 1)
    1284:	80 91 22 03 	lds	r24, 0x0322
    1288:	81 30       	cpi	r24, 0x01	; 1
    128a:	29 f4       	brne	.+10     	; 0x1296 <__vector_25+0x23e>
			{
				servo_1(data[2]);
    128c:	80 91 23 03 	lds	r24, 0x0323
    1290:	0e 94 4d 07 	call	0xe9a	; 0xe9a <servo_1>
    1294:	08 c0       	rjmp	.+16     	; 0x12a6 <__vector_25+0x24e>
			}
			else if(data[1] == 2)
    1296:	80 91 22 03 	lds	r24, 0x0322
    129a:	82 30       	cpi	r24, 0x02	; 2
    129c:	21 f4       	brne	.+8      	; 0x12a6 <__vector_25+0x24e>
			{
				servo_2(data[2]);
    129e:	80 91 23 03 	lds	r24, 0x0323
    12a2:	0e 94 9e 07 	call	0xf3c	; 0xf3c <servo_2>
			}
			count = 0;
    12a6:	10 92 09 03 	sts	0x0309, r1
    12aa:	10 92 08 03 	sts	0x0308, r1
    12ae:	4d c1       	rjmp	.+666    	; 0x154a <__vector_25+0x4f2>
			break;
		}
		else if(data[0] == 0x18)
    12b0:	80 91 21 03 	lds	r24, 0x0321
    12b4:	88 31       	cpi	r24, 0x18	; 24
    12b6:	69 f4       	brne	.+26     	; 0x12d2 <__vector_25+0x27a>
		{
			sei();
    12b8:	78 94       	sei
			velocity(data[1],data[2]);
    12ba:	80 91 22 03 	lds	r24, 0x0322
    12be:	90 91 23 03 	lds	r25, 0x0323
    12c2:	69 2f       	mov	r22, r25
    12c4:	0e 94 63 04 	call	0x8c6	; 0x8c6 <velocity>
			count = 0;
    12c8:	10 92 09 03 	sts	0x0309, r1
    12cc:	10 92 08 03 	sts	0x0308, r1
    12d0:	3c c1       	rjmp	.+632    	; 0x154a <__vector_25+0x4f2>
			break;
		}
		else if(data[0] == 0x19)
    12d2:	80 91 21 03 	lds	r24, 0x0321
    12d6:	89 31       	cpi	r24, 0x19	; 25
    12d8:	91 f4       	brne	.+36     	; 0x12fe <__vector_25+0x2a6>
		{
			sei();
    12da:	78 94       	sei
			if(data[1] == 1)
    12dc:	80 91 22 03 	lds	r24, 0x0322
    12e0:	81 30       	cpi	r24, 0x01	; 1
    12e2:	11 f4       	brne	.+4      	; 0x12e8 <__vector_25+0x290>
			{
				buzzer_on();
    12e4:	0e 94 7e 05 	call	0xafc	; 0xafc <buzzer_on>
			}
			if(data[1] == 0)
    12e8:	80 91 22 03 	lds	r24, 0x0322
    12ec:	88 23       	and	r24, r24
    12ee:	11 f4       	brne	.+4      	; 0x12f4 <__vector_25+0x29c>
			{
				buzzer_off();
    12f0:	0e 94 96 05 	call	0xb2c	; 0xb2c <buzzer_off>
			}
			count = 0;
    12f4:	10 92 09 03 	sts	0x0309, r1
    12f8:	10 92 08 03 	sts	0x0308, r1
    12fc:	26 c1       	rjmp	.+588    	; 0x154a <__vector_25+0x4f2>
			break;
		}
		else if(data[0] == 0x1A)
    12fe:	80 91 21 03 	lds	r24, 0x0321
    1302:	8a 31       	cpi	r24, 0x1A	; 26
    1304:	71 f4       	brne	.+28     	; 0x1322 <__vector_25+0x2ca>
		{
			unsigned int temp;
			sei();
    1306:	78 94       	sei
			temp = spi_master_tx_and_rx(data[1]);
    1308:	80 91 22 03 	lds	r24, 0x0322
    130c:	0e 94 52 02 	call	0x4a4	; 0x4a4 <spi_master_tx_and_rx>
    1310:	88 2f       	mov	r24, r24
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	9b 8b       	std	Y+19, r25	; 0x13
    1316:	8a 8b       	std	Y+18, r24	; 0x12
			count = 0;
    1318:	10 92 09 03 	sts	0x0309, r1
    131c:	10 92 08 03 	sts	0x0308, r1
    1320:	14 c1       	rjmp	.+552    	; 0x154a <__vector_25+0x4f2>
			break;
		}
		else if(data[0] == 0x1B)
    1322:	80 91 21 03 	lds	r24, 0x0321
    1326:	8b 31       	cpi	r24, 0x1B	; 27
    1328:	91 f4       	brne	.+36     	; 0x134e <__vector_25+0x2f6>
		{
			sei();
    132a:	78 94       	sei
			unsigned int x = (int)data[1];
    132c:	80 91 22 03 	lds	r24, 0x0322
    1330:	88 2f       	mov	r24, r24
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	99 8b       	std	Y+17, r25	; 0x11
    1336:	88 8b       	std	Y+16, r24	; 0x10
			soft_right_degrees(x*2);
    1338:	88 89       	ldd	r24, Y+16	; 0x10
    133a:	99 89       	ldd	r25, Y+17	; 0x11
    133c:	88 0f       	add	r24, r24
    133e:	99 1f       	adc	r25, r25
    1340:	0e 94 02 07 	call	0xe04	; 0xe04 <soft_right_degrees>
			count = 0;
    1344:	10 92 09 03 	sts	0x0309, r1
    1348:	10 92 08 03 	sts	0x0308, r1
    134c:	fe c0       	rjmp	.+508    	; 0x154a <__vector_25+0x4f2>
			break;	
		}
		else if(data[0] == 0x1C)
    134e:	80 91 21 03 	lds	r24, 0x0321
    1352:	8c 31       	cpi	r24, 0x1C	; 28
    1354:	91 f4       	brne	.+36     	; 0x137a <__vector_25+0x322>
		{
			sei();
    1356:	78 94       	sei
			unsigned int x = (int)data[1];
    1358:	80 91 22 03 	lds	r24, 0x0322
    135c:	88 2f       	mov	r24, r24
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	9f 87       	std	Y+15, r25	; 0x0f
    1362:	8e 87       	std	Y+14, r24	; 0x0e
			soft_left_degrees(x*2);
    1364:	8e 85       	ldd	r24, Y+14	; 0x0e
    1366:	9f 85       	ldd	r25, Y+15	; 0x0f
    1368:	88 0f       	add	r24, r24
    136a:	99 1f       	adc	r25, r25
    136c:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <soft_left_degrees>
			count = 0;
    1370:	10 92 09 03 	sts	0x0309, r1
    1374:	10 92 08 03 	sts	0x0308, r1
    1378:	e8 c0       	rjmp	.+464    	; 0x154a <__vector_25+0x4f2>
			break;	
		}
		else if(data[0] == 0x1D)
    137a:	80 91 21 03 	lds	r24, 0x0321
    137e:	8d 31       	cpi	r24, 0x1D	; 29
    1380:	91 f4       	brne	.+36     	; 0x13a6 <__vector_25+0x34e>
		{
			sei();
    1382:	78 94       	sei
			unsigned int x = (int)data[1];
    1384:	80 91 22 03 	lds	r24, 0x0322
    1388:	88 2f       	mov	r24, r24
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	9d 87       	std	Y+13, r25	; 0x0d
    138e:	8c 87       	std	Y+12, r24	; 0x0c
			soft_right_2_degrees(x*2);
    1390:	8c 85       	ldd	r24, Y+12	; 0x0c
    1392:	9d 85       	ldd	r25, Y+13	; 0x0d
    1394:	88 0f       	add	r24, r24
    1396:	99 1f       	adc	r25, r25
    1398:	0e 94 34 07 	call	0xe68	; 0xe68 <soft_right_2_degrees>
			count = 0;
    139c:	10 92 09 03 	sts	0x0309, r1
    13a0:	10 92 08 03 	sts	0x0308, r1
    13a4:	d2 c0       	rjmp	.+420    	; 0x154a <__vector_25+0x4f2>
			break;	
		}
		else if(data[0] == 0x1E)
    13a6:	80 91 21 03 	lds	r24, 0x0321
    13aa:	8e 31       	cpi	r24, 0x1E	; 30
    13ac:	91 f4       	brne	.+36     	; 0x13d2 <__vector_25+0x37a>
		{
			sei();
    13ae:	78 94       	sei
			unsigned int x = (int)data[1];
    13b0:	80 91 22 03 	lds	r24, 0x0322
    13b4:	88 2f       	mov	r24, r24
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	9b 87       	std	Y+11, r25	; 0x0b
    13ba:	8a 87       	std	Y+10, r24	; 0x0a
			soft_left_2_degrees(x*2);
    13bc:	8a 85       	ldd	r24, Y+10	; 0x0a
    13be:	9b 85       	ldd	r25, Y+11	; 0x0b
    13c0:	88 0f       	add	r24, r24
    13c2:	99 1f       	adc	r25, r25
    13c4:	0e 94 1b 07 	call	0xe36	; 0xe36 <soft_left_2_degrees>
			count = 0;
    13c8:	10 92 09 03 	sts	0x0309, r1
    13cc:	10 92 08 03 	sts	0x0308, r1
    13d0:	bc c0       	rjmp	.+376    	; 0x154a <__vector_25+0x4f2>
			break;	
		}
		else if(data[0] == 0X1F)
    13d2:	80 91 21 03 	lds	r24, 0x0321
    13d6:	8f 31       	cpi	r24, 0x1F	; 31
    13d8:	51 f4       	brne	.+20     	; 0x13ee <__vector_25+0x396>
		{
			sei();
    13da:	78 94       	sei
			turn_off_all_proxy_sensors();
    13dc:	0e 94 66 05 	call	0xacc	; 0xacc <turn_off_all_proxy_sensors>
			turn_off_ir_proxi_sensors();
    13e0:	0e 94 3d 05 	call	0xa7a	; 0xa7a <turn_off_ir_proxi_sensors>
			count = 0;
    13e4:	10 92 09 03 	sts	0x0309, r1
    13e8:	10 92 08 03 	sts	0x0308, r1
    13ec:	ae c0       	rjmp	.+348    	; 0x154a <__vector_25+0x4f2>
			break;
		}
		else if(data[0] == 0X20)
    13ee:	80 91 21 03 	lds	r24, 0x0321
    13f2:	80 32       	cpi	r24, 0x20	; 32
    13f4:	51 f4       	brne	.+20     	; 0x140a <__vector_25+0x3b2>
		{
			sei();
    13f6:	78 94       	sei
			turn_on_all_proxy_sensors();
    13f8:	0e 94 4e 05 	call	0xa9c	; 0xa9c <turn_on_all_proxy_sensors>
			turn_on_ir_proxi_sensors();
    13fc:	0e 94 2c 05 	call	0xa58	; 0xa58 <turn_on_ir_proxi_sensors>
			count = 0;
    1400:	10 92 09 03 	sts	0x0309, r1
    1404:	10 92 08 03 	sts	0x0308, r1
    1408:	a0 c0       	rjmp	.+320    	; 0x154a <__vector_25+0x4f2>
			break;
		}
		else if(data[0] == 0x21)
    140a:	80 91 21 03 	lds	r24, 0x0321
    140e:	81 32       	cpi	r24, 0x21	; 33
    1410:	09 f0       	breq	.+2      	; 0x1414 <__vector_25+0x3bc>
    1412:	93 c0       	rjmp	.+294    	; 0x153a <__vector_25+0x4e2>
		{ 
			sei();
    1414:	78 94       	sei
			float temp;
			unsigned int converted;
			unsigned int Batt;
			BATT_V = ADC_Conversion(0);
    1416:	80 e0       	ldi	r24, 0x00	; 0
    1418:	0e 94 0c 02 	call	0x418	; 0x418 <ADC_Conversion>
    141c:	88 2f       	mov	r24, r24
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	a0 e0       	ldi	r26, 0x00	; 0
    1422:	b0 e0       	ldi	r27, 0x00	; 0
    1424:	bc 01       	movw	r22, r24
    1426:	cd 01       	movw	r24, r26
    1428:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <__floatunsisf>
    142c:	dc 01       	movw	r26, r24
    142e:	cb 01       	movw	r24, r22
    1430:	80 93 17 03 	sts	0x0317, r24
    1434:	90 93 18 03 	sts	0x0318, r25
    1438:	a0 93 19 03 	sts	0x0319, r26
    143c:	b0 93 1a 03 	sts	0x031A, r27
			BATT_Voltage = ((ADC_Conversion(0)*100)*0.07902) + 0.7;	//Prints Battery Voltage Status
    1440:	80 e0       	ldi	r24, 0x00	; 0
    1442:	0e 94 0c 02 	call	0x418	; 0x418 <ADC_Conversion>
    1446:	28 2f       	mov	r18, r24
    1448:	30 e0       	ldi	r19, 0x00	; 0
    144a:	84 e6       	ldi	r24, 0x64	; 100
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	ac 01       	movw	r20, r24
    1450:	24 9f       	mul	r18, r20
    1452:	c0 01       	movw	r24, r0
    1454:	25 9f       	mul	r18, r21
    1456:	90 0d       	add	r25, r0
    1458:	34 9f       	mul	r19, r20
    145a:	90 0d       	add	r25, r0
    145c:	11 24       	eor	r1, r1
    145e:	aa 27       	eor	r26, r26
    1460:	97 fd       	sbrc	r25, 7
    1462:	a0 95       	com	r26
    1464:	ba 2f       	mov	r27, r26
    1466:	bc 01       	movw	r22, r24
    1468:	cd 01       	movw	r24, r26
    146a:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <__floatsisf>
    146e:	dc 01       	movw	r26, r24
    1470:	cb 01       	movw	r24, r22
    1472:	bc 01       	movw	r22, r24
    1474:	cd 01       	movw	r24, r26
    1476:	2d e3       	ldi	r18, 0x3D	; 61
    1478:	35 ed       	ldi	r19, 0xD5	; 213
    147a:	41 ea       	ldi	r20, 0xA1	; 161
    147c:	5d e3       	ldi	r21, 0x3D	; 61
    147e:	0e 94 a1 0c 	call	0x1942	; 0x1942 <__mulsf3>
    1482:	dc 01       	movw	r26, r24
    1484:	cb 01       	movw	r24, r22
    1486:	bc 01       	movw	r22, r24
    1488:	cd 01       	movw	r24, r26
    148a:	23 e3       	ldi	r18, 0x33	; 51
    148c:	33 e3       	ldi	r19, 0x33	; 51
    148e:	43 e3       	ldi	r20, 0x33	; 51
    1490:	5f e3       	ldi	r21, 0x3F	; 63
    1492:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <__addsf3>
    1496:	dc 01       	movw	r26, r24
    1498:	cb 01       	movw	r24, r22
    149a:	80 93 1d 03 	sts	0x031D, r24
    149e:	90 93 1e 03 	sts	0x031E, r25
    14a2:	a0 93 1f 03 	sts	0x031F, r26
    14a6:	b0 93 20 03 	sts	0x0320, r27
			Batt = (int)BATT_Voltage;
    14aa:	80 91 1d 03 	lds	r24, 0x031D
    14ae:	90 91 1e 03 	lds	r25, 0x031E
    14b2:	a0 91 1f 03 	lds	r26, 0x031F
    14b6:	b0 91 20 03 	lds	r27, 0x0320
    14ba:	bc 01       	movw	r22, r24
    14bc:	cd 01       	movw	r24, r26
    14be:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <__fixsfsi>
    14c2:	dc 01       	movw	r26, r24
    14c4:	cb 01       	movw	r24, r22
    14c6:	9b 83       	std	Y+3, r25	; 0x03
    14c8:	8a 83       	std	Y+2, r24	; 0x02
			temp = ((Batt*255.00)/1040.00);
    14ca:	8a 81       	ldd	r24, Y+2	; 0x02
    14cc:	9b 81       	ldd	r25, Y+3	; 0x03
    14ce:	cc 01       	movw	r24, r24
    14d0:	a0 e0       	ldi	r26, 0x00	; 0
    14d2:	b0 e0       	ldi	r27, 0x00	; 0
    14d4:	bc 01       	movw	r22, r24
    14d6:	cd 01       	movw	r24, r26
    14d8:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <__floatunsisf>
    14dc:	dc 01       	movw	r26, r24
    14de:	cb 01       	movw	r24, r22
    14e0:	bc 01       	movw	r22, r24
    14e2:	cd 01       	movw	r24, r26
    14e4:	20 e0       	ldi	r18, 0x00	; 0
    14e6:	30 e0       	ldi	r19, 0x00	; 0
    14e8:	4f e7       	ldi	r20, 0x7F	; 127
    14ea:	53 e4       	ldi	r21, 0x43	; 67
    14ec:	0e 94 a1 0c 	call	0x1942	; 0x1942 <__mulsf3>
    14f0:	dc 01       	movw	r26, r24
    14f2:	cb 01       	movw	r24, r22
    14f4:	bc 01       	movw	r22, r24
    14f6:	cd 01       	movw	r24, r26
    14f8:	20 e0       	ldi	r18, 0x00	; 0
    14fa:	30 e0       	ldi	r19, 0x00	; 0
    14fc:	42 e8       	ldi	r20, 0x82	; 130
    14fe:	54 e4       	ldi	r21, 0x44	; 68
    1500:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <__divsf3>
    1504:	dc 01       	movw	r26, r24
    1506:	cb 01       	movw	r24, r22
    1508:	8e 83       	std	Y+6, r24	; 0x06
    150a:	9f 83       	std	Y+7, r25	; 0x07
    150c:	a8 87       	std	Y+8, r26	; 0x08
    150e:	b9 87       	std	Y+9, r27	; 0x09
			converted = (int)temp;
    1510:	6e 81       	ldd	r22, Y+6	; 0x06
    1512:	7f 81       	ldd	r23, Y+7	; 0x07
    1514:	88 85       	ldd	r24, Y+8	; 0x08
    1516:	99 85       	ldd	r25, Y+9	; 0x09
    1518:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <__fixsfsi>
    151c:	dc 01       	movw	r26, r24
    151e:	cb 01       	movw	r24, r22
    1520:	9d 83       	std	Y+5, r25	; 0x05
    1522:	8c 83       	std	Y+4, r24	; 0x04
			unsigned char templates = (char)converted;
    1524:	8c 81       	ldd	r24, Y+4	; 0x04
    1526:	89 83       	std	Y+1, r24	; 0x01
			UDR0 = templates;
    1528:	e6 ec       	ldi	r30, 0xC6	; 198
    152a:	f0 e0       	ldi	r31, 0x00	; 0
    152c:	89 81       	ldd	r24, Y+1	; 0x01
    152e:	80 83       	st	Z, r24
			count = 0;
    1530:	10 92 09 03 	sts	0x0309, r1
    1534:	10 92 08 03 	sts	0x0308, r1
    1538:	08 c0       	rjmp	.+16     	; 0x154a <__vector_25+0x4f2>
ISR(USART0_RX_vect) 		// ISR for receive complete interrupt
{
	data[count] = UDR0;	
	count = count + 1;

	while(count == 4)
    153a:	80 91 08 03 	lds	r24, 0x0308
    153e:	90 91 09 03 	lds	r25, 0x0309
    1542:	84 30       	cpi	r24, 0x04	; 4
    1544:	91 05       	cpc	r25, r1
    1546:	09 f4       	brne	.+2      	; 0x154a <__vector_25+0x4f2>
    1548:	b7 cd       	rjmp	.-1170   	; 0x10b8 <__vector_25+0x60>
			count = 0;
			break;
		}
		
	}
}
    154a:	a4 96       	adiw	r28, 0x24	; 36
    154c:	de bf       	out	0x3e, r29	; 62
    154e:	cd bf       	out	0x3d, r28	; 61
    1550:	cf 91       	pop	r28
    1552:	df 91       	pop	r29
    1554:	ff 91       	pop	r31
    1556:	ef 91       	pop	r30
    1558:	bf 91       	pop	r27
    155a:	af 91       	pop	r26
    155c:	9f 91       	pop	r25
    155e:	8f 91       	pop	r24
    1560:	7f 91       	pop	r23
    1562:	6f 91       	pop	r22
    1564:	5f 91       	pop	r21
    1566:	4f 91       	pop	r20
    1568:	3f 91       	pop	r19
    156a:	2f 91       	pop	r18
    156c:	0f 90       	pop	r0
    156e:	00 92 5b 00 	sts	0x005B, r0
    1572:	0f 90       	pop	r0
    1574:	0f be       	out	0x3f, r0	; 63
    1576:	0f 90       	pop	r0
    1578:	1f 90       	pop	r1
    157a:	18 95       	reti

0000157c <main>:


//Main Function

int main(void)
{
    157c:	df 93       	push	r29
    157e:	cf 93       	push	r28
    1580:	cd b7       	in	r28, 0x3d	; 61
    1582:	de b7       	in	r29, 0x3e	; 62
	init_devices();
    1584:	0e 94 13 08 	call	0x1026	; 0x1026 <init_devices>
	servo_1(90);
    1588:	8a e5       	ldi	r24, 0x5A	; 90
    158a:	0e 94 4d 07 	call	0xe9a	; 0xe9a <servo_1>
	servo_2(70);
    158e:	86 e4       	ldi	r24, 0x46	; 70
    1590:	0e 94 9e 07 	call	0xf3c	; 0xf3c <servo_2>
    1594:	ff cf       	rjmp	.-2      	; 0x1594 <main+0x18>

00001596 <__fixunssfsi>:
    1596:	ef 92       	push	r14
    1598:	ff 92       	push	r15
    159a:	0f 93       	push	r16
    159c:	1f 93       	push	r17
    159e:	7b 01       	movw	r14, r22
    15a0:	8c 01       	movw	r16, r24
    15a2:	20 e0       	ldi	r18, 0x00	; 0
    15a4:	30 e0       	ldi	r19, 0x00	; 0
    15a6:	40 e0       	ldi	r20, 0x00	; 0
    15a8:	5f e4       	ldi	r21, 0x4F	; 79
    15aa:	0e 94 77 0e 	call	0x1cee	; 0x1cee <__gesf2>
    15ae:	88 23       	and	r24, r24
    15b0:	8c f0       	brlt	.+34     	; 0x15d4 <__fixunssfsi+0x3e>
    15b2:	c8 01       	movw	r24, r16
    15b4:	b7 01       	movw	r22, r14
    15b6:	20 e0       	ldi	r18, 0x00	; 0
    15b8:	30 e0       	ldi	r19, 0x00	; 0
    15ba:	40 e0       	ldi	r20, 0x00	; 0
    15bc:	5f e4       	ldi	r21, 0x4F	; 79
    15be:	0e 94 43 0c 	call	0x1886	; 0x1886 <__subsf3>
    15c2:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <__fixsfsi>
    15c6:	9b 01       	movw	r18, r22
    15c8:	ac 01       	movw	r20, r24
    15ca:	20 50       	subi	r18, 0x00	; 0
    15cc:	30 40       	sbci	r19, 0x00	; 0
    15ce:	40 40       	sbci	r20, 0x00	; 0
    15d0:	50 48       	sbci	r21, 0x80	; 128
    15d2:	06 c0       	rjmp	.+12     	; 0x15e0 <__fixunssfsi+0x4a>
    15d4:	c8 01       	movw	r24, r16
    15d6:	b7 01       	movw	r22, r14
    15d8:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <__fixsfsi>
    15dc:	9b 01       	movw	r18, r22
    15de:	ac 01       	movw	r20, r24
    15e0:	b9 01       	movw	r22, r18
    15e2:	ca 01       	movw	r24, r20
    15e4:	1f 91       	pop	r17
    15e6:	0f 91       	pop	r16
    15e8:	ff 90       	pop	r15
    15ea:	ef 90       	pop	r14
    15ec:	08 95       	ret

000015ee <_fpadd_parts>:
    15ee:	a0 e0       	ldi	r26, 0x00	; 0
    15f0:	b0 e0       	ldi	r27, 0x00	; 0
    15f2:	ed ef       	ldi	r30, 0xFD	; 253
    15f4:	fa e0       	ldi	r31, 0x0A	; 10
    15f6:	0c 94 f7 11 	jmp	0x23ee	; 0x23ee <__prologue_saves__>
    15fa:	dc 01       	movw	r26, r24
    15fc:	2b 01       	movw	r4, r22
    15fe:	fa 01       	movw	r30, r20
    1600:	9c 91       	ld	r25, X
    1602:	92 30       	cpi	r25, 0x02	; 2
    1604:	08 f4       	brcc	.+2      	; 0x1608 <_fpadd_parts+0x1a>
    1606:	39 c1       	rjmp	.+626    	; 0x187a <_fpadd_parts+0x28c>
    1608:	eb 01       	movw	r28, r22
    160a:	88 81       	ld	r24, Y
    160c:	82 30       	cpi	r24, 0x02	; 2
    160e:	08 f4       	brcc	.+2      	; 0x1612 <_fpadd_parts+0x24>
    1610:	33 c1       	rjmp	.+614    	; 0x1878 <_fpadd_parts+0x28a>
    1612:	94 30       	cpi	r25, 0x04	; 4
    1614:	69 f4       	brne	.+26     	; 0x1630 <_fpadd_parts+0x42>
    1616:	84 30       	cpi	r24, 0x04	; 4
    1618:	09 f0       	breq	.+2      	; 0x161c <_fpadd_parts+0x2e>
    161a:	2f c1       	rjmp	.+606    	; 0x187a <_fpadd_parts+0x28c>
    161c:	11 96       	adiw	r26, 0x01	; 1
    161e:	9c 91       	ld	r25, X
    1620:	11 97       	sbiw	r26, 0x01	; 1
    1622:	89 81       	ldd	r24, Y+1	; 0x01
    1624:	98 17       	cp	r25, r24
    1626:	09 f4       	brne	.+2      	; 0x162a <_fpadd_parts+0x3c>
    1628:	28 c1       	rjmp	.+592    	; 0x187a <_fpadd_parts+0x28c>
    162a:	a0 e0       	ldi	r26, 0x00	; 0
    162c:	b2 e0       	ldi	r27, 0x02	; 2
    162e:	25 c1       	rjmp	.+586    	; 0x187a <_fpadd_parts+0x28c>
    1630:	84 30       	cpi	r24, 0x04	; 4
    1632:	09 f4       	brne	.+2      	; 0x1636 <_fpadd_parts+0x48>
    1634:	21 c1       	rjmp	.+578    	; 0x1878 <_fpadd_parts+0x28a>
    1636:	82 30       	cpi	r24, 0x02	; 2
    1638:	a9 f4       	brne	.+42     	; 0x1664 <_fpadd_parts+0x76>
    163a:	92 30       	cpi	r25, 0x02	; 2
    163c:	09 f0       	breq	.+2      	; 0x1640 <_fpadd_parts+0x52>
    163e:	1d c1       	rjmp	.+570    	; 0x187a <_fpadd_parts+0x28c>
    1640:	9a 01       	movw	r18, r20
    1642:	ad 01       	movw	r20, r26
    1644:	88 e0       	ldi	r24, 0x08	; 8
    1646:	ea 01       	movw	r28, r20
    1648:	09 90       	ld	r0, Y+
    164a:	ae 01       	movw	r20, r28
    164c:	e9 01       	movw	r28, r18
    164e:	09 92       	st	Y+, r0
    1650:	9e 01       	movw	r18, r28
    1652:	81 50       	subi	r24, 0x01	; 1
    1654:	c1 f7       	brne	.-16     	; 0x1646 <_fpadd_parts+0x58>
    1656:	e2 01       	movw	r28, r4
    1658:	89 81       	ldd	r24, Y+1	; 0x01
    165a:	11 96       	adiw	r26, 0x01	; 1
    165c:	9c 91       	ld	r25, X
    165e:	89 23       	and	r24, r25
    1660:	81 83       	std	Z+1, r24	; 0x01
    1662:	08 c1       	rjmp	.+528    	; 0x1874 <_fpadd_parts+0x286>
    1664:	92 30       	cpi	r25, 0x02	; 2
    1666:	09 f4       	brne	.+2      	; 0x166a <_fpadd_parts+0x7c>
    1668:	07 c1       	rjmp	.+526    	; 0x1878 <_fpadd_parts+0x28a>
    166a:	12 96       	adiw	r26, 0x02	; 2
    166c:	2d 90       	ld	r2, X+
    166e:	3c 90       	ld	r3, X
    1670:	13 97       	sbiw	r26, 0x03	; 3
    1672:	eb 01       	movw	r28, r22
    1674:	8a 81       	ldd	r24, Y+2	; 0x02
    1676:	9b 81       	ldd	r25, Y+3	; 0x03
    1678:	14 96       	adiw	r26, 0x04	; 4
    167a:	ad 90       	ld	r10, X+
    167c:	bd 90       	ld	r11, X+
    167e:	cd 90       	ld	r12, X+
    1680:	dc 90       	ld	r13, X
    1682:	17 97       	sbiw	r26, 0x07	; 7
    1684:	ec 80       	ldd	r14, Y+4	; 0x04
    1686:	fd 80       	ldd	r15, Y+5	; 0x05
    1688:	0e 81       	ldd	r16, Y+6	; 0x06
    168a:	1f 81       	ldd	r17, Y+7	; 0x07
    168c:	91 01       	movw	r18, r2
    168e:	28 1b       	sub	r18, r24
    1690:	39 0b       	sbc	r19, r25
    1692:	b9 01       	movw	r22, r18
    1694:	37 ff       	sbrs	r19, 7
    1696:	04 c0       	rjmp	.+8      	; 0x16a0 <_fpadd_parts+0xb2>
    1698:	66 27       	eor	r22, r22
    169a:	77 27       	eor	r23, r23
    169c:	62 1b       	sub	r22, r18
    169e:	73 0b       	sbc	r23, r19
    16a0:	60 32       	cpi	r22, 0x20	; 32
    16a2:	71 05       	cpc	r23, r1
    16a4:	0c f0       	brlt	.+2      	; 0x16a8 <_fpadd_parts+0xba>
    16a6:	61 c0       	rjmp	.+194    	; 0x176a <_fpadd_parts+0x17c>
    16a8:	12 16       	cp	r1, r18
    16aa:	13 06       	cpc	r1, r19
    16ac:	6c f5       	brge	.+90     	; 0x1708 <_fpadd_parts+0x11a>
    16ae:	37 01       	movw	r6, r14
    16b0:	48 01       	movw	r8, r16
    16b2:	06 2e       	mov	r0, r22
    16b4:	04 c0       	rjmp	.+8      	; 0x16be <_fpadd_parts+0xd0>
    16b6:	96 94       	lsr	r9
    16b8:	87 94       	ror	r8
    16ba:	77 94       	ror	r7
    16bc:	67 94       	ror	r6
    16be:	0a 94       	dec	r0
    16c0:	d2 f7       	brpl	.-12     	; 0x16b6 <_fpadd_parts+0xc8>
    16c2:	21 e0       	ldi	r18, 0x01	; 1
    16c4:	30 e0       	ldi	r19, 0x00	; 0
    16c6:	40 e0       	ldi	r20, 0x00	; 0
    16c8:	50 e0       	ldi	r21, 0x00	; 0
    16ca:	04 c0       	rjmp	.+8      	; 0x16d4 <_fpadd_parts+0xe6>
    16cc:	22 0f       	add	r18, r18
    16ce:	33 1f       	adc	r19, r19
    16d0:	44 1f       	adc	r20, r20
    16d2:	55 1f       	adc	r21, r21
    16d4:	6a 95       	dec	r22
    16d6:	d2 f7       	brpl	.-12     	; 0x16cc <_fpadd_parts+0xde>
    16d8:	21 50       	subi	r18, 0x01	; 1
    16da:	30 40       	sbci	r19, 0x00	; 0
    16dc:	40 40       	sbci	r20, 0x00	; 0
    16de:	50 40       	sbci	r21, 0x00	; 0
    16e0:	2e 21       	and	r18, r14
    16e2:	3f 21       	and	r19, r15
    16e4:	40 23       	and	r20, r16
    16e6:	51 23       	and	r21, r17
    16e8:	21 15       	cp	r18, r1
    16ea:	31 05       	cpc	r19, r1
    16ec:	41 05       	cpc	r20, r1
    16ee:	51 05       	cpc	r21, r1
    16f0:	21 f0       	breq	.+8      	; 0x16fa <_fpadd_parts+0x10c>
    16f2:	21 e0       	ldi	r18, 0x01	; 1
    16f4:	30 e0       	ldi	r19, 0x00	; 0
    16f6:	40 e0       	ldi	r20, 0x00	; 0
    16f8:	50 e0       	ldi	r21, 0x00	; 0
    16fa:	79 01       	movw	r14, r18
    16fc:	8a 01       	movw	r16, r20
    16fe:	e6 28       	or	r14, r6
    1700:	f7 28       	or	r15, r7
    1702:	08 29       	or	r16, r8
    1704:	19 29       	or	r17, r9
    1706:	3c c0       	rjmp	.+120    	; 0x1780 <_fpadd_parts+0x192>
    1708:	23 2b       	or	r18, r19
    170a:	d1 f1       	breq	.+116    	; 0x1780 <_fpadd_parts+0x192>
    170c:	26 0e       	add	r2, r22
    170e:	37 1e       	adc	r3, r23
    1710:	35 01       	movw	r6, r10
    1712:	46 01       	movw	r8, r12
    1714:	06 2e       	mov	r0, r22
    1716:	04 c0       	rjmp	.+8      	; 0x1720 <_fpadd_parts+0x132>
    1718:	96 94       	lsr	r9
    171a:	87 94       	ror	r8
    171c:	77 94       	ror	r7
    171e:	67 94       	ror	r6
    1720:	0a 94       	dec	r0
    1722:	d2 f7       	brpl	.-12     	; 0x1718 <_fpadd_parts+0x12a>
    1724:	21 e0       	ldi	r18, 0x01	; 1
    1726:	30 e0       	ldi	r19, 0x00	; 0
    1728:	40 e0       	ldi	r20, 0x00	; 0
    172a:	50 e0       	ldi	r21, 0x00	; 0
    172c:	04 c0       	rjmp	.+8      	; 0x1736 <_fpadd_parts+0x148>
    172e:	22 0f       	add	r18, r18
    1730:	33 1f       	adc	r19, r19
    1732:	44 1f       	adc	r20, r20
    1734:	55 1f       	adc	r21, r21
    1736:	6a 95       	dec	r22
    1738:	d2 f7       	brpl	.-12     	; 0x172e <_fpadd_parts+0x140>
    173a:	21 50       	subi	r18, 0x01	; 1
    173c:	30 40       	sbci	r19, 0x00	; 0
    173e:	40 40       	sbci	r20, 0x00	; 0
    1740:	50 40       	sbci	r21, 0x00	; 0
    1742:	2a 21       	and	r18, r10
    1744:	3b 21       	and	r19, r11
    1746:	4c 21       	and	r20, r12
    1748:	5d 21       	and	r21, r13
    174a:	21 15       	cp	r18, r1
    174c:	31 05       	cpc	r19, r1
    174e:	41 05       	cpc	r20, r1
    1750:	51 05       	cpc	r21, r1
    1752:	21 f0       	breq	.+8      	; 0x175c <_fpadd_parts+0x16e>
    1754:	21 e0       	ldi	r18, 0x01	; 1
    1756:	30 e0       	ldi	r19, 0x00	; 0
    1758:	40 e0       	ldi	r20, 0x00	; 0
    175a:	50 e0       	ldi	r21, 0x00	; 0
    175c:	59 01       	movw	r10, r18
    175e:	6a 01       	movw	r12, r20
    1760:	a6 28       	or	r10, r6
    1762:	b7 28       	or	r11, r7
    1764:	c8 28       	or	r12, r8
    1766:	d9 28       	or	r13, r9
    1768:	0b c0       	rjmp	.+22     	; 0x1780 <_fpadd_parts+0x192>
    176a:	82 15       	cp	r24, r2
    176c:	93 05       	cpc	r25, r3
    176e:	2c f0       	brlt	.+10     	; 0x177a <_fpadd_parts+0x18c>
    1770:	1c 01       	movw	r2, r24
    1772:	aa 24       	eor	r10, r10
    1774:	bb 24       	eor	r11, r11
    1776:	65 01       	movw	r12, r10
    1778:	03 c0       	rjmp	.+6      	; 0x1780 <_fpadd_parts+0x192>
    177a:	ee 24       	eor	r14, r14
    177c:	ff 24       	eor	r15, r15
    177e:	87 01       	movw	r16, r14
    1780:	11 96       	adiw	r26, 0x01	; 1
    1782:	9c 91       	ld	r25, X
    1784:	d2 01       	movw	r26, r4
    1786:	11 96       	adiw	r26, 0x01	; 1
    1788:	8c 91       	ld	r24, X
    178a:	98 17       	cp	r25, r24
    178c:	09 f4       	brne	.+2      	; 0x1790 <_fpadd_parts+0x1a2>
    178e:	45 c0       	rjmp	.+138    	; 0x181a <_fpadd_parts+0x22c>
    1790:	99 23       	and	r25, r25
    1792:	39 f0       	breq	.+14     	; 0x17a2 <_fpadd_parts+0x1b4>
    1794:	a8 01       	movw	r20, r16
    1796:	97 01       	movw	r18, r14
    1798:	2a 19       	sub	r18, r10
    179a:	3b 09       	sbc	r19, r11
    179c:	4c 09       	sbc	r20, r12
    179e:	5d 09       	sbc	r21, r13
    17a0:	06 c0       	rjmp	.+12     	; 0x17ae <_fpadd_parts+0x1c0>
    17a2:	a6 01       	movw	r20, r12
    17a4:	95 01       	movw	r18, r10
    17a6:	2e 19       	sub	r18, r14
    17a8:	3f 09       	sbc	r19, r15
    17aa:	40 0b       	sbc	r20, r16
    17ac:	51 0b       	sbc	r21, r17
    17ae:	57 fd       	sbrc	r21, 7
    17b0:	08 c0       	rjmp	.+16     	; 0x17c2 <_fpadd_parts+0x1d4>
    17b2:	11 82       	std	Z+1, r1	; 0x01
    17b4:	33 82       	std	Z+3, r3	; 0x03
    17b6:	22 82       	std	Z+2, r2	; 0x02
    17b8:	24 83       	std	Z+4, r18	; 0x04
    17ba:	35 83       	std	Z+5, r19	; 0x05
    17bc:	46 83       	std	Z+6, r20	; 0x06
    17be:	57 83       	std	Z+7, r21	; 0x07
    17c0:	1d c0       	rjmp	.+58     	; 0x17fc <_fpadd_parts+0x20e>
    17c2:	81 e0       	ldi	r24, 0x01	; 1
    17c4:	81 83       	std	Z+1, r24	; 0x01
    17c6:	33 82       	std	Z+3, r3	; 0x03
    17c8:	22 82       	std	Z+2, r2	; 0x02
    17ca:	88 27       	eor	r24, r24
    17cc:	99 27       	eor	r25, r25
    17ce:	dc 01       	movw	r26, r24
    17d0:	82 1b       	sub	r24, r18
    17d2:	93 0b       	sbc	r25, r19
    17d4:	a4 0b       	sbc	r26, r20
    17d6:	b5 0b       	sbc	r27, r21
    17d8:	84 83       	std	Z+4, r24	; 0x04
    17da:	95 83       	std	Z+5, r25	; 0x05
    17dc:	a6 83       	std	Z+6, r26	; 0x06
    17de:	b7 83       	std	Z+7, r27	; 0x07
    17e0:	0d c0       	rjmp	.+26     	; 0x17fc <_fpadd_parts+0x20e>
    17e2:	22 0f       	add	r18, r18
    17e4:	33 1f       	adc	r19, r19
    17e6:	44 1f       	adc	r20, r20
    17e8:	55 1f       	adc	r21, r21
    17ea:	24 83       	std	Z+4, r18	; 0x04
    17ec:	35 83       	std	Z+5, r19	; 0x05
    17ee:	46 83       	std	Z+6, r20	; 0x06
    17f0:	57 83       	std	Z+7, r21	; 0x07
    17f2:	82 81       	ldd	r24, Z+2	; 0x02
    17f4:	93 81       	ldd	r25, Z+3	; 0x03
    17f6:	01 97       	sbiw	r24, 0x01	; 1
    17f8:	93 83       	std	Z+3, r25	; 0x03
    17fa:	82 83       	std	Z+2, r24	; 0x02
    17fc:	24 81       	ldd	r18, Z+4	; 0x04
    17fe:	35 81       	ldd	r19, Z+5	; 0x05
    1800:	46 81       	ldd	r20, Z+6	; 0x06
    1802:	57 81       	ldd	r21, Z+7	; 0x07
    1804:	da 01       	movw	r26, r20
    1806:	c9 01       	movw	r24, r18
    1808:	01 97       	sbiw	r24, 0x01	; 1
    180a:	a1 09       	sbc	r26, r1
    180c:	b1 09       	sbc	r27, r1
    180e:	8f 5f       	subi	r24, 0xFF	; 255
    1810:	9f 4f       	sbci	r25, 0xFF	; 255
    1812:	af 4f       	sbci	r26, 0xFF	; 255
    1814:	bf 43       	sbci	r27, 0x3F	; 63
    1816:	28 f3       	brcs	.-54     	; 0x17e2 <_fpadd_parts+0x1f4>
    1818:	0b c0       	rjmp	.+22     	; 0x1830 <_fpadd_parts+0x242>
    181a:	91 83       	std	Z+1, r25	; 0x01
    181c:	33 82       	std	Z+3, r3	; 0x03
    181e:	22 82       	std	Z+2, r2	; 0x02
    1820:	ea 0c       	add	r14, r10
    1822:	fb 1c       	adc	r15, r11
    1824:	0c 1d       	adc	r16, r12
    1826:	1d 1d       	adc	r17, r13
    1828:	e4 82       	std	Z+4, r14	; 0x04
    182a:	f5 82       	std	Z+5, r15	; 0x05
    182c:	06 83       	std	Z+6, r16	; 0x06
    182e:	17 83       	std	Z+7, r17	; 0x07
    1830:	83 e0       	ldi	r24, 0x03	; 3
    1832:	80 83       	st	Z, r24
    1834:	24 81       	ldd	r18, Z+4	; 0x04
    1836:	35 81       	ldd	r19, Z+5	; 0x05
    1838:	46 81       	ldd	r20, Z+6	; 0x06
    183a:	57 81       	ldd	r21, Z+7	; 0x07
    183c:	57 ff       	sbrs	r21, 7
    183e:	1a c0       	rjmp	.+52     	; 0x1874 <_fpadd_parts+0x286>
    1840:	c9 01       	movw	r24, r18
    1842:	aa 27       	eor	r26, r26
    1844:	97 fd       	sbrc	r25, 7
    1846:	a0 95       	com	r26
    1848:	ba 2f       	mov	r27, r26
    184a:	81 70       	andi	r24, 0x01	; 1
    184c:	90 70       	andi	r25, 0x00	; 0
    184e:	a0 70       	andi	r26, 0x00	; 0
    1850:	b0 70       	andi	r27, 0x00	; 0
    1852:	56 95       	lsr	r21
    1854:	47 95       	ror	r20
    1856:	37 95       	ror	r19
    1858:	27 95       	ror	r18
    185a:	82 2b       	or	r24, r18
    185c:	93 2b       	or	r25, r19
    185e:	a4 2b       	or	r26, r20
    1860:	b5 2b       	or	r27, r21
    1862:	84 83       	std	Z+4, r24	; 0x04
    1864:	95 83       	std	Z+5, r25	; 0x05
    1866:	a6 83       	std	Z+6, r26	; 0x06
    1868:	b7 83       	std	Z+7, r27	; 0x07
    186a:	82 81       	ldd	r24, Z+2	; 0x02
    186c:	93 81       	ldd	r25, Z+3	; 0x03
    186e:	01 96       	adiw	r24, 0x01	; 1
    1870:	93 83       	std	Z+3, r25	; 0x03
    1872:	82 83       	std	Z+2, r24	; 0x02
    1874:	df 01       	movw	r26, r30
    1876:	01 c0       	rjmp	.+2      	; 0x187a <_fpadd_parts+0x28c>
    1878:	d2 01       	movw	r26, r4
    187a:	cd 01       	movw	r24, r26
    187c:	cd b7       	in	r28, 0x3d	; 61
    187e:	de b7       	in	r29, 0x3e	; 62
    1880:	e2 e1       	ldi	r30, 0x12	; 18
    1882:	0c 94 13 12 	jmp	0x2426	; 0x2426 <__epilogue_restores__>

00001886 <__subsf3>:
    1886:	a0 e2       	ldi	r26, 0x20	; 32
    1888:	b0 e0       	ldi	r27, 0x00	; 0
    188a:	e9 e4       	ldi	r30, 0x49	; 73
    188c:	fc e0       	ldi	r31, 0x0C	; 12
    188e:	0c 94 03 12 	jmp	0x2406	; 0x2406 <__prologue_saves__+0x18>
    1892:	69 83       	std	Y+1, r22	; 0x01
    1894:	7a 83       	std	Y+2, r23	; 0x02
    1896:	8b 83       	std	Y+3, r24	; 0x03
    1898:	9c 83       	std	Y+4, r25	; 0x04
    189a:	2d 83       	std	Y+5, r18	; 0x05
    189c:	3e 83       	std	Y+6, r19	; 0x06
    189e:	4f 83       	std	Y+7, r20	; 0x07
    18a0:	58 87       	std	Y+8, r21	; 0x08
    18a2:	e9 e0       	ldi	r30, 0x09	; 9
    18a4:	ee 2e       	mov	r14, r30
    18a6:	f1 2c       	mov	r15, r1
    18a8:	ec 0e       	add	r14, r28
    18aa:	fd 1e       	adc	r15, r29
    18ac:	ce 01       	movw	r24, r28
    18ae:	01 96       	adiw	r24, 0x01	; 1
    18b0:	b7 01       	movw	r22, r14
    18b2:	0e 94 26 11 	call	0x224c	; 0x224c <__unpack_f>
    18b6:	8e 01       	movw	r16, r28
    18b8:	0f 5e       	subi	r16, 0xEF	; 239
    18ba:	1f 4f       	sbci	r17, 0xFF	; 255
    18bc:	ce 01       	movw	r24, r28
    18be:	05 96       	adiw	r24, 0x05	; 5
    18c0:	b8 01       	movw	r22, r16
    18c2:	0e 94 26 11 	call	0x224c	; 0x224c <__unpack_f>
    18c6:	8a 89       	ldd	r24, Y+18	; 0x12
    18c8:	91 e0       	ldi	r25, 0x01	; 1
    18ca:	89 27       	eor	r24, r25
    18cc:	8a 8b       	std	Y+18, r24	; 0x12
    18ce:	c7 01       	movw	r24, r14
    18d0:	b8 01       	movw	r22, r16
    18d2:	ae 01       	movw	r20, r28
    18d4:	47 5e       	subi	r20, 0xE7	; 231
    18d6:	5f 4f       	sbci	r21, 0xFF	; 255
    18d8:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <_fpadd_parts>
    18dc:	0e 94 51 10 	call	0x20a2	; 0x20a2 <__pack_f>
    18e0:	a0 96       	adiw	r28, 0x20	; 32
    18e2:	e6 e0       	ldi	r30, 0x06	; 6
    18e4:	0c 94 1f 12 	jmp	0x243e	; 0x243e <__epilogue_restores__+0x18>

000018e8 <__addsf3>:
    18e8:	a0 e2       	ldi	r26, 0x20	; 32
    18ea:	b0 e0       	ldi	r27, 0x00	; 0
    18ec:	ea e7       	ldi	r30, 0x7A	; 122
    18ee:	fc e0       	ldi	r31, 0x0C	; 12
    18f0:	0c 94 03 12 	jmp	0x2406	; 0x2406 <__prologue_saves__+0x18>
    18f4:	69 83       	std	Y+1, r22	; 0x01
    18f6:	7a 83       	std	Y+2, r23	; 0x02
    18f8:	8b 83       	std	Y+3, r24	; 0x03
    18fa:	9c 83       	std	Y+4, r25	; 0x04
    18fc:	2d 83       	std	Y+5, r18	; 0x05
    18fe:	3e 83       	std	Y+6, r19	; 0x06
    1900:	4f 83       	std	Y+7, r20	; 0x07
    1902:	58 87       	std	Y+8, r21	; 0x08
    1904:	f9 e0       	ldi	r31, 0x09	; 9
    1906:	ef 2e       	mov	r14, r31
    1908:	f1 2c       	mov	r15, r1
    190a:	ec 0e       	add	r14, r28
    190c:	fd 1e       	adc	r15, r29
    190e:	ce 01       	movw	r24, r28
    1910:	01 96       	adiw	r24, 0x01	; 1
    1912:	b7 01       	movw	r22, r14
    1914:	0e 94 26 11 	call	0x224c	; 0x224c <__unpack_f>
    1918:	8e 01       	movw	r16, r28
    191a:	0f 5e       	subi	r16, 0xEF	; 239
    191c:	1f 4f       	sbci	r17, 0xFF	; 255
    191e:	ce 01       	movw	r24, r28
    1920:	05 96       	adiw	r24, 0x05	; 5
    1922:	b8 01       	movw	r22, r16
    1924:	0e 94 26 11 	call	0x224c	; 0x224c <__unpack_f>
    1928:	c7 01       	movw	r24, r14
    192a:	b8 01       	movw	r22, r16
    192c:	ae 01       	movw	r20, r28
    192e:	47 5e       	subi	r20, 0xE7	; 231
    1930:	5f 4f       	sbci	r21, 0xFF	; 255
    1932:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <_fpadd_parts>
    1936:	0e 94 51 10 	call	0x20a2	; 0x20a2 <__pack_f>
    193a:	a0 96       	adiw	r28, 0x20	; 32
    193c:	e6 e0       	ldi	r30, 0x06	; 6
    193e:	0c 94 1f 12 	jmp	0x243e	; 0x243e <__epilogue_restores__+0x18>

00001942 <__mulsf3>:
    1942:	a0 e2       	ldi	r26, 0x20	; 32
    1944:	b0 e0       	ldi	r27, 0x00	; 0
    1946:	e7 ea       	ldi	r30, 0xA7	; 167
    1948:	fc e0       	ldi	r31, 0x0C	; 12
    194a:	0c 94 f7 11 	jmp	0x23ee	; 0x23ee <__prologue_saves__>
    194e:	69 83       	std	Y+1, r22	; 0x01
    1950:	7a 83       	std	Y+2, r23	; 0x02
    1952:	8b 83       	std	Y+3, r24	; 0x03
    1954:	9c 83       	std	Y+4, r25	; 0x04
    1956:	2d 83       	std	Y+5, r18	; 0x05
    1958:	3e 83       	std	Y+6, r19	; 0x06
    195a:	4f 83       	std	Y+7, r20	; 0x07
    195c:	58 87       	std	Y+8, r21	; 0x08
    195e:	ce 01       	movw	r24, r28
    1960:	01 96       	adiw	r24, 0x01	; 1
    1962:	be 01       	movw	r22, r28
    1964:	67 5f       	subi	r22, 0xF7	; 247
    1966:	7f 4f       	sbci	r23, 0xFF	; 255
    1968:	0e 94 26 11 	call	0x224c	; 0x224c <__unpack_f>
    196c:	ce 01       	movw	r24, r28
    196e:	05 96       	adiw	r24, 0x05	; 5
    1970:	be 01       	movw	r22, r28
    1972:	6f 5e       	subi	r22, 0xEF	; 239
    1974:	7f 4f       	sbci	r23, 0xFF	; 255
    1976:	0e 94 26 11 	call	0x224c	; 0x224c <__unpack_f>
    197a:	99 85       	ldd	r25, Y+9	; 0x09
    197c:	92 30       	cpi	r25, 0x02	; 2
    197e:	88 f0       	brcs	.+34     	; 0x19a2 <__mulsf3+0x60>
    1980:	89 89       	ldd	r24, Y+17	; 0x11
    1982:	82 30       	cpi	r24, 0x02	; 2
    1984:	c8 f0       	brcs	.+50     	; 0x19b8 <__mulsf3+0x76>
    1986:	94 30       	cpi	r25, 0x04	; 4
    1988:	19 f4       	brne	.+6      	; 0x1990 <__mulsf3+0x4e>
    198a:	82 30       	cpi	r24, 0x02	; 2
    198c:	51 f4       	brne	.+20     	; 0x19a2 <__mulsf3+0x60>
    198e:	04 c0       	rjmp	.+8      	; 0x1998 <__mulsf3+0x56>
    1990:	84 30       	cpi	r24, 0x04	; 4
    1992:	29 f4       	brne	.+10     	; 0x199e <__mulsf3+0x5c>
    1994:	92 30       	cpi	r25, 0x02	; 2
    1996:	81 f4       	brne	.+32     	; 0x19b8 <__mulsf3+0x76>
    1998:	80 e0       	ldi	r24, 0x00	; 0
    199a:	92 e0       	ldi	r25, 0x02	; 2
    199c:	c6 c0       	rjmp	.+396    	; 0x1b2a <__mulsf3+0x1e8>
    199e:	92 30       	cpi	r25, 0x02	; 2
    19a0:	49 f4       	brne	.+18     	; 0x19b4 <__mulsf3+0x72>
    19a2:	20 e0       	ldi	r18, 0x00	; 0
    19a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    19a6:	8a 89       	ldd	r24, Y+18	; 0x12
    19a8:	98 13       	cpse	r25, r24
    19aa:	21 e0       	ldi	r18, 0x01	; 1
    19ac:	2a 87       	std	Y+10, r18	; 0x0a
    19ae:	ce 01       	movw	r24, r28
    19b0:	09 96       	adiw	r24, 0x09	; 9
    19b2:	bb c0       	rjmp	.+374    	; 0x1b2a <__mulsf3+0x1e8>
    19b4:	82 30       	cpi	r24, 0x02	; 2
    19b6:	49 f4       	brne	.+18     	; 0x19ca <__mulsf3+0x88>
    19b8:	20 e0       	ldi	r18, 0x00	; 0
    19ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    19bc:	8a 89       	ldd	r24, Y+18	; 0x12
    19be:	98 13       	cpse	r25, r24
    19c0:	21 e0       	ldi	r18, 0x01	; 1
    19c2:	2a 8b       	std	Y+18, r18	; 0x12
    19c4:	ce 01       	movw	r24, r28
    19c6:	41 96       	adiw	r24, 0x11	; 17
    19c8:	b0 c0       	rjmp	.+352    	; 0x1b2a <__mulsf3+0x1e8>
    19ca:	2d 84       	ldd	r2, Y+13	; 0x0d
    19cc:	3e 84       	ldd	r3, Y+14	; 0x0e
    19ce:	4f 84       	ldd	r4, Y+15	; 0x0f
    19d0:	58 88       	ldd	r5, Y+16	; 0x10
    19d2:	6d 88       	ldd	r6, Y+21	; 0x15
    19d4:	7e 88       	ldd	r7, Y+22	; 0x16
    19d6:	8f 88       	ldd	r8, Y+23	; 0x17
    19d8:	98 8c       	ldd	r9, Y+24	; 0x18
    19da:	ee 24       	eor	r14, r14
    19dc:	ff 24       	eor	r15, r15
    19de:	87 01       	movw	r16, r14
    19e0:	aa 24       	eor	r10, r10
    19e2:	bb 24       	eor	r11, r11
    19e4:	65 01       	movw	r12, r10
    19e6:	40 e0       	ldi	r20, 0x00	; 0
    19e8:	50 e0       	ldi	r21, 0x00	; 0
    19ea:	60 e0       	ldi	r22, 0x00	; 0
    19ec:	70 e0       	ldi	r23, 0x00	; 0
    19ee:	e0 e0       	ldi	r30, 0x00	; 0
    19f0:	f0 e0       	ldi	r31, 0x00	; 0
    19f2:	c1 01       	movw	r24, r2
    19f4:	81 70       	andi	r24, 0x01	; 1
    19f6:	90 70       	andi	r25, 0x00	; 0
    19f8:	89 2b       	or	r24, r25
    19fa:	e9 f0       	breq	.+58     	; 0x1a36 <__mulsf3+0xf4>
    19fc:	e6 0c       	add	r14, r6
    19fe:	f7 1c       	adc	r15, r7
    1a00:	08 1d       	adc	r16, r8
    1a02:	19 1d       	adc	r17, r9
    1a04:	9a 01       	movw	r18, r20
    1a06:	ab 01       	movw	r20, r22
    1a08:	2a 0d       	add	r18, r10
    1a0a:	3b 1d       	adc	r19, r11
    1a0c:	4c 1d       	adc	r20, r12
    1a0e:	5d 1d       	adc	r21, r13
    1a10:	80 e0       	ldi	r24, 0x00	; 0
    1a12:	90 e0       	ldi	r25, 0x00	; 0
    1a14:	a0 e0       	ldi	r26, 0x00	; 0
    1a16:	b0 e0       	ldi	r27, 0x00	; 0
    1a18:	e6 14       	cp	r14, r6
    1a1a:	f7 04       	cpc	r15, r7
    1a1c:	08 05       	cpc	r16, r8
    1a1e:	19 05       	cpc	r17, r9
    1a20:	20 f4       	brcc	.+8      	; 0x1a2a <__mulsf3+0xe8>
    1a22:	81 e0       	ldi	r24, 0x01	; 1
    1a24:	90 e0       	ldi	r25, 0x00	; 0
    1a26:	a0 e0       	ldi	r26, 0x00	; 0
    1a28:	b0 e0       	ldi	r27, 0x00	; 0
    1a2a:	ba 01       	movw	r22, r20
    1a2c:	a9 01       	movw	r20, r18
    1a2e:	48 0f       	add	r20, r24
    1a30:	59 1f       	adc	r21, r25
    1a32:	6a 1f       	adc	r22, r26
    1a34:	7b 1f       	adc	r23, r27
    1a36:	aa 0c       	add	r10, r10
    1a38:	bb 1c       	adc	r11, r11
    1a3a:	cc 1c       	adc	r12, r12
    1a3c:	dd 1c       	adc	r13, r13
    1a3e:	97 fe       	sbrs	r9, 7
    1a40:	08 c0       	rjmp	.+16     	; 0x1a52 <__mulsf3+0x110>
    1a42:	81 e0       	ldi	r24, 0x01	; 1
    1a44:	90 e0       	ldi	r25, 0x00	; 0
    1a46:	a0 e0       	ldi	r26, 0x00	; 0
    1a48:	b0 e0       	ldi	r27, 0x00	; 0
    1a4a:	a8 2a       	or	r10, r24
    1a4c:	b9 2a       	or	r11, r25
    1a4e:	ca 2a       	or	r12, r26
    1a50:	db 2a       	or	r13, r27
    1a52:	31 96       	adiw	r30, 0x01	; 1
    1a54:	e0 32       	cpi	r30, 0x20	; 32
    1a56:	f1 05       	cpc	r31, r1
    1a58:	49 f0       	breq	.+18     	; 0x1a6c <__mulsf3+0x12a>
    1a5a:	66 0c       	add	r6, r6
    1a5c:	77 1c       	adc	r7, r7
    1a5e:	88 1c       	adc	r8, r8
    1a60:	99 1c       	adc	r9, r9
    1a62:	56 94       	lsr	r5
    1a64:	47 94       	ror	r4
    1a66:	37 94       	ror	r3
    1a68:	27 94       	ror	r2
    1a6a:	c3 cf       	rjmp	.-122    	; 0x19f2 <__mulsf3+0xb0>
    1a6c:	fa 85       	ldd	r31, Y+10	; 0x0a
    1a6e:	ea 89       	ldd	r30, Y+18	; 0x12
    1a70:	2b 89       	ldd	r18, Y+19	; 0x13
    1a72:	3c 89       	ldd	r19, Y+20	; 0x14
    1a74:	8b 85       	ldd	r24, Y+11	; 0x0b
    1a76:	9c 85       	ldd	r25, Y+12	; 0x0c
    1a78:	28 0f       	add	r18, r24
    1a7a:	39 1f       	adc	r19, r25
    1a7c:	2e 5f       	subi	r18, 0xFE	; 254
    1a7e:	3f 4f       	sbci	r19, 0xFF	; 255
    1a80:	17 c0       	rjmp	.+46     	; 0x1ab0 <__mulsf3+0x16e>
    1a82:	ca 01       	movw	r24, r20
    1a84:	81 70       	andi	r24, 0x01	; 1
    1a86:	90 70       	andi	r25, 0x00	; 0
    1a88:	89 2b       	or	r24, r25
    1a8a:	61 f0       	breq	.+24     	; 0x1aa4 <__mulsf3+0x162>
    1a8c:	16 95       	lsr	r17
    1a8e:	07 95       	ror	r16
    1a90:	f7 94       	ror	r15
    1a92:	e7 94       	ror	r14
    1a94:	80 e0       	ldi	r24, 0x00	; 0
    1a96:	90 e0       	ldi	r25, 0x00	; 0
    1a98:	a0 e0       	ldi	r26, 0x00	; 0
    1a9a:	b0 e8       	ldi	r27, 0x80	; 128
    1a9c:	e8 2a       	or	r14, r24
    1a9e:	f9 2a       	or	r15, r25
    1aa0:	0a 2b       	or	r16, r26
    1aa2:	1b 2b       	or	r17, r27
    1aa4:	76 95       	lsr	r23
    1aa6:	67 95       	ror	r22
    1aa8:	57 95       	ror	r21
    1aaa:	47 95       	ror	r20
    1aac:	2f 5f       	subi	r18, 0xFF	; 255
    1aae:	3f 4f       	sbci	r19, 0xFF	; 255
    1ab0:	77 fd       	sbrc	r23, 7
    1ab2:	e7 cf       	rjmp	.-50     	; 0x1a82 <__mulsf3+0x140>
    1ab4:	0c c0       	rjmp	.+24     	; 0x1ace <__mulsf3+0x18c>
    1ab6:	44 0f       	add	r20, r20
    1ab8:	55 1f       	adc	r21, r21
    1aba:	66 1f       	adc	r22, r22
    1abc:	77 1f       	adc	r23, r23
    1abe:	17 fd       	sbrc	r17, 7
    1ac0:	41 60       	ori	r20, 0x01	; 1
    1ac2:	ee 0c       	add	r14, r14
    1ac4:	ff 1c       	adc	r15, r15
    1ac6:	00 1f       	adc	r16, r16
    1ac8:	11 1f       	adc	r17, r17
    1aca:	21 50       	subi	r18, 0x01	; 1
    1acc:	30 40       	sbci	r19, 0x00	; 0
    1ace:	40 30       	cpi	r20, 0x00	; 0
    1ad0:	90 e0       	ldi	r25, 0x00	; 0
    1ad2:	59 07       	cpc	r21, r25
    1ad4:	90 e0       	ldi	r25, 0x00	; 0
    1ad6:	69 07       	cpc	r22, r25
    1ad8:	90 e4       	ldi	r25, 0x40	; 64
    1ada:	79 07       	cpc	r23, r25
    1adc:	60 f3       	brcs	.-40     	; 0x1ab6 <__mulsf3+0x174>
    1ade:	2b 8f       	std	Y+27, r18	; 0x1b
    1ae0:	3c 8f       	std	Y+28, r19	; 0x1c
    1ae2:	db 01       	movw	r26, r22
    1ae4:	ca 01       	movw	r24, r20
    1ae6:	8f 77       	andi	r24, 0x7F	; 127
    1ae8:	90 70       	andi	r25, 0x00	; 0
    1aea:	a0 70       	andi	r26, 0x00	; 0
    1aec:	b0 70       	andi	r27, 0x00	; 0
    1aee:	80 34       	cpi	r24, 0x40	; 64
    1af0:	91 05       	cpc	r25, r1
    1af2:	a1 05       	cpc	r26, r1
    1af4:	b1 05       	cpc	r27, r1
    1af6:	61 f4       	brne	.+24     	; 0x1b10 <__mulsf3+0x1ce>
    1af8:	47 fd       	sbrc	r20, 7
    1afa:	0a c0       	rjmp	.+20     	; 0x1b10 <__mulsf3+0x1ce>
    1afc:	e1 14       	cp	r14, r1
    1afe:	f1 04       	cpc	r15, r1
    1b00:	01 05       	cpc	r16, r1
    1b02:	11 05       	cpc	r17, r1
    1b04:	29 f0       	breq	.+10     	; 0x1b10 <__mulsf3+0x1ce>
    1b06:	40 5c       	subi	r20, 0xC0	; 192
    1b08:	5f 4f       	sbci	r21, 0xFF	; 255
    1b0a:	6f 4f       	sbci	r22, 0xFF	; 255
    1b0c:	7f 4f       	sbci	r23, 0xFF	; 255
    1b0e:	40 78       	andi	r20, 0x80	; 128
    1b10:	1a 8e       	std	Y+26, r1	; 0x1a
    1b12:	fe 17       	cp	r31, r30
    1b14:	11 f0       	breq	.+4      	; 0x1b1a <__mulsf3+0x1d8>
    1b16:	81 e0       	ldi	r24, 0x01	; 1
    1b18:	8a 8f       	std	Y+26, r24	; 0x1a
    1b1a:	4d 8f       	std	Y+29, r20	; 0x1d
    1b1c:	5e 8f       	std	Y+30, r21	; 0x1e
    1b1e:	6f 8f       	std	Y+31, r22	; 0x1f
    1b20:	78 a3       	std	Y+32, r23	; 0x20
    1b22:	83 e0       	ldi	r24, 0x03	; 3
    1b24:	89 8f       	std	Y+25, r24	; 0x19
    1b26:	ce 01       	movw	r24, r28
    1b28:	49 96       	adiw	r24, 0x19	; 25
    1b2a:	0e 94 51 10 	call	0x20a2	; 0x20a2 <__pack_f>
    1b2e:	a0 96       	adiw	r28, 0x20	; 32
    1b30:	e2 e1       	ldi	r30, 0x12	; 18
    1b32:	0c 94 13 12 	jmp	0x2426	; 0x2426 <__epilogue_restores__>

00001b36 <__divsf3>:
    1b36:	a8 e1       	ldi	r26, 0x18	; 24
    1b38:	b0 e0       	ldi	r27, 0x00	; 0
    1b3a:	e1 ea       	ldi	r30, 0xA1	; 161
    1b3c:	fd e0       	ldi	r31, 0x0D	; 13
    1b3e:	0c 94 ff 11 	jmp	0x23fe	; 0x23fe <__prologue_saves__+0x10>
    1b42:	69 83       	std	Y+1, r22	; 0x01
    1b44:	7a 83       	std	Y+2, r23	; 0x02
    1b46:	8b 83       	std	Y+3, r24	; 0x03
    1b48:	9c 83       	std	Y+4, r25	; 0x04
    1b4a:	2d 83       	std	Y+5, r18	; 0x05
    1b4c:	3e 83       	std	Y+6, r19	; 0x06
    1b4e:	4f 83       	std	Y+7, r20	; 0x07
    1b50:	58 87       	std	Y+8, r21	; 0x08
    1b52:	b9 e0       	ldi	r27, 0x09	; 9
    1b54:	eb 2e       	mov	r14, r27
    1b56:	f1 2c       	mov	r15, r1
    1b58:	ec 0e       	add	r14, r28
    1b5a:	fd 1e       	adc	r15, r29
    1b5c:	ce 01       	movw	r24, r28
    1b5e:	01 96       	adiw	r24, 0x01	; 1
    1b60:	b7 01       	movw	r22, r14
    1b62:	0e 94 26 11 	call	0x224c	; 0x224c <__unpack_f>
    1b66:	8e 01       	movw	r16, r28
    1b68:	0f 5e       	subi	r16, 0xEF	; 239
    1b6a:	1f 4f       	sbci	r17, 0xFF	; 255
    1b6c:	ce 01       	movw	r24, r28
    1b6e:	05 96       	adiw	r24, 0x05	; 5
    1b70:	b8 01       	movw	r22, r16
    1b72:	0e 94 26 11 	call	0x224c	; 0x224c <__unpack_f>
    1b76:	29 85       	ldd	r18, Y+9	; 0x09
    1b78:	22 30       	cpi	r18, 0x02	; 2
    1b7a:	08 f4       	brcc	.+2      	; 0x1b7e <__divsf3+0x48>
    1b7c:	7e c0       	rjmp	.+252    	; 0x1c7a <__divsf3+0x144>
    1b7e:	39 89       	ldd	r19, Y+17	; 0x11
    1b80:	32 30       	cpi	r19, 0x02	; 2
    1b82:	10 f4       	brcc	.+4      	; 0x1b88 <__divsf3+0x52>
    1b84:	b8 01       	movw	r22, r16
    1b86:	7c c0       	rjmp	.+248    	; 0x1c80 <__divsf3+0x14a>
    1b88:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b8a:	9a 89       	ldd	r25, Y+18	; 0x12
    1b8c:	89 27       	eor	r24, r25
    1b8e:	8a 87       	std	Y+10, r24	; 0x0a
    1b90:	24 30       	cpi	r18, 0x04	; 4
    1b92:	11 f0       	breq	.+4      	; 0x1b98 <__divsf3+0x62>
    1b94:	22 30       	cpi	r18, 0x02	; 2
    1b96:	31 f4       	brne	.+12     	; 0x1ba4 <__divsf3+0x6e>
    1b98:	23 17       	cp	r18, r19
    1b9a:	09 f0       	breq	.+2      	; 0x1b9e <__divsf3+0x68>
    1b9c:	6e c0       	rjmp	.+220    	; 0x1c7a <__divsf3+0x144>
    1b9e:	60 e0       	ldi	r22, 0x00	; 0
    1ba0:	72 e0       	ldi	r23, 0x02	; 2
    1ba2:	6e c0       	rjmp	.+220    	; 0x1c80 <__divsf3+0x14a>
    1ba4:	34 30       	cpi	r19, 0x04	; 4
    1ba6:	39 f4       	brne	.+14     	; 0x1bb6 <__divsf3+0x80>
    1ba8:	1d 86       	std	Y+13, r1	; 0x0d
    1baa:	1e 86       	std	Y+14, r1	; 0x0e
    1bac:	1f 86       	std	Y+15, r1	; 0x0f
    1bae:	18 8a       	std	Y+16, r1	; 0x10
    1bb0:	1c 86       	std	Y+12, r1	; 0x0c
    1bb2:	1b 86       	std	Y+11, r1	; 0x0b
    1bb4:	04 c0       	rjmp	.+8      	; 0x1bbe <__divsf3+0x88>
    1bb6:	32 30       	cpi	r19, 0x02	; 2
    1bb8:	21 f4       	brne	.+8      	; 0x1bc2 <__divsf3+0x8c>
    1bba:	84 e0       	ldi	r24, 0x04	; 4
    1bbc:	89 87       	std	Y+9, r24	; 0x09
    1bbe:	b7 01       	movw	r22, r14
    1bc0:	5f c0       	rjmp	.+190    	; 0x1c80 <__divsf3+0x14a>
    1bc2:	2b 85       	ldd	r18, Y+11	; 0x0b
    1bc4:	3c 85       	ldd	r19, Y+12	; 0x0c
    1bc6:	8b 89       	ldd	r24, Y+19	; 0x13
    1bc8:	9c 89       	ldd	r25, Y+20	; 0x14
    1bca:	28 1b       	sub	r18, r24
    1bcc:	39 0b       	sbc	r19, r25
    1bce:	3c 87       	std	Y+12, r19	; 0x0c
    1bd0:	2b 87       	std	Y+11, r18	; 0x0b
    1bd2:	ed 84       	ldd	r14, Y+13	; 0x0d
    1bd4:	fe 84       	ldd	r15, Y+14	; 0x0e
    1bd6:	0f 85       	ldd	r16, Y+15	; 0x0f
    1bd8:	18 89       	ldd	r17, Y+16	; 0x10
    1bda:	ad 88       	ldd	r10, Y+21	; 0x15
    1bdc:	be 88       	ldd	r11, Y+22	; 0x16
    1bde:	cf 88       	ldd	r12, Y+23	; 0x17
    1be0:	d8 8c       	ldd	r13, Y+24	; 0x18
    1be2:	ea 14       	cp	r14, r10
    1be4:	fb 04       	cpc	r15, r11
    1be6:	0c 05       	cpc	r16, r12
    1be8:	1d 05       	cpc	r17, r13
    1bea:	40 f4       	brcc	.+16     	; 0x1bfc <__divsf3+0xc6>
    1bec:	ee 0c       	add	r14, r14
    1bee:	ff 1c       	adc	r15, r15
    1bf0:	00 1f       	adc	r16, r16
    1bf2:	11 1f       	adc	r17, r17
    1bf4:	21 50       	subi	r18, 0x01	; 1
    1bf6:	30 40       	sbci	r19, 0x00	; 0
    1bf8:	3c 87       	std	Y+12, r19	; 0x0c
    1bfa:	2b 87       	std	Y+11, r18	; 0x0b
    1bfc:	20 e0       	ldi	r18, 0x00	; 0
    1bfe:	30 e0       	ldi	r19, 0x00	; 0
    1c00:	40 e0       	ldi	r20, 0x00	; 0
    1c02:	50 e0       	ldi	r21, 0x00	; 0
    1c04:	80 e0       	ldi	r24, 0x00	; 0
    1c06:	90 e0       	ldi	r25, 0x00	; 0
    1c08:	a0 e0       	ldi	r26, 0x00	; 0
    1c0a:	b0 e4       	ldi	r27, 0x40	; 64
    1c0c:	60 e0       	ldi	r22, 0x00	; 0
    1c0e:	70 e0       	ldi	r23, 0x00	; 0
    1c10:	ea 14       	cp	r14, r10
    1c12:	fb 04       	cpc	r15, r11
    1c14:	0c 05       	cpc	r16, r12
    1c16:	1d 05       	cpc	r17, r13
    1c18:	40 f0       	brcs	.+16     	; 0x1c2a <__divsf3+0xf4>
    1c1a:	28 2b       	or	r18, r24
    1c1c:	39 2b       	or	r19, r25
    1c1e:	4a 2b       	or	r20, r26
    1c20:	5b 2b       	or	r21, r27
    1c22:	ea 18       	sub	r14, r10
    1c24:	fb 08       	sbc	r15, r11
    1c26:	0c 09       	sbc	r16, r12
    1c28:	1d 09       	sbc	r17, r13
    1c2a:	b6 95       	lsr	r27
    1c2c:	a7 95       	ror	r26
    1c2e:	97 95       	ror	r25
    1c30:	87 95       	ror	r24
    1c32:	ee 0c       	add	r14, r14
    1c34:	ff 1c       	adc	r15, r15
    1c36:	00 1f       	adc	r16, r16
    1c38:	11 1f       	adc	r17, r17
    1c3a:	6f 5f       	subi	r22, 0xFF	; 255
    1c3c:	7f 4f       	sbci	r23, 0xFF	; 255
    1c3e:	6f 31       	cpi	r22, 0x1F	; 31
    1c40:	71 05       	cpc	r23, r1
    1c42:	31 f7       	brne	.-52     	; 0x1c10 <__divsf3+0xda>
    1c44:	da 01       	movw	r26, r20
    1c46:	c9 01       	movw	r24, r18
    1c48:	8f 77       	andi	r24, 0x7F	; 127
    1c4a:	90 70       	andi	r25, 0x00	; 0
    1c4c:	a0 70       	andi	r26, 0x00	; 0
    1c4e:	b0 70       	andi	r27, 0x00	; 0
    1c50:	80 34       	cpi	r24, 0x40	; 64
    1c52:	91 05       	cpc	r25, r1
    1c54:	a1 05       	cpc	r26, r1
    1c56:	b1 05       	cpc	r27, r1
    1c58:	61 f4       	brne	.+24     	; 0x1c72 <__divsf3+0x13c>
    1c5a:	27 fd       	sbrc	r18, 7
    1c5c:	0a c0       	rjmp	.+20     	; 0x1c72 <__divsf3+0x13c>
    1c5e:	e1 14       	cp	r14, r1
    1c60:	f1 04       	cpc	r15, r1
    1c62:	01 05       	cpc	r16, r1
    1c64:	11 05       	cpc	r17, r1
    1c66:	29 f0       	breq	.+10     	; 0x1c72 <__divsf3+0x13c>
    1c68:	20 5c       	subi	r18, 0xC0	; 192
    1c6a:	3f 4f       	sbci	r19, 0xFF	; 255
    1c6c:	4f 4f       	sbci	r20, 0xFF	; 255
    1c6e:	5f 4f       	sbci	r21, 0xFF	; 255
    1c70:	20 78       	andi	r18, 0x80	; 128
    1c72:	2d 87       	std	Y+13, r18	; 0x0d
    1c74:	3e 87       	std	Y+14, r19	; 0x0e
    1c76:	4f 87       	std	Y+15, r20	; 0x0f
    1c78:	58 8b       	std	Y+16, r21	; 0x10
    1c7a:	be 01       	movw	r22, r28
    1c7c:	67 5f       	subi	r22, 0xF7	; 247
    1c7e:	7f 4f       	sbci	r23, 0xFF	; 255
    1c80:	cb 01       	movw	r24, r22
    1c82:	0e 94 51 10 	call	0x20a2	; 0x20a2 <__pack_f>
    1c86:	68 96       	adiw	r28, 0x18	; 24
    1c88:	ea e0       	ldi	r30, 0x0A	; 10
    1c8a:	0c 94 1b 12 	jmp	0x2436	; 0x2436 <__epilogue_restores__+0x10>

00001c8e <__gtsf2>:
    1c8e:	a8 e1       	ldi	r26, 0x18	; 24
    1c90:	b0 e0       	ldi	r27, 0x00	; 0
    1c92:	ed e4       	ldi	r30, 0x4D	; 77
    1c94:	fe e0       	ldi	r31, 0x0E	; 14
    1c96:	0c 94 03 12 	jmp	0x2406	; 0x2406 <__prologue_saves__+0x18>
    1c9a:	69 83       	std	Y+1, r22	; 0x01
    1c9c:	7a 83       	std	Y+2, r23	; 0x02
    1c9e:	8b 83       	std	Y+3, r24	; 0x03
    1ca0:	9c 83       	std	Y+4, r25	; 0x04
    1ca2:	2d 83       	std	Y+5, r18	; 0x05
    1ca4:	3e 83       	std	Y+6, r19	; 0x06
    1ca6:	4f 83       	std	Y+7, r20	; 0x07
    1ca8:	58 87       	std	Y+8, r21	; 0x08
    1caa:	89 e0       	ldi	r24, 0x09	; 9
    1cac:	e8 2e       	mov	r14, r24
    1cae:	f1 2c       	mov	r15, r1
    1cb0:	ec 0e       	add	r14, r28
    1cb2:	fd 1e       	adc	r15, r29
    1cb4:	ce 01       	movw	r24, r28
    1cb6:	01 96       	adiw	r24, 0x01	; 1
    1cb8:	b7 01       	movw	r22, r14
    1cba:	0e 94 26 11 	call	0x224c	; 0x224c <__unpack_f>
    1cbe:	8e 01       	movw	r16, r28
    1cc0:	0f 5e       	subi	r16, 0xEF	; 239
    1cc2:	1f 4f       	sbci	r17, 0xFF	; 255
    1cc4:	ce 01       	movw	r24, r28
    1cc6:	05 96       	adiw	r24, 0x05	; 5
    1cc8:	b8 01       	movw	r22, r16
    1cca:	0e 94 26 11 	call	0x224c	; 0x224c <__unpack_f>
    1cce:	89 85       	ldd	r24, Y+9	; 0x09
    1cd0:	82 30       	cpi	r24, 0x02	; 2
    1cd2:	40 f0       	brcs	.+16     	; 0x1ce4 <__gtsf2+0x56>
    1cd4:	89 89       	ldd	r24, Y+17	; 0x11
    1cd6:	82 30       	cpi	r24, 0x02	; 2
    1cd8:	28 f0       	brcs	.+10     	; 0x1ce4 <__gtsf2+0x56>
    1cda:	c7 01       	movw	r24, r14
    1cdc:	b8 01       	movw	r22, r16
    1cde:	0e 94 9e 11 	call	0x233c	; 0x233c <__fpcmp_parts_f>
    1ce2:	01 c0       	rjmp	.+2      	; 0x1ce6 <__gtsf2+0x58>
    1ce4:	8f ef       	ldi	r24, 0xFF	; 255
    1ce6:	68 96       	adiw	r28, 0x18	; 24
    1ce8:	e6 e0       	ldi	r30, 0x06	; 6
    1cea:	0c 94 1f 12 	jmp	0x243e	; 0x243e <__epilogue_restores__+0x18>

00001cee <__gesf2>:
    1cee:	a8 e1       	ldi	r26, 0x18	; 24
    1cf0:	b0 e0       	ldi	r27, 0x00	; 0
    1cf2:	ed e7       	ldi	r30, 0x7D	; 125
    1cf4:	fe e0       	ldi	r31, 0x0E	; 14
    1cf6:	0c 94 03 12 	jmp	0x2406	; 0x2406 <__prologue_saves__+0x18>
    1cfa:	69 83       	std	Y+1, r22	; 0x01
    1cfc:	7a 83       	std	Y+2, r23	; 0x02
    1cfe:	8b 83       	std	Y+3, r24	; 0x03
    1d00:	9c 83       	std	Y+4, r25	; 0x04
    1d02:	2d 83       	std	Y+5, r18	; 0x05
    1d04:	3e 83       	std	Y+6, r19	; 0x06
    1d06:	4f 83       	std	Y+7, r20	; 0x07
    1d08:	58 87       	std	Y+8, r21	; 0x08
    1d0a:	89 e0       	ldi	r24, 0x09	; 9
    1d0c:	e8 2e       	mov	r14, r24
    1d0e:	f1 2c       	mov	r15, r1
    1d10:	ec 0e       	add	r14, r28
    1d12:	fd 1e       	adc	r15, r29
    1d14:	ce 01       	movw	r24, r28
    1d16:	01 96       	adiw	r24, 0x01	; 1
    1d18:	b7 01       	movw	r22, r14
    1d1a:	0e 94 26 11 	call	0x224c	; 0x224c <__unpack_f>
    1d1e:	8e 01       	movw	r16, r28
    1d20:	0f 5e       	subi	r16, 0xEF	; 239
    1d22:	1f 4f       	sbci	r17, 0xFF	; 255
    1d24:	ce 01       	movw	r24, r28
    1d26:	05 96       	adiw	r24, 0x05	; 5
    1d28:	b8 01       	movw	r22, r16
    1d2a:	0e 94 26 11 	call	0x224c	; 0x224c <__unpack_f>
    1d2e:	89 85       	ldd	r24, Y+9	; 0x09
    1d30:	82 30       	cpi	r24, 0x02	; 2
    1d32:	40 f0       	brcs	.+16     	; 0x1d44 <__gesf2+0x56>
    1d34:	89 89       	ldd	r24, Y+17	; 0x11
    1d36:	82 30       	cpi	r24, 0x02	; 2
    1d38:	28 f0       	brcs	.+10     	; 0x1d44 <__gesf2+0x56>
    1d3a:	c7 01       	movw	r24, r14
    1d3c:	b8 01       	movw	r22, r16
    1d3e:	0e 94 9e 11 	call	0x233c	; 0x233c <__fpcmp_parts_f>
    1d42:	01 c0       	rjmp	.+2      	; 0x1d46 <__gesf2+0x58>
    1d44:	8f ef       	ldi	r24, 0xFF	; 255
    1d46:	68 96       	adiw	r28, 0x18	; 24
    1d48:	e6 e0       	ldi	r30, 0x06	; 6
    1d4a:	0c 94 1f 12 	jmp	0x243e	; 0x243e <__epilogue_restores__+0x18>

00001d4e <__ltsf2>:
    1d4e:	a8 e1       	ldi	r26, 0x18	; 24
    1d50:	b0 e0       	ldi	r27, 0x00	; 0
    1d52:	ed ea       	ldi	r30, 0xAD	; 173
    1d54:	fe e0       	ldi	r31, 0x0E	; 14
    1d56:	0c 94 03 12 	jmp	0x2406	; 0x2406 <__prologue_saves__+0x18>
    1d5a:	69 83       	std	Y+1, r22	; 0x01
    1d5c:	7a 83       	std	Y+2, r23	; 0x02
    1d5e:	8b 83       	std	Y+3, r24	; 0x03
    1d60:	9c 83       	std	Y+4, r25	; 0x04
    1d62:	2d 83       	std	Y+5, r18	; 0x05
    1d64:	3e 83       	std	Y+6, r19	; 0x06
    1d66:	4f 83       	std	Y+7, r20	; 0x07
    1d68:	58 87       	std	Y+8, r21	; 0x08
    1d6a:	89 e0       	ldi	r24, 0x09	; 9
    1d6c:	e8 2e       	mov	r14, r24
    1d6e:	f1 2c       	mov	r15, r1
    1d70:	ec 0e       	add	r14, r28
    1d72:	fd 1e       	adc	r15, r29
    1d74:	ce 01       	movw	r24, r28
    1d76:	01 96       	adiw	r24, 0x01	; 1
    1d78:	b7 01       	movw	r22, r14
    1d7a:	0e 94 26 11 	call	0x224c	; 0x224c <__unpack_f>
    1d7e:	8e 01       	movw	r16, r28
    1d80:	0f 5e       	subi	r16, 0xEF	; 239
    1d82:	1f 4f       	sbci	r17, 0xFF	; 255
    1d84:	ce 01       	movw	r24, r28
    1d86:	05 96       	adiw	r24, 0x05	; 5
    1d88:	b8 01       	movw	r22, r16
    1d8a:	0e 94 26 11 	call	0x224c	; 0x224c <__unpack_f>
    1d8e:	89 85       	ldd	r24, Y+9	; 0x09
    1d90:	82 30       	cpi	r24, 0x02	; 2
    1d92:	40 f0       	brcs	.+16     	; 0x1da4 <__ltsf2+0x56>
    1d94:	89 89       	ldd	r24, Y+17	; 0x11
    1d96:	82 30       	cpi	r24, 0x02	; 2
    1d98:	28 f0       	brcs	.+10     	; 0x1da4 <__ltsf2+0x56>
    1d9a:	c7 01       	movw	r24, r14
    1d9c:	b8 01       	movw	r22, r16
    1d9e:	0e 94 9e 11 	call	0x233c	; 0x233c <__fpcmp_parts_f>
    1da2:	01 c0       	rjmp	.+2      	; 0x1da6 <__ltsf2+0x58>
    1da4:	81 e0       	ldi	r24, 0x01	; 1
    1da6:	68 96       	adiw	r28, 0x18	; 24
    1da8:	e6 e0       	ldi	r30, 0x06	; 6
    1daa:	0c 94 1f 12 	jmp	0x243e	; 0x243e <__epilogue_restores__+0x18>

00001dae <__floatsisf>:
    1dae:	a8 e0       	ldi	r26, 0x08	; 8
    1db0:	b0 e0       	ldi	r27, 0x00	; 0
    1db2:	ed ed       	ldi	r30, 0xDD	; 221
    1db4:	fe e0       	ldi	r31, 0x0E	; 14
    1db6:	0c 94 00 12 	jmp	0x2400	; 0x2400 <__prologue_saves__+0x12>
    1dba:	9b 01       	movw	r18, r22
    1dbc:	ac 01       	movw	r20, r24
    1dbe:	83 e0       	ldi	r24, 0x03	; 3
    1dc0:	89 83       	std	Y+1, r24	; 0x01
    1dc2:	da 01       	movw	r26, r20
    1dc4:	c9 01       	movw	r24, r18
    1dc6:	88 27       	eor	r24, r24
    1dc8:	b7 fd       	sbrc	r27, 7
    1dca:	83 95       	inc	r24
    1dcc:	99 27       	eor	r25, r25
    1dce:	aa 27       	eor	r26, r26
    1dd0:	bb 27       	eor	r27, r27
    1dd2:	b8 2e       	mov	r11, r24
    1dd4:	21 15       	cp	r18, r1
    1dd6:	31 05       	cpc	r19, r1
    1dd8:	41 05       	cpc	r20, r1
    1dda:	51 05       	cpc	r21, r1
    1ddc:	19 f4       	brne	.+6      	; 0x1de4 <__floatsisf+0x36>
    1dde:	82 e0       	ldi	r24, 0x02	; 2
    1de0:	89 83       	std	Y+1, r24	; 0x01
    1de2:	3a c0       	rjmp	.+116    	; 0x1e58 <__floatsisf+0xaa>
    1de4:	88 23       	and	r24, r24
    1de6:	a9 f0       	breq	.+42     	; 0x1e12 <__floatsisf+0x64>
    1de8:	20 30       	cpi	r18, 0x00	; 0
    1dea:	80 e0       	ldi	r24, 0x00	; 0
    1dec:	38 07       	cpc	r19, r24
    1dee:	80 e0       	ldi	r24, 0x00	; 0
    1df0:	48 07       	cpc	r20, r24
    1df2:	80 e8       	ldi	r24, 0x80	; 128
    1df4:	58 07       	cpc	r21, r24
    1df6:	29 f4       	brne	.+10     	; 0x1e02 <__floatsisf+0x54>
    1df8:	60 e0       	ldi	r22, 0x00	; 0
    1dfa:	70 e0       	ldi	r23, 0x00	; 0
    1dfc:	80 e0       	ldi	r24, 0x00	; 0
    1dfe:	9f ec       	ldi	r25, 0xCF	; 207
    1e00:	30 c0       	rjmp	.+96     	; 0x1e62 <__floatsisf+0xb4>
    1e02:	ee 24       	eor	r14, r14
    1e04:	ff 24       	eor	r15, r15
    1e06:	87 01       	movw	r16, r14
    1e08:	e2 1a       	sub	r14, r18
    1e0a:	f3 0a       	sbc	r15, r19
    1e0c:	04 0b       	sbc	r16, r20
    1e0e:	15 0b       	sbc	r17, r21
    1e10:	02 c0       	rjmp	.+4      	; 0x1e16 <__floatsisf+0x68>
    1e12:	79 01       	movw	r14, r18
    1e14:	8a 01       	movw	r16, r20
    1e16:	8e e1       	ldi	r24, 0x1E	; 30
    1e18:	c8 2e       	mov	r12, r24
    1e1a:	d1 2c       	mov	r13, r1
    1e1c:	dc 82       	std	Y+4, r13	; 0x04
    1e1e:	cb 82       	std	Y+3, r12	; 0x03
    1e20:	ed 82       	std	Y+5, r14	; 0x05
    1e22:	fe 82       	std	Y+6, r15	; 0x06
    1e24:	0f 83       	std	Y+7, r16	; 0x07
    1e26:	18 87       	std	Y+8, r17	; 0x08
    1e28:	c8 01       	movw	r24, r16
    1e2a:	b7 01       	movw	r22, r14
    1e2c:	0e 94 02 10 	call	0x2004	; 0x2004 <__clzsi2>
    1e30:	01 97       	sbiw	r24, 0x01	; 1
    1e32:	18 16       	cp	r1, r24
    1e34:	19 06       	cpc	r1, r25
    1e36:	84 f4       	brge	.+32     	; 0x1e58 <__floatsisf+0xaa>
    1e38:	08 2e       	mov	r0, r24
    1e3a:	04 c0       	rjmp	.+8      	; 0x1e44 <__floatsisf+0x96>
    1e3c:	ee 0c       	add	r14, r14
    1e3e:	ff 1c       	adc	r15, r15
    1e40:	00 1f       	adc	r16, r16
    1e42:	11 1f       	adc	r17, r17
    1e44:	0a 94       	dec	r0
    1e46:	d2 f7       	brpl	.-12     	; 0x1e3c <__floatsisf+0x8e>
    1e48:	ed 82       	std	Y+5, r14	; 0x05
    1e4a:	fe 82       	std	Y+6, r15	; 0x06
    1e4c:	0f 83       	std	Y+7, r16	; 0x07
    1e4e:	18 87       	std	Y+8, r17	; 0x08
    1e50:	c8 1a       	sub	r12, r24
    1e52:	d9 0a       	sbc	r13, r25
    1e54:	dc 82       	std	Y+4, r13	; 0x04
    1e56:	cb 82       	std	Y+3, r12	; 0x03
    1e58:	ba 82       	std	Y+2, r11	; 0x02
    1e5a:	ce 01       	movw	r24, r28
    1e5c:	01 96       	adiw	r24, 0x01	; 1
    1e5e:	0e 94 51 10 	call	0x20a2	; 0x20a2 <__pack_f>
    1e62:	28 96       	adiw	r28, 0x08	; 8
    1e64:	e9 e0       	ldi	r30, 0x09	; 9
    1e66:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__epilogue_restores__+0x12>

00001e6a <__fixsfsi>:
    1e6a:	ac e0       	ldi	r26, 0x0C	; 12
    1e6c:	b0 e0       	ldi	r27, 0x00	; 0
    1e6e:	eb e3       	ldi	r30, 0x3B	; 59
    1e70:	ff e0       	ldi	r31, 0x0F	; 15
    1e72:	0c 94 07 12 	jmp	0x240e	; 0x240e <__prologue_saves__+0x20>
    1e76:	69 83       	std	Y+1, r22	; 0x01
    1e78:	7a 83       	std	Y+2, r23	; 0x02
    1e7a:	8b 83       	std	Y+3, r24	; 0x03
    1e7c:	9c 83       	std	Y+4, r25	; 0x04
    1e7e:	ce 01       	movw	r24, r28
    1e80:	01 96       	adiw	r24, 0x01	; 1
    1e82:	be 01       	movw	r22, r28
    1e84:	6b 5f       	subi	r22, 0xFB	; 251
    1e86:	7f 4f       	sbci	r23, 0xFF	; 255
    1e88:	0e 94 26 11 	call	0x224c	; 0x224c <__unpack_f>
    1e8c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e8e:	82 30       	cpi	r24, 0x02	; 2
    1e90:	61 f1       	breq	.+88     	; 0x1eea <__fixsfsi+0x80>
    1e92:	82 30       	cpi	r24, 0x02	; 2
    1e94:	50 f1       	brcs	.+84     	; 0x1eea <__fixsfsi+0x80>
    1e96:	84 30       	cpi	r24, 0x04	; 4
    1e98:	21 f4       	brne	.+8      	; 0x1ea2 <__fixsfsi+0x38>
    1e9a:	8e 81       	ldd	r24, Y+6	; 0x06
    1e9c:	88 23       	and	r24, r24
    1e9e:	51 f1       	breq	.+84     	; 0x1ef4 <__fixsfsi+0x8a>
    1ea0:	2e c0       	rjmp	.+92     	; 0x1efe <__fixsfsi+0x94>
    1ea2:	2f 81       	ldd	r18, Y+7	; 0x07
    1ea4:	38 85       	ldd	r19, Y+8	; 0x08
    1ea6:	37 fd       	sbrc	r19, 7
    1ea8:	20 c0       	rjmp	.+64     	; 0x1eea <__fixsfsi+0x80>
    1eaa:	6e 81       	ldd	r22, Y+6	; 0x06
    1eac:	2f 31       	cpi	r18, 0x1F	; 31
    1eae:	31 05       	cpc	r19, r1
    1eb0:	1c f0       	brlt	.+6      	; 0x1eb8 <__fixsfsi+0x4e>
    1eb2:	66 23       	and	r22, r22
    1eb4:	f9 f0       	breq	.+62     	; 0x1ef4 <__fixsfsi+0x8a>
    1eb6:	23 c0       	rjmp	.+70     	; 0x1efe <__fixsfsi+0x94>
    1eb8:	8e e1       	ldi	r24, 0x1E	; 30
    1eba:	90 e0       	ldi	r25, 0x00	; 0
    1ebc:	82 1b       	sub	r24, r18
    1ebe:	93 0b       	sbc	r25, r19
    1ec0:	29 85       	ldd	r18, Y+9	; 0x09
    1ec2:	3a 85       	ldd	r19, Y+10	; 0x0a
    1ec4:	4b 85       	ldd	r20, Y+11	; 0x0b
    1ec6:	5c 85       	ldd	r21, Y+12	; 0x0c
    1ec8:	04 c0       	rjmp	.+8      	; 0x1ed2 <__fixsfsi+0x68>
    1eca:	56 95       	lsr	r21
    1ecc:	47 95       	ror	r20
    1ece:	37 95       	ror	r19
    1ed0:	27 95       	ror	r18
    1ed2:	8a 95       	dec	r24
    1ed4:	d2 f7       	brpl	.-12     	; 0x1eca <__fixsfsi+0x60>
    1ed6:	66 23       	and	r22, r22
    1ed8:	b1 f0       	breq	.+44     	; 0x1f06 <__fixsfsi+0x9c>
    1eda:	50 95       	com	r21
    1edc:	40 95       	com	r20
    1ede:	30 95       	com	r19
    1ee0:	21 95       	neg	r18
    1ee2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ee4:	4f 4f       	sbci	r20, 0xFF	; 255
    1ee6:	5f 4f       	sbci	r21, 0xFF	; 255
    1ee8:	0e c0       	rjmp	.+28     	; 0x1f06 <__fixsfsi+0x9c>
    1eea:	20 e0       	ldi	r18, 0x00	; 0
    1eec:	30 e0       	ldi	r19, 0x00	; 0
    1eee:	40 e0       	ldi	r20, 0x00	; 0
    1ef0:	50 e0       	ldi	r21, 0x00	; 0
    1ef2:	09 c0       	rjmp	.+18     	; 0x1f06 <__fixsfsi+0x9c>
    1ef4:	2f ef       	ldi	r18, 0xFF	; 255
    1ef6:	3f ef       	ldi	r19, 0xFF	; 255
    1ef8:	4f ef       	ldi	r20, 0xFF	; 255
    1efa:	5f e7       	ldi	r21, 0x7F	; 127
    1efc:	04 c0       	rjmp	.+8      	; 0x1f06 <__fixsfsi+0x9c>
    1efe:	20 e0       	ldi	r18, 0x00	; 0
    1f00:	30 e0       	ldi	r19, 0x00	; 0
    1f02:	40 e0       	ldi	r20, 0x00	; 0
    1f04:	50 e8       	ldi	r21, 0x80	; 128
    1f06:	b9 01       	movw	r22, r18
    1f08:	ca 01       	movw	r24, r20
    1f0a:	2c 96       	adiw	r28, 0x0c	; 12
    1f0c:	e2 e0       	ldi	r30, 0x02	; 2
    1f0e:	0c 94 23 12 	jmp	0x2446	; 0x2446 <__epilogue_restores__+0x20>

00001f12 <__floatunsisf>:
    1f12:	a8 e0       	ldi	r26, 0x08	; 8
    1f14:	b0 e0       	ldi	r27, 0x00	; 0
    1f16:	ef e8       	ldi	r30, 0x8F	; 143
    1f18:	ff e0       	ldi	r31, 0x0F	; 15
    1f1a:	0c 94 ff 11 	jmp	0x23fe	; 0x23fe <__prologue_saves__+0x10>
    1f1e:	7b 01       	movw	r14, r22
    1f20:	8c 01       	movw	r16, r24
    1f22:	61 15       	cp	r22, r1
    1f24:	71 05       	cpc	r23, r1
    1f26:	81 05       	cpc	r24, r1
    1f28:	91 05       	cpc	r25, r1
    1f2a:	19 f4       	brne	.+6      	; 0x1f32 <__floatunsisf+0x20>
    1f2c:	82 e0       	ldi	r24, 0x02	; 2
    1f2e:	89 83       	std	Y+1, r24	; 0x01
    1f30:	60 c0       	rjmp	.+192    	; 0x1ff2 <__floatunsisf+0xe0>
    1f32:	83 e0       	ldi	r24, 0x03	; 3
    1f34:	89 83       	std	Y+1, r24	; 0x01
    1f36:	8e e1       	ldi	r24, 0x1E	; 30
    1f38:	c8 2e       	mov	r12, r24
    1f3a:	d1 2c       	mov	r13, r1
    1f3c:	dc 82       	std	Y+4, r13	; 0x04
    1f3e:	cb 82       	std	Y+3, r12	; 0x03
    1f40:	ed 82       	std	Y+5, r14	; 0x05
    1f42:	fe 82       	std	Y+6, r15	; 0x06
    1f44:	0f 83       	std	Y+7, r16	; 0x07
    1f46:	18 87       	std	Y+8, r17	; 0x08
    1f48:	c8 01       	movw	r24, r16
    1f4a:	b7 01       	movw	r22, r14
    1f4c:	0e 94 02 10 	call	0x2004	; 0x2004 <__clzsi2>
    1f50:	fc 01       	movw	r30, r24
    1f52:	31 97       	sbiw	r30, 0x01	; 1
    1f54:	f7 ff       	sbrs	r31, 7
    1f56:	3b c0       	rjmp	.+118    	; 0x1fce <__floatunsisf+0xbc>
    1f58:	22 27       	eor	r18, r18
    1f5a:	33 27       	eor	r19, r19
    1f5c:	2e 1b       	sub	r18, r30
    1f5e:	3f 0b       	sbc	r19, r31
    1f60:	57 01       	movw	r10, r14
    1f62:	68 01       	movw	r12, r16
    1f64:	02 2e       	mov	r0, r18
    1f66:	04 c0       	rjmp	.+8      	; 0x1f70 <__floatunsisf+0x5e>
    1f68:	d6 94       	lsr	r13
    1f6a:	c7 94       	ror	r12
    1f6c:	b7 94       	ror	r11
    1f6e:	a7 94       	ror	r10
    1f70:	0a 94       	dec	r0
    1f72:	d2 f7       	brpl	.-12     	; 0x1f68 <__floatunsisf+0x56>
    1f74:	40 e0       	ldi	r20, 0x00	; 0
    1f76:	50 e0       	ldi	r21, 0x00	; 0
    1f78:	60 e0       	ldi	r22, 0x00	; 0
    1f7a:	70 e0       	ldi	r23, 0x00	; 0
    1f7c:	81 e0       	ldi	r24, 0x01	; 1
    1f7e:	90 e0       	ldi	r25, 0x00	; 0
    1f80:	a0 e0       	ldi	r26, 0x00	; 0
    1f82:	b0 e0       	ldi	r27, 0x00	; 0
    1f84:	04 c0       	rjmp	.+8      	; 0x1f8e <__floatunsisf+0x7c>
    1f86:	88 0f       	add	r24, r24
    1f88:	99 1f       	adc	r25, r25
    1f8a:	aa 1f       	adc	r26, r26
    1f8c:	bb 1f       	adc	r27, r27
    1f8e:	2a 95       	dec	r18
    1f90:	d2 f7       	brpl	.-12     	; 0x1f86 <__floatunsisf+0x74>
    1f92:	01 97       	sbiw	r24, 0x01	; 1
    1f94:	a1 09       	sbc	r26, r1
    1f96:	b1 09       	sbc	r27, r1
    1f98:	8e 21       	and	r24, r14
    1f9a:	9f 21       	and	r25, r15
    1f9c:	a0 23       	and	r26, r16
    1f9e:	b1 23       	and	r27, r17
    1fa0:	00 97       	sbiw	r24, 0x00	; 0
    1fa2:	a1 05       	cpc	r26, r1
    1fa4:	b1 05       	cpc	r27, r1
    1fa6:	21 f0       	breq	.+8      	; 0x1fb0 <__floatunsisf+0x9e>
    1fa8:	41 e0       	ldi	r20, 0x01	; 1
    1faa:	50 e0       	ldi	r21, 0x00	; 0
    1fac:	60 e0       	ldi	r22, 0x00	; 0
    1fae:	70 e0       	ldi	r23, 0x00	; 0
    1fb0:	4a 29       	or	r20, r10
    1fb2:	5b 29       	or	r21, r11
    1fb4:	6c 29       	or	r22, r12
    1fb6:	7d 29       	or	r23, r13
    1fb8:	4d 83       	std	Y+5, r20	; 0x05
    1fba:	5e 83       	std	Y+6, r21	; 0x06
    1fbc:	6f 83       	std	Y+7, r22	; 0x07
    1fbe:	78 87       	std	Y+8, r23	; 0x08
    1fc0:	8e e1       	ldi	r24, 0x1E	; 30
    1fc2:	90 e0       	ldi	r25, 0x00	; 0
    1fc4:	8e 1b       	sub	r24, r30
    1fc6:	9f 0b       	sbc	r25, r31
    1fc8:	9c 83       	std	Y+4, r25	; 0x04
    1fca:	8b 83       	std	Y+3, r24	; 0x03
    1fcc:	12 c0       	rjmp	.+36     	; 0x1ff2 <__floatunsisf+0xe0>
    1fce:	30 97       	sbiw	r30, 0x00	; 0
    1fd0:	81 f0       	breq	.+32     	; 0x1ff2 <__floatunsisf+0xe0>
    1fd2:	0e 2e       	mov	r0, r30
    1fd4:	04 c0       	rjmp	.+8      	; 0x1fde <__floatunsisf+0xcc>
    1fd6:	ee 0c       	add	r14, r14
    1fd8:	ff 1c       	adc	r15, r15
    1fda:	00 1f       	adc	r16, r16
    1fdc:	11 1f       	adc	r17, r17
    1fde:	0a 94       	dec	r0
    1fe0:	d2 f7       	brpl	.-12     	; 0x1fd6 <__floatunsisf+0xc4>
    1fe2:	ed 82       	std	Y+5, r14	; 0x05
    1fe4:	fe 82       	std	Y+6, r15	; 0x06
    1fe6:	0f 83       	std	Y+7, r16	; 0x07
    1fe8:	18 87       	std	Y+8, r17	; 0x08
    1fea:	ce 1a       	sub	r12, r30
    1fec:	df 0a       	sbc	r13, r31
    1fee:	dc 82       	std	Y+4, r13	; 0x04
    1ff0:	cb 82       	std	Y+3, r12	; 0x03
    1ff2:	1a 82       	std	Y+2, r1	; 0x02
    1ff4:	ce 01       	movw	r24, r28
    1ff6:	01 96       	adiw	r24, 0x01	; 1
    1ff8:	0e 94 51 10 	call	0x20a2	; 0x20a2 <__pack_f>
    1ffc:	28 96       	adiw	r28, 0x08	; 8
    1ffe:	ea e0       	ldi	r30, 0x0A	; 10
    2000:	0c 94 1b 12 	jmp	0x2436	; 0x2436 <__epilogue_restores__+0x10>

00002004 <__clzsi2>:
    2004:	ef 92       	push	r14
    2006:	ff 92       	push	r15
    2008:	0f 93       	push	r16
    200a:	1f 93       	push	r17
    200c:	7b 01       	movw	r14, r22
    200e:	8c 01       	movw	r16, r24
    2010:	80 e0       	ldi	r24, 0x00	; 0
    2012:	e8 16       	cp	r14, r24
    2014:	80 e0       	ldi	r24, 0x00	; 0
    2016:	f8 06       	cpc	r15, r24
    2018:	81 e0       	ldi	r24, 0x01	; 1
    201a:	08 07       	cpc	r16, r24
    201c:	80 e0       	ldi	r24, 0x00	; 0
    201e:	18 07       	cpc	r17, r24
    2020:	88 f4       	brcc	.+34     	; 0x2044 <__clzsi2+0x40>
    2022:	8f ef       	ldi	r24, 0xFF	; 255
    2024:	e8 16       	cp	r14, r24
    2026:	f1 04       	cpc	r15, r1
    2028:	01 05       	cpc	r16, r1
    202a:	11 05       	cpc	r17, r1
    202c:	31 f0       	breq	.+12     	; 0x203a <__clzsi2+0x36>
    202e:	28 f0       	brcs	.+10     	; 0x203a <__clzsi2+0x36>
    2030:	88 e0       	ldi	r24, 0x08	; 8
    2032:	90 e0       	ldi	r25, 0x00	; 0
    2034:	a0 e0       	ldi	r26, 0x00	; 0
    2036:	b0 e0       	ldi	r27, 0x00	; 0
    2038:	17 c0       	rjmp	.+46     	; 0x2068 <__clzsi2+0x64>
    203a:	80 e0       	ldi	r24, 0x00	; 0
    203c:	90 e0       	ldi	r25, 0x00	; 0
    203e:	a0 e0       	ldi	r26, 0x00	; 0
    2040:	b0 e0       	ldi	r27, 0x00	; 0
    2042:	12 c0       	rjmp	.+36     	; 0x2068 <__clzsi2+0x64>
    2044:	80 e0       	ldi	r24, 0x00	; 0
    2046:	e8 16       	cp	r14, r24
    2048:	80 e0       	ldi	r24, 0x00	; 0
    204a:	f8 06       	cpc	r15, r24
    204c:	80 e0       	ldi	r24, 0x00	; 0
    204e:	08 07       	cpc	r16, r24
    2050:	81 e0       	ldi	r24, 0x01	; 1
    2052:	18 07       	cpc	r17, r24
    2054:	28 f0       	brcs	.+10     	; 0x2060 <__clzsi2+0x5c>
    2056:	88 e1       	ldi	r24, 0x18	; 24
    2058:	90 e0       	ldi	r25, 0x00	; 0
    205a:	a0 e0       	ldi	r26, 0x00	; 0
    205c:	b0 e0       	ldi	r27, 0x00	; 0
    205e:	04 c0       	rjmp	.+8      	; 0x2068 <__clzsi2+0x64>
    2060:	80 e1       	ldi	r24, 0x10	; 16
    2062:	90 e0       	ldi	r25, 0x00	; 0
    2064:	a0 e0       	ldi	r26, 0x00	; 0
    2066:	b0 e0       	ldi	r27, 0x00	; 0
    2068:	20 e2       	ldi	r18, 0x20	; 32
    206a:	30 e0       	ldi	r19, 0x00	; 0
    206c:	40 e0       	ldi	r20, 0x00	; 0
    206e:	50 e0       	ldi	r21, 0x00	; 0
    2070:	28 1b       	sub	r18, r24
    2072:	39 0b       	sbc	r19, r25
    2074:	4a 0b       	sbc	r20, r26
    2076:	5b 0b       	sbc	r21, r27
    2078:	04 c0       	rjmp	.+8      	; 0x2082 <__clzsi2+0x7e>
    207a:	16 95       	lsr	r17
    207c:	07 95       	ror	r16
    207e:	f7 94       	ror	r15
    2080:	e7 94       	ror	r14
    2082:	8a 95       	dec	r24
    2084:	d2 f7       	brpl	.-12     	; 0x207a <__clzsi2+0x76>
    2086:	f7 01       	movw	r30, r14
    2088:	e8 5f       	subi	r30, 0xF8	; 248
    208a:	fd 4f       	sbci	r31, 0xFD	; 253
    208c:	80 81       	ld	r24, Z
    208e:	28 1b       	sub	r18, r24
    2090:	31 09       	sbc	r19, r1
    2092:	41 09       	sbc	r20, r1
    2094:	51 09       	sbc	r21, r1
    2096:	c9 01       	movw	r24, r18
    2098:	1f 91       	pop	r17
    209a:	0f 91       	pop	r16
    209c:	ff 90       	pop	r15
    209e:	ef 90       	pop	r14
    20a0:	08 95       	ret

000020a2 <__pack_f>:
    20a2:	df 92       	push	r13
    20a4:	ef 92       	push	r14
    20a6:	ff 92       	push	r15
    20a8:	0f 93       	push	r16
    20aa:	1f 93       	push	r17
    20ac:	fc 01       	movw	r30, r24
    20ae:	e4 80       	ldd	r14, Z+4	; 0x04
    20b0:	f5 80       	ldd	r15, Z+5	; 0x05
    20b2:	06 81       	ldd	r16, Z+6	; 0x06
    20b4:	17 81       	ldd	r17, Z+7	; 0x07
    20b6:	d1 80       	ldd	r13, Z+1	; 0x01
    20b8:	80 81       	ld	r24, Z
    20ba:	82 30       	cpi	r24, 0x02	; 2
    20bc:	48 f4       	brcc	.+18     	; 0x20d0 <__pack_f+0x2e>
    20be:	80 e0       	ldi	r24, 0x00	; 0
    20c0:	90 e0       	ldi	r25, 0x00	; 0
    20c2:	a0 e1       	ldi	r26, 0x10	; 16
    20c4:	b0 e0       	ldi	r27, 0x00	; 0
    20c6:	e8 2a       	or	r14, r24
    20c8:	f9 2a       	or	r15, r25
    20ca:	0a 2b       	or	r16, r26
    20cc:	1b 2b       	or	r17, r27
    20ce:	a5 c0       	rjmp	.+330    	; 0x221a <__stack+0x1b>
    20d0:	84 30       	cpi	r24, 0x04	; 4
    20d2:	09 f4       	brne	.+2      	; 0x20d6 <__pack_f+0x34>
    20d4:	9f c0       	rjmp	.+318    	; 0x2214 <__stack+0x15>
    20d6:	82 30       	cpi	r24, 0x02	; 2
    20d8:	21 f4       	brne	.+8      	; 0x20e2 <__pack_f+0x40>
    20da:	ee 24       	eor	r14, r14
    20dc:	ff 24       	eor	r15, r15
    20de:	87 01       	movw	r16, r14
    20e0:	05 c0       	rjmp	.+10     	; 0x20ec <__pack_f+0x4a>
    20e2:	e1 14       	cp	r14, r1
    20e4:	f1 04       	cpc	r15, r1
    20e6:	01 05       	cpc	r16, r1
    20e8:	11 05       	cpc	r17, r1
    20ea:	19 f4       	brne	.+6      	; 0x20f2 <__pack_f+0x50>
    20ec:	e0 e0       	ldi	r30, 0x00	; 0
    20ee:	f0 e0       	ldi	r31, 0x00	; 0
    20f0:	96 c0       	rjmp	.+300    	; 0x221e <__stack+0x1f>
    20f2:	62 81       	ldd	r22, Z+2	; 0x02
    20f4:	73 81       	ldd	r23, Z+3	; 0x03
    20f6:	9f ef       	ldi	r25, 0xFF	; 255
    20f8:	62 38       	cpi	r22, 0x82	; 130
    20fa:	79 07       	cpc	r23, r25
    20fc:	0c f0       	brlt	.+2      	; 0x2100 <__pack_f+0x5e>
    20fe:	5b c0       	rjmp	.+182    	; 0x21b6 <__pack_f+0x114>
    2100:	22 e8       	ldi	r18, 0x82	; 130
    2102:	3f ef       	ldi	r19, 0xFF	; 255
    2104:	26 1b       	sub	r18, r22
    2106:	37 0b       	sbc	r19, r23
    2108:	2a 31       	cpi	r18, 0x1A	; 26
    210a:	31 05       	cpc	r19, r1
    210c:	2c f0       	brlt	.+10     	; 0x2118 <__pack_f+0x76>
    210e:	20 e0       	ldi	r18, 0x00	; 0
    2110:	30 e0       	ldi	r19, 0x00	; 0
    2112:	40 e0       	ldi	r20, 0x00	; 0
    2114:	50 e0       	ldi	r21, 0x00	; 0
    2116:	2a c0       	rjmp	.+84     	; 0x216c <__pack_f+0xca>
    2118:	b8 01       	movw	r22, r16
    211a:	a7 01       	movw	r20, r14
    211c:	02 2e       	mov	r0, r18
    211e:	04 c0       	rjmp	.+8      	; 0x2128 <__pack_f+0x86>
    2120:	76 95       	lsr	r23
    2122:	67 95       	ror	r22
    2124:	57 95       	ror	r21
    2126:	47 95       	ror	r20
    2128:	0a 94       	dec	r0
    212a:	d2 f7       	brpl	.-12     	; 0x2120 <__pack_f+0x7e>
    212c:	81 e0       	ldi	r24, 0x01	; 1
    212e:	90 e0       	ldi	r25, 0x00	; 0
    2130:	a0 e0       	ldi	r26, 0x00	; 0
    2132:	b0 e0       	ldi	r27, 0x00	; 0
    2134:	04 c0       	rjmp	.+8      	; 0x213e <__pack_f+0x9c>
    2136:	88 0f       	add	r24, r24
    2138:	99 1f       	adc	r25, r25
    213a:	aa 1f       	adc	r26, r26
    213c:	bb 1f       	adc	r27, r27
    213e:	2a 95       	dec	r18
    2140:	d2 f7       	brpl	.-12     	; 0x2136 <__pack_f+0x94>
    2142:	01 97       	sbiw	r24, 0x01	; 1
    2144:	a1 09       	sbc	r26, r1
    2146:	b1 09       	sbc	r27, r1
    2148:	8e 21       	and	r24, r14
    214a:	9f 21       	and	r25, r15
    214c:	a0 23       	and	r26, r16
    214e:	b1 23       	and	r27, r17
    2150:	00 97       	sbiw	r24, 0x00	; 0
    2152:	a1 05       	cpc	r26, r1
    2154:	b1 05       	cpc	r27, r1
    2156:	21 f0       	breq	.+8      	; 0x2160 <__pack_f+0xbe>
    2158:	81 e0       	ldi	r24, 0x01	; 1
    215a:	90 e0       	ldi	r25, 0x00	; 0
    215c:	a0 e0       	ldi	r26, 0x00	; 0
    215e:	b0 e0       	ldi	r27, 0x00	; 0
    2160:	9a 01       	movw	r18, r20
    2162:	ab 01       	movw	r20, r22
    2164:	28 2b       	or	r18, r24
    2166:	39 2b       	or	r19, r25
    2168:	4a 2b       	or	r20, r26
    216a:	5b 2b       	or	r21, r27
    216c:	da 01       	movw	r26, r20
    216e:	c9 01       	movw	r24, r18
    2170:	8f 77       	andi	r24, 0x7F	; 127
    2172:	90 70       	andi	r25, 0x00	; 0
    2174:	a0 70       	andi	r26, 0x00	; 0
    2176:	b0 70       	andi	r27, 0x00	; 0
    2178:	80 34       	cpi	r24, 0x40	; 64
    217a:	91 05       	cpc	r25, r1
    217c:	a1 05       	cpc	r26, r1
    217e:	b1 05       	cpc	r27, r1
    2180:	39 f4       	brne	.+14     	; 0x2190 <__pack_f+0xee>
    2182:	27 ff       	sbrs	r18, 7
    2184:	09 c0       	rjmp	.+18     	; 0x2198 <__pack_f+0xf6>
    2186:	20 5c       	subi	r18, 0xC0	; 192
    2188:	3f 4f       	sbci	r19, 0xFF	; 255
    218a:	4f 4f       	sbci	r20, 0xFF	; 255
    218c:	5f 4f       	sbci	r21, 0xFF	; 255
    218e:	04 c0       	rjmp	.+8      	; 0x2198 <__pack_f+0xf6>
    2190:	21 5c       	subi	r18, 0xC1	; 193
    2192:	3f 4f       	sbci	r19, 0xFF	; 255
    2194:	4f 4f       	sbci	r20, 0xFF	; 255
    2196:	5f 4f       	sbci	r21, 0xFF	; 255
    2198:	e0 e0       	ldi	r30, 0x00	; 0
    219a:	f0 e0       	ldi	r31, 0x00	; 0
    219c:	20 30       	cpi	r18, 0x00	; 0
    219e:	a0 e0       	ldi	r26, 0x00	; 0
    21a0:	3a 07       	cpc	r19, r26
    21a2:	a0 e0       	ldi	r26, 0x00	; 0
    21a4:	4a 07       	cpc	r20, r26
    21a6:	a0 e4       	ldi	r26, 0x40	; 64
    21a8:	5a 07       	cpc	r21, r26
    21aa:	10 f0       	brcs	.+4      	; 0x21b0 <__pack_f+0x10e>
    21ac:	e1 e0       	ldi	r30, 0x01	; 1
    21ae:	f0 e0       	ldi	r31, 0x00	; 0
    21b0:	79 01       	movw	r14, r18
    21b2:	8a 01       	movw	r16, r20
    21b4:	27 c0       	rjmp	.+78     	; 0x2204 <__stack+0x5>
    21b6:	60 38       	cpi	r22, 0x80	; 128
    21b8:	71 05       	cpc	r23, r1
    21ba:	64 f5       	brge	.+88     	; 0x2214 <__stack+0x15>
    21bc:	fb 01       	movw	r30, r22
    21be:	e1 58       	subi	r30, 0x81	; 129
    21c0:	ff 4f       	sbci	r31, 0xFF	; 255
    21c2:	d8 01       	movw	r26, r16
    21c4:	c7 01       	movw	r24, r14
    21c6:	8f 77       	andi	r24, 0x7F	; 127
    21c8:	90 70       	andi	r25, 0x00	; 0
    21ca:	a0 70       	andi	r26, 0x00	; 0
    21cc:	b0 70       	andi	r27, 0x00	; 0
    21ce:	80 34       	cpi	r24, 0x40	; 64
    21d0:	91 05       	cpc	r25, r1
    21d2:	a1 05       	cpc	r26, r1
    21d4:	b1 05       	cpc	r27, r1
    21d6:	39 f4       	brne	.+14     	; 0x21e6 <__pack_f+0x144>
    21d8:	e7 fe       	sbrs	r14, 7
    21da:	0d c0       	rjmp	.+26     	; 0x21f6 <__pack_f+0x154>
    21dc:	80 e4       	ldi	r24, 0x40	; 64
    21de:	90 e0       	ldi	r25, 0x00	; 0
    21e0:	a0 e0       	ldi	r26, 0x00	; 0
    21e2:	b0 e0       	ldi	r27, 0x00	; 0
    21e4:	04 c0       	rjmp	.+8      	; 0x21ee <__pack_f+0x14c>
    21e6:	8f e3       	ldi	r24, 0x3F	; 63
    21e8:	90 e0       	ldi	r25, 0x00	; 0
    21ea:	a0 e0       	ldi	r26, 0x00	; 0
    21ec:	b0 e0       	ldi	r27, 0x00	; 0
    21ee:	e8 0e       	add	r14, r24
    21f0:	f9 1e       	adc	r15, r25
    21f2:	0a 1f       	adc	r16, r26
    21f4:	1b 1f       	adc	r17, r27
    21f6:	17 ff       	sbrs	r17, 7
    21f8:	05 c0       	rjmp	.+10     	; 0x2204 <__stack+0x5>
    21fa:	16 95       	lsr	r17
    21fc:	07 95       	ror	r16
    21fe:	f7 94       	ror	r15
    2200:	e7 94       	ror	r14
    2202:	31 96       	adiw	r30, 0x01	; 1
    2204:	87 e0       	ldi	r24, 0x07	; 7
    2206:	16 95       	lsr	r17
    2208:	07 95       	ror	r16
    220a:	f7 94       	ror	r15
    220c:	e7 94       	ror	r14
    220e:	8a 95       	dec	r24
    2210:	d1 f7       	brne	.-12     	; 0x2206 <__stack+0x7>
    2212:	05 c0       	rjmp	.+10     	; 0x221e <__stack+0x1f>
    2214:	ee 24       	eor	r14, r14
    2216:	ff 24       	eor	r15, r15
    2218:	87 01       	movw	r16, r14
    221a:	ef ef       	ldi	r30, 0xFF	; 255
    221c:	f0 e0       	ldi	r31, 0x00	; 0
    221e:	6e 2f       	mov	r22, r30
    2220:	67 95       	ror	r22
    2222:	66 27       	eor	r22, r22
    2224:	67 95       	ror	r22
    2226:	90 2f       	mov	r25, r16
    2228:	9f 77       	andi	r25, 0x7F	; 127
    222a:	d7 94       	ror	r13
    222c:	dd 24       	eor	r13, r13
    222e:	d7 94       	ror	r13
    2230:	8e 2f       	mov	r24, r30
    2232:	86 95       	lsr	r24
    2234:	49 2f       	mov	r20, r25
    2236:	46 2b       	or	r20, r22
    2238:	58 2f       	mov	r21, r24
    223a:	5d 29       	or	r21, r13
    223c:	b7 01       	movw	r22, r14
    223e:	ca 01       	movw	r24, r20
    2240:	1f 91       	pop	r17
    2242:	0f 91       	pop	r16
    2244:	ff 90       	pop	r15
    2246:	ef 90       	pop	r14
    2248:	df 90       	pop	r13
    224a:	08 95       	ret

0000224c <__unpack_f>:
    224c:	fc 01       	movw	r30, r24
    224e:	db 01       	movw	r26, r22
    2250:	40 81       	ld	r20, Z
    2252:	51 81       	ldd	r21, Z+1	; 0x01
    2254:	22 81       	ldd	r18, Z+2	; 0x02
    2256:	62 2f       	mov	r22, r18
    2258:	6f 77       	andi	r22, 0x7F	; 127
    225a:	70 e0       	ldi	r23, 0x00	; 0
    225c:	22 1f       	adc	r18, r18
    225e:	22 27       	eor	r18, r18
    2260:	22 1f       	adc	r18, r18
    2262:	93 81       	ldd	r25, Z+3	; 0x03
    2264:	89 2f       	mov	r24, r25
    2266:	88 0f       	add	r24, r24
    2268:	82 2b       	or	r24, r18
    226a:	28 2f       	mov	r18, r24
    226c:	30 e0       	ldi	r19, 0x00	; 0
    226e:	99 1f       	adc	r25, r25
    2270:	99 27       	eor	r25, r25
    2272:	99 1f       	adc	r25, r25
    2274:	11 96       	adiw	r26, 0x01	; 1
    2276:	9c 93       	st	X, r25
    2278:	11 97       	sbiw	r26, 0x01	; 1
    227a:	21 15       	cp	r18, r1
    227c:	31 05       	cpc	r19, r1
    227e:	a9 f5       	brne	.+106    	; 0x22ea <__unpack_f+0x9e>
    2280:	41 15       	cp	r20, r1
    2282:	51 05       	cpc	r21, r1
    2284:	61 05       	cpc	r22, r1
    2286:	71 05       	cpc	r23, r1
    2288:	11 f4       	brne	.+4      	; 0x228e <__unpack_f+0x42>
    228a:	82 e0       	ldi	r24, 0x02	; 2
    228c:	37 c0       	rjmp	.+110    	; 0x22fc <__unpack_f+0xb0>
    228e:	82 e8       	ldi	r24, 0x82	; 130
    2290:	9f ef       	ldi	r25, 0xFF	; 255
    2292:	13 96       	adiw	r26, 0x03	; 3
    2294:	9c 93       	st	X, r25
    2296:	8e 93       	st	-X, r24
    2298:	12 97       	sbiw	r26, 0x02	; 2
    229a:	9a 01       	movw	r18, r20
    229c:	ab 01       	movw	r20, r22
    229e:	67 e0       	ldi	r22, 0x07	; 7
    22a0:	22 0f       	add	r18, r18
    22a2:	33 1f       	adc	r19, r19
    22a4:	44 1f       	adc	r20, r20
    22a6:	55 1f       	adc	r21, r21
    22a8:	6a 95       	dec	r22
    22aa:	d1 f7       	brne	.-12     	; 0x22a0 <__unpack_f+0x54>
    22ac:	83 e0       	ldi	r24, 0x03	; 3
    22ae:	8c 93       	st	X, r24
    22b0:	0d c0       	rjmp	.+26     	; 0x22cc <__unpack_f+0x80>
    22b2:	22 0f       	add	r18, r18
    22b4:	33 1f       	adc	r19, r19
    22b6:	44 1f       	adc	r20, r20
    22b8:	55 1f       	adc	r21, r21
    22ba:	12 96       	adiw	r26, 0x02	; 2
    22bc:	8d 91       	ld	r24, X+
    22be:	9c 91       	ld	r25, X
    22c0:	13 97       	sbiw	r26, 0x03	; 3
    22c2:	01 97       	sbiw	r24, 0x01	; 1
    22c4:	13 96       	adiw	r26, 0x03	; 3
    22c6:	9c 93       	st	X, r25
    22c8:	8e 93       	st	-X, r24
    22ca:	12 97       	sbiw	r26, 0x02	; 2
    22cc:	20 30       	cpi	r18, 0x00	; 0
    22ce:	80 e0       	ldi	r24, 0x00	; 0
    22d0:	38 07       	cpc	r19, r24
    22d2:	80 e0       	ldi	r24, 0x00	; 0
    22d4:	48 07       	cpc	r20, r24
    22d6:	80 e4       	ldi	r24, 0x40	; 64
    22d8:	58 07       	cpc	r21, r24
    22da:	58 f3       	brcs	.-42     	; 0x22b2 <__unpack_f+0x66>
    22dc:	14 96       	adiw	r26, 0x04	; 4
    22de:	2d 93       	st	X+, r18
    22e0:	3d 93       	st	X+, r19
    22e2:	4d 93       	st	X+, r20
    22e4:	5c 93       	st	X, r21
    22e6:	17 97       	sbiw	r26, 0x07	; 7
    22e8:	08 95       	ret
    22ea:	2f 3f       	cpi	r18, 0xFF	; 255
    22ec:	31 05       	cpc	r19, r1
    22ee:	79 f4       	brne	.+30     	; 0x230e <__unpack_f+0xc2>
    22f0:	41 15       	cp	r20, r1
    22f2:	51 05       	cpc	r21, r1
    22f4:	61 05       	cpc	r22, r1
    22f6:	71 05       	cpc	r23, r1
    22f8:	19 f4       	brne	.+6      	; 0x2300 <__unpack_f+0xb4>
    22fa:	84 e0       	ldi	r24, 0x04	; 4
    22fc:	8c 93       	st	X, r24
    22fe:	08 95       	ret
    2300:	64 ff       	sbrs	r22, 4
    2302:	03 c0       	rjmp	.+6      	; 0x230a <__unpack_f+0xbe>
    2304:	81 e0       	ldi	r24, 0x01	; 1
    2306:	8c 93       	st	X, r24
    2308:	12 c0       	rjmp	.+36     	; 0x232e <__unpack_f+0xe2>
    230a:	1c 92       	st	X, r1
    230c:	10 c0       	rjmp	.+32     	; 0x232e <__unpack_f+0xe2>
    230e:	2f 57       	subi	r18, 0x7F	; 127
    2310:	30 40       	sbci	r19, 0x00	; 0
    2312:	13 96       	adiw	r26, 0x03	; 3
    2314:	3c 93       	st	X, r19
    2316:	2e 93       	st	-X, r18
    2318:	12 97       	sbiw	r26, 0x02	; 2
    231a:	83 e0       	ldi	r24, 0x03	; 3
    231c:	8c 93       	st	X, r24
    231e:	87 e0       	ldi	r24, 0x07	; 7
    2320:	44 0f       	add	r20, r20
    2322:	55 1f       	adc	r21, r21
    2324:	66 1f       	adc	r22, r22
    2326:	77 1f       	adc	r23, r23
    2328:	8a 95       	dec	r24
    232a:	d1 f7       	brne	.-12     	; 0x2320 <__unpack_f+0xd4>
    232c:	70 64       	ori	r23, 0x40	; 64
    232e:	14 96       	adiw	r26, 0x04	; 4
    2330:	4d 93       	st	X+, r20
    2332:	5d 93       	st	X+, r21
    2334:	6d 93       	st	X+, r22
    2336:	7c 93       	st	X, r23
    2338:	17 97       	sbiw	r26, 0x07	; 7
    233a:	08 95       	ret

0000233c <__fpcmp_parts_f>:
    233c:	1f 93       	push	r17
    233e:	dc 01       	movw	r26, r24
    2340:	fb 01       	movw	r30, r22
    2342:	9c 91       	ld	r25, X
    2344:	92 30       	cpi	r25, 0x02	; 2
    2346:	08 f4       	brcc	.+2      	; 0x234a <__fpcmp_parts_f+0xe>
    2348:	47 c0       	rjmp	.+142    	; 0x23d8 <__fpcmp_parts_f+0x9c>
    234a:	80 81       	ld	r24, Z
    234c:	82 30       	cpi	r24, 0x02	; 2
    234e:	08 f4       	brcc	.+2      	; 0x2352 <__fpcmp_parts_f+0x16>
    2350:	43 c0       	rjmp	.+134    	; 0x23d8 <__fpcmp_parts_f+0x9c>
    2352:	94 30       	cpi	r25, 0x04	; 4
    2354:	51 f4       	brne	.+20     	; 0x236a <__fpcmp_parts_f+0x2e>
    2356:	11 96       	adiw	r26, 0x01	; 1
    2358:	1c 91       	ld	r17, X
    235a:	84 30       	cpi	r24, 0x04	; 4
    235c:	99 f5       	brne	.+102    	; 0x23c4 <__fpcmp_parts_f+0x88>
    235e:	81 81       	ldd	r24, Z+1	; 0x01
    2360:	68 2f       	mov	r22, r24
    2362:	70 e0       	ldi	r23, 0x00	; 0
    2364:	61 1b       	sub	r22, r17
    2366:	71 09       	sbc	r23, r1
    2368:	3f c0       	rjmp	.+126    	; 0x23e8 <__fpcmp_parts_f+0xac>
    236a:	84 30       	cpi	r24, 0x04	; 4
    236c:	21 f0       	breq	.+8      	; 0x2376 <__fpcmp_parts_f+0x3a>
    236e:	92 30       	cpi	r25, 0x02	; 2
    2370:	31 f4       	brne	.+12     	; 0x237e <__fpcmp_parts_f+0x42>
    2372:	82 30       	cpi	r24, 0x02	; 2
    2374:	b9 f1       	breq	.+110    	; 0x23e4 <__fpcmp_parts_f+0xa8>
    2376:	81 81       	ldd	r24, Z+1	; 0x01
    2378:	88 23       	and	r24, r24
    237a:	89 f1       	breq	.+98     	; 0x23de <__fpcmp_parts_f+0xa2>
    237c:	2d c0       	rjmp	.+90     	; 0x23d8 <__fpcmp_parts_f+0x9c>
    237e:	11 96       	adiw	r26, 0x01	; 1
    2380:	1c 91       	ld	r17, X
    2382:	11 97       	sbiw	r26, 0x01	; 1
    2384:	82 30       	cpi	r24, 0x02	; 2
    2386:	f1 f0       	breq	.+60     	; 0x23c4 <__fpcmp_parts_f+0x88>
    2388:	81 81       	ldd	r24, Z+1	; 0x01
    238a:	18 17       	cp	r17, r24
    238c:	d9 f4       	brne	.+54     	; 0x23c4 <__fpcmp_parts_f+0x88>
    238e:	12 96       	adiw	r26, 0x02	; 2
    2390:	2d 91       	ld	r18, X+
    2392:	3c 91       	ld	r19, X
    2394:	13 97       	sbiw	r26, 0x03	; 3
    2396:	82 81       	ldd	r24, Z+2	; 0x02
    2398:	93 81       	ldd	r25, Z+3	; 0x03
    239a:	82 17       	cp	r24, r18
    239c:	93 07       	cpc	r25, r19
    239e:	94 f0       	brlt	.+36     	; 0x23c4 <__fpcmp_parts_f+0x88>
    23a0:	28 17       	cp	r18, r24
    23a2:	39 07       	cpc	r19, r25
    23a4:	bc f0       	brlt	.+46     	; 0x23d4 <__fpcmp_parts_f+0x98>
    23a6:	14 96       	adiw	r26, 0x04	; 4
    23a8:	8d 91       	ld	r24, X+
    23aa:	9d 91       	ld	r25, X+
    23ac:	0d 90       	ld	r0, X+
    23ae:	bc 91       	ld	r27, X
    23b0:	a0 2d       	mov	r26, r0
    23b2:	24 81       	ldd	r18, Z+4	; 0x04
    23b4:	35 81       	ldd	r19, Z+5	; 0x05
    23b6:	46 81       	ldd	r20, Z+6	; 0x06
    23b8:	57 81       	ldd	r21, Z+7	; 0x07
    23ba:	28 17       	cp	r18, r24
    23bc:	39 07       	cpc	r19, r25
    23be:	4a 07       	cpc	r20, r26
    23c0:	5b 07       	cpc	r21, r27
    23c2:	18 f4       	brcc	.+6      	; 0x23ca <__fpcmp_parts_f+0x8e>
    23c4:	11 23       	and	r17, r17
    23c6:	41 f0       	breq	.+16     	; 0x23d8 <__fpcmp_parts_f+0x9c>
    23c8:	0a c0       	rjmp	.+20     	; 0x23de <__fpcmp_parts_f+0xa2>
    23ca:	82 17       	cp	r24, r18
    23cc:	93 07       	cpc	r25, r19
    23ce:	a4 07       	cpc	r26, r20
    23d0:	b5 07       	cpc	r27, r21
    23d2:	40 f4       	brcc	.+16     	; 0x23e4 <__fpcmp_parts_f+0xa8>
    23d4:	11 23       	and	r17, r17
    23d6:	19 f0       	breq	.+6      	; 0x23de <__fpcmp_parts_f+0xa2>
    23d8:	61 e0       	ldi	r22, 0x01	; 1
    23da:	70 e0       	ldi	r23, 0x00	; 0
    23dc:	05 c0       	rjmp	.+10     	; 0x23e8 <__fpcmp_parts_f+0xac>
    23de:	6f ef       	ldi	r22, 0xFF	; 255
    23e0:	7f ef       	ldi	r23, 0xFF	; 255
    23e2:	02 c0       	rjmp	.+4      	; 0x23e8 <__fpcmp_parts_f+0xac>
    23e4:	60 e0       	ldi	r22, 0x00	; 0
    23e6:	70 e0       	ldi	r23, 0x00	; 0
    23e8:	cb 01       	movw	r24, r22
    23ea:	1f 91       	pop	r17
    23ec:	08 95       	ret

000023ee <__prologue_saves__>:
    23ee:	2f 92       	push	r2
    23f0:	3f 92       	push	r3
    23f2:	4f 92       	push	r4
    23f4:	5f 92       	push	r5
    23f6:	6f 92       	push	r6
    23f8:	7f 92       	push	r7
    23fa:	8f 92       	push	r8
    23fc:	9f 92       	push	r9
    23fe:	af 92       	push	r10
    2400:	bf 92       	push	r11
    2402:	cf 92       	push	r12
    2404:	df 92       	push	r13
    2406:	ef 92       	push	r14
    2408:	ff 92       	push	r15
    240a:	0f 93       	push	r16
    240c:	1f 93       	push	r17
    240e:	cf 93       	push	r28
    2410:	df 93       	push	r29
    2412:	cd b7       	in	r28, 0x3d	; 61
    2414:	de b7       	in	r29, 0x3e	; 62
    2416:	ca 1b       	sub	r28, r26
    2418:	db 0b       	sbc	r29, r27
    241a:	0f b6       	in	r0, 0x3f	; 63
    241c:	f8 94       	cli
    241e:	de bf       	out	0x3e, r29	; 62
    2420:	0f be       	out	0x3f, r0	; 63
    2422:	cd bf       	out	0x3d, r28	; 61
    2424:	19 94       	eijmp

00002426 <__epilogue_restores__>:
    2426:	2a 88       	ldd	r2, Y+18	; 0x12
    2428:	39 88       	ldd	r3, Y+17	; 0x11
    242a:	48 88       	ldd	r4, Y+16	; 0x10
    242c:	5f 84       	ldd	r5, Y+15	; 0x0f
    242e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2430:	7d 84       	ldd	r7, Y+13	; 0x0d
    2432:	8c 84       	ldd	r8, Y+12	; 0x0c
    2434:	9b 84       	ldd	r9, Y+11	; 0x0b
    2436:	aa 84       	ldd	r10, Y+10	; 0x0a
    2438:	b9 84       	ldd	r11, Y+9	; 0x09
    243a:	c8 84       	ldd	r12, Y+8	; 0x08
    243c:	df 80       	ldd	r13, Y+7	; 0x07
    243e:	ee 80       	ldd	r14, Y+6	; 0x06
    2440:	fd 80       	ldd	r15, Y+5	; 0x05
    2442:	0c 81       	ldd	r16, Y+4	; 0x04
    2444:	1b 81       	ldd	r17, Y+3	; 0x03
    2446:	aa 81       	ldd	r26, Y+2	; 0x02
    2448:	b9 81       	ldd	r27, Y+1	; 0x01
    244a:	ce 0f       	add	r28, r30
    244c:	d1 1d       	adc	r29, r1
    244e:	0f b6       	in	r0, 0x3f	; 63
    2450:	f8 94       	cli
    2452:	de bf       	out	0x3e, r29	; 62
    2454:	0f be       	out	0x3f, r0	; 63
    2456:	cd bf       	out	0x3d, r28	; 61
    2458:	ed 01       	movw	r28, r26
    245a:	08 95       	ret

0000245c <pow>:
    245c:	fa 01       	movw	r30, r20
    245e:	ee 0f       	add	r30, r30
    2460:	ff 1f       	adc	r31, r31
    2462:	30 96       	adiw	r30, 0x00	; 0
    2464:	21 05       	cpc	r18, r1
    2466:	31 05       	cpc	r19, r1
    2468:	99 f1       	breq	.+102    	; 0x24d0 <pow+0x74>
    246a:	61 15       	cp	r22, r1
    246c:	71 05       	cpc	r23, r1
    246e:	61 f4       	brne	.+24     	; 0x2488 <pow+0x2c>
    2470:	80 38       	cpi	r24, 0x80	; 128
    2472:	bf e3       	ldi	r27, 0x3F	; 63
    2474:	9b 07       	cpc	r25, r27
    2476:	49 f1       	breq	.+82     	; 0x24ca <pow+0x6e>
    2478:	68 94       	set
    247a:	90 38       	cpi	r25, 0x80	; 128
    247c:	81 05       	cpc	r24, r1
    247e:	61 f0       	breq	.+24     	; 0x2498 <pow+0x3c>
    2480:	80 38       	cpi	r24, 0x80	; 128
    2482:	bf ef       	ldi	r27, 0xFF	; 255
    2484:	9b 07       	cpc	r25, r27
    2486:	41 f0       	breq	.+16     	; 0x2498 <pow+0x3c>
    2488:	99 23       	and	r25, r25
    248a:	42 f5       	brpl	.+80     	; 0x24dc <pow+0x80>
    248c:	ff 3f       	cpi	r31, 0xFF	; 255
    248e:	e1 05       	cpc	r30, r1
    2490:	31 05       	cpc	r19, r1
    2492:	21 05       	cpc	r18, r1
    2494:	11 f1       	breq	.+68     	; 0x24da <pow+0x7e>
    2496:	e8 94       	clt
    2498:	08 94       	sec
    249a:	e7 95       	ror	r30
    249c:	d9 01       	movw	r26, r18
    249e:	aa 23       	and	r26, r26
    24a0:	29 f4       	brne	.+10     	; 0x24ac <pow+0x50>
    24a2:	ab 2f       	mov	r26, r27
    24a4:	be 2f       	mov	r27, r30
    24a6:	f8 5f       	subi	r31, 0xF8	; 248
    24a8:	d0 f3       	brcs	.-12     	; 0x249e <pow+0x42>
    24aa:	10 c0       	rjmp	.+32     	; 0x24cc <pow+0x70>
    24ac:	ff 5f       	subi	r31, 0xFF	; 255
    24ae:	70 f4       	brcc	.+28     	; 0x24cc <pow+0x70>
    24b0:	a6 95       	lsr	r26
    24b2:	e0 f7       	brcc	.-8      	; 0x24ac <pow+0x50>
    24b4:	f7 39       	cpi	r31, 0x97	; 151
    24b6:	50 f0       	brcs	.+20     	; 0x24cc <pow+0x70>
    24b8:	19 f0       	breq	.+6      	; 0x24c0 <pow+0x64>
    24ba:	ff 3a       	cpi	r31, 0xAF	; 175
    24bc:	38 f4       	brcc	.+14     	; 0x24cc <pow+0x70>
    24be:	9f 77       	andi	r25, 0x7F	; 127
    24c0:	9f 93       	push	r25
    24c2:	0c d0       	rcall	.+24     	; 0x24dc <pow+0x80>
    24c4:	0f 90       	pop	r0
    24c6:	07 fc       	sbrc	r0, 7
    24c8:	90 58       	subi	r25, 0x80	; 128
    24ca:	08 95       	ret
    24cc:	3e f0       	brts	.+14     	; 0x24dc <pow+0x80>
    24ce:	49 c0       	rjmp	.+146    	; 0x2562 <__fp_nan>
    24d0:	60 e0       	ldi	r22, 0x00	; 0
    24d2:	70 e0       	ldi	r23, 0x00	; 0
    24d4:	80 e8       	ldi	r24, 0x80	; 128
    24d6:	9f e3       	ldi	r25, 0x3F	; 63
    24d8:	08 95       	ret
    24da:	4f e7       	ldi	r20, 0x7F	; 127
    24dc:	9f 77       	andi	r25, 0x7F	; 127
    24de:	5f 93       	push	r21
    24e0:	4f 93       	push	r20
    24e2:	3f 93       	push	r19
    24e4:	2f 93       	push	r18
    24e6:	d0 d0       	rcall	.+416    	; 0x2688 <log>
    24e8:	2f 91       	pop	r18
    24ea:	3f 91       	pop	r19
    24ec:	4f 91       	pop	r20
    24ee:	5f 91       	pop	r21
    24f0:	28 da       	rcall	.-2992   	; 0x1942 <__mulsf3>
    24f2:	05 c0       	rjmp	.+10     	; 0x24fe <exp>
    24f4:	19 f4       	brne	.+6      	; 0x24fc <pow+0xa0>
    24f6:	0e f0       	brts	.+2      	; 0x24fa <pow+0x9e>
    24f8:	2e c0       	rjmp	.+92     	; 0x2556 <__fp_inf>
    24fa:	7d c0       	rjmp	.+250    	; 0x25f6 <__fp_zero>
    24fc:	32 c0       	rjmp	.+100    	; 0x2562 <__fp_nan>

000024fe <exp>:
    24fe:	61 d0       	rcall	.+194    	; 0x25c2 <__fp_splitA>
    2500:	c8 f3       	brcs	.-14     	; 0x24f4 <pow+0x98>
    2502:	96 38       	cpi	r25, 0x86	; 134
    2504:	c0 f7       	brcc	.-16     	; 0x24f6 <pow+0x9a>
    2506:	07 f8       	bld	r0, 7
    2508:	0f 92       	push	r0
    250a:	e8 94       	clt
    250c:	2b e3       	ldi	r18, 0x3B	; 59
    250e:	3a ea       	ldi	r19, 0xAA	; 170
    2510:	48 eb       	ldi	r20, 0xB8	; 184
    2512:	5f e7       	ldi	r21, 0x7F	; 127
    2514:	38 d1       	rcall	.+624    	; 0x2786 <__mulsf3_pse>
    2516:	0f 92       	push	r0
    2518:	0f 92       	push	r0
    251a:	0f 92       	push	r0
    251c:	4d b7       	in	r20, 0x3d	; 61
    251e:	5e b7       	in	r21, 0x3e	; 62
    2520:	0f 92       	push	r0
    2522:	f2 d0       	rcall	.+484    	; 0x2708 <modf>
    2524:	e4 ee       	ldi	r30, 0xE4	; 228
    2526:	f0 e0       	ldi	r31, 0x00	; 0
    2528:	1f d0       	rcall	.+62     	; 0x2568 <__fp_powser>
    252a:	4f 91       	pop	r20
    252c:	5f 91       	pop	r21
    252e:	ef 91       	pop	r30
    2530:	ff 91       	pop	r31
    2532:	e5 95       	asr	r30
    2534:	ee 1f       	adc	r30, r30
    2536:	ff 1f       	adc	r31, r31
    2538:	49 f0       	breq	.+18     	; 0x254c <exp+0x4e>
    253a:	fe 57       	subi	r31, 0x7E	; 126
    253c:	e0 68       	ori	r30, 0x80	; 128
    253e:	44 27       	eor	r20, r20
    2540:	ee 0f       	add	r30, r30
    2542:	44 1f       	adc	r20, r20
    2544:	fa 95       	dec	r31
    2546:	e1 f7       	brne	.-8      	; 0x2540 <exp+0x42>
    2548:	41 95       	neg	r20
    254a:	55 0b       	sbc	r21, r21
    254c:	64 d0       	rcall	.+200    	; 0x2616 <ldexp>
    254e:	0f 90       	pop	r0
    2550:	07 fe       	sbrs	r0, 7
    2552:	58 c0       	rjmp	.+176    	; 0x2604 <inverse>
    2554:	08 95       	ret

00002556 <__fp_inf>:
    2556:	97 f9       	bld	r25, 7
    2558:	9f 67       	ori	r25, 0x7F	; 127
    255a:	80 e8       	ldi	r24, 0x80	; 128
    255c:	70 e0       	ldi	r23, 0x00	; 0
    255e:	60 e0       	ldi	r22, 0x00	; 0
    2560:	08 95       	ret

00002562 <__fp_nan>:
    2562:	9f ef       	ldi	r25, 0xFF	; 255
    2564:	80 ec       	ldi	r24, 0xC0	; 192
    2566:	08 95       	ret

00002568 <__fp_powser>:
    2568:	df 93       	push	r29
    256a:	cf 93       	push	r28
    256c:	1f 93       	push	r17
    256e:	0f 93       	push	r16
    2570:	ff 92       	push	r15
    2572:	ef 92       	push	r14
    2574:	df 92       	push	r13
    2576:	7b 01       	movw	r14, r22
    2578:	8c 01       	movw	r16, r24
    257a:	68 94       	set
    257c:	05 c0       	rjmp	.+10     	; 0x2588 <__fp_powser+0x20>
    257e:	da 2e       	mov	r13, r26
    2580:	ef 01       	movw	r28, r30
    2582:	ff d0       	rcall	.+510    	; 0x2782 <__mulsf3x>
    2584:	fe 01       	movw	r30, r28
    2586:	e8 94       	clt
    2588:	a5 91       	lpm	r26, Z+
    258a:	25 91       	lpm	r18, Z+
    258c:	35 91       	lpm	r19, Z+
    258e:	45 91       	lpm	r20, Z+
    2590:	55 91       	lpm	r21, Z+
    2592:	ae f3       	brts	.-22     	; 0x257e <__fp_powser+0x16>
    2594:	ef 01       	movw	r28, r30
    2596:	59 d1       	rcall	.+690    	; 0x284a <__addsf3x>
    2598:	fe 01       	movw	r30, r28
    259a:	97 01       	movw	r18, r14
    259c:	a8 01       	movw	r20, r16
    259e:	da 94       	dec	r13
    25a0:	79 f7       	brne	.-34     	; 0x2580 <__fp_powser+0x18>
    25a2:	df 90       	pop	r13
    25a4:	ef 90       	pop	r14
    25a6:	ff 90       	pop	r15
    25a8:	0f 91       	pop	r16
    25aa:	1f 91       	pop	r17
    25ac:	cf 91       	pop	r28
    25ae:	df 91       	pop	r29
    25b0:	08 95       	ret

000025b2 <__fp_split3>:
    25b2:	57 fd       	sbrc	r21, 7
    25b4:	90 58       	subi	r25, 0x80	; 128
    25b6:	44 0f       	add	r20, r20
    25b8:	55 1f       	adc	r21, r21
    25ba:	59 f0       	breq	.+22     	; 0x25d2 <__fp_splitA+0x10>
    25bc:	5f 3f       	cpi	r21, 0xFF	; 255
    25be:	71 f0       	breq	.+28     	; 0x25dc <__fp_splitA+0x1a>
    25c0:	47 95       	ror	r20

000025c2 <__fp_splitA>:
    25c2:	88 0f       	add	r24, r24
    25c4:	97 fb       	bst	r25, 7
    25c6:	99 1f       	adc	r25, r25
    25c8:	61 f0       	breq	.+24     	; 0x25e2 <__fp_splitA+0x20>
    25ca:	9f 3f       	cpi	r25, 0xFF	; 255
    25cc:	79 f0       	breq	.+30     	; 0x25ec <__fp_splitA+0x2a>
    25ce:	87 95       	ror	r24
    25d0:	08 95       	ret
    25d2:	12 16       	cp	r1, r18
    25d4:	13 06       	cpc	r1, r19
    25d6:	14 06       	cpc	r1, r20
    25d8:	55 1f       	adc	r21, r21
    25da:	f2 cf       	rjmp	.-28     	; 0x25c0 <__fp_split3+0xe>
    25dc:	46 95       	lsr	r20
    25de:	f1 df       	rcall	.-30     	; 0x25c2 <__fp_splitA>
    25e0:	08 c0       	rjmp	.+16     	; 0x25f2 <__fp_splitA+0x30>
    25e2:	16 16       	cp	r1, r22
    25e4:	17 06       	cpc	r1, r23
    25e6:	18 06       	cpc	r1, r24
    25e8:	99 1f       	adc	r25, r25
    25ea:	f1 cf       	rjmp	.-30     	; 0x25ce <__fp_splitA+0xc>
    25ec:	86 95       	lsr	r24
    25ee:	71 05       	cpc	r23, r1
    25f0:	61 05       	cpc	r22, r1
    25f2:	08 94       	sec
    25f4:	08 95       	ret

000025f6 <__fp_zero>:
    25f6:	e8 94       	clt

000025f8 <__fp_szero>:
    25f8:	bb 27       	eor	r27, r27
    25fa:	66 27       	eor	r22, r22
    25fc:	77 27       	eor	r23, r23
    25fe:	cb 01       	movw	r24, r22
    2600:	97 f9       	bld	r25, 7
    2602:	08 95       	ret

00002604 <inverse>:
    2604:	9b 01       	movw	r18, r22
    2606:	ac 01       	movw	r20, r24
    2608:	60 e0       	ldi	r22, 0x00	; 0
    260a:	70 e0       	ldi	r23, 0x00	; 0
    260c:	80 e8       	ldi	r24, 0x80	; 128
    260e:	9f e3       	ldi	r25, 0x3F	; 63
    2610:	92 ca       	rjmp	.-2780   	; 0x1b36 <__divsf3>
    2612:	a1 cf       	rjmp	.-190    	; 0x2556 <__fp_inf>
    2614:	6d c1       	rjmp	.+730    	; 0x28f0 <__fp_mpack>

00002616 <ldexp>:
    2616:	d5 df       	rcall	.-86     	; 0x25c2 <__fp_splitA>
    2618:	e8 f3       	brcs	.-6      	; 0x2614 <inverse+0x10>
    261a:	99 23       	and	r25, r25
    261c:	d9 f3       	breq	.-10     	; 0x2614 <inverse+0x10>
    261e:	94 0f       	add	r25, r20
    2620:	51 1d       	adc	r21, r1
    2622:	bb f3       	brvs	.-18     	; 0x2612 <inverse+0xe>
    2624:	91 50       	subi	r25, 0x01	; 1
    2626:	50 40       	sbci	r21, 0x00	; 0
    2628:	94 f0       	brlt	.+36     	; 0x264e <ldexp+0x38>
    262a:	59 f0       	breq	.+22     	; 0x2642 <ldexp+0x2c>
    262c:	88 23       	and	r24, r24
    262e:	32 f0       	brmi	.+12     	; 0x263c <ldexp+0x26>
    2630:	66 0f       	add	r22, r22
    2632:	77 1f       	adc	r23, r23
    2634:	88 1f       	adc	r24, r24
    2636:	91 50       	subi	r25, 0x01	; 1
    2638:	50 40       	sbci	r21, 0x00	; 0
    263a:	c1 f7       	brne	.-16     	; 0x262c <ldexp+0x16>
    263c:	9e 3f       	cpi	r25, 0xFE	; 254
    263e:	51 05       	cpc	r21, r1
    2640:	44 f7       	brge	.-48     	; 0x2612 <inverse+0xe>
    2642:	88 0f       	add	r24, r24
    2644:	91 1d       	adc	r25, r1
    2646:	96 95       	lsr	r25
    2648:	87 95       	ror	r24
    264a:	97 f9       	bld	r25, 7
    264c:	08 95       	ret
    264e:	5f 3f       	cpi	r21, 0xFF	; 255
    2650:	ac f0       	brlt	.+42     	; 0x267c <ldexp+0x66>
    2652:	98 3e       	cpi	r25, 0xE8	; 232
    2654:	9c f0       	brlt	.+38     	; 0x267c <ldexp+0x66>
    2656:	bb 27       	eor	r27, r27
    2658:	86 95       	lsr	r24
    265a:	77 95       	ror	r23
    265c:	67 95       	ror	r22
    265e:	b7 95       	ror	r27
    2660:	08 f4       	brcc	.+2      	; 0x2664 <ldexp+0x4e>
    2662:	b1 60       	ori	r27, 0x01	; 1
    2664:	93 95       	inc	r25
    2666:	c1 f7       	brne	.-16     	; 0x2658 <ldexp+0x42>
    2668:	bb 0f       	add	r27, r27
    266a:	58 f7       	brcc	.-42     	; 0x2642 <ldexp+0x2c>
    266c:	11 f4       	brne	.+4      	; 0x2672 <ldexp+0x5c>
    266e:	60 ff       	sbrs	r22, 0
    2670:	e8 cf       	rjmp	.-48     	; 0x2642 <ldexp+0x2c>
    2672:	6f 5f       	subi	r22, 0xFF	; 255
    2674:	7f 4f       	sbci	r23, 0xFF	; 255
    2676:	8f 4f       	sbci	r24, 0xFF	; 255
    2678:	9f 4f       	sbci	r25, 0xFF	; 255
    267a:	e3 cf       	rjmp	.-58     	; 0x2642 <ldexp+0x2c>
    267c:	bd cf       	rjmp	.-134    	; 0x25f8 <__fp_szero>
    267e:	0e f0       	brts	.+2      	; 0x2682 <ldexp+0x6c>
    2680:	37 c1       	rjmp	.+622    	; 0x28f0 <__fp_mpack>
    2682:	6f cf       	rjmp	.-290    	; 0x2562 <__fp_nan>
    2684:	68 94       	set
    2686:	67 cf       	rjmp	.-306    	; 0x2556 <__fp_inf>

00002688 <log>:
    2688:	9c df       	rcall	.-200    	; 0x25c2 <__fp_splitA>
    268a:	c8 f3       	brcs	.-14     	; 0x267e <ldexp+0x68>
    268c:	99 23       	and	r25, r25
    268e:	d1 f3       	breq	.-12     	; 0x2684 <ldexp+0x6e>
    2690:	c6 f3       	brts	.-16     	; 0x2682 <ldexp+0x6c>
    2692:	df 93       	push	r29
    2694:	cf 93       	push	r28
    2696:	1f 93       	push	r17
    2698:	0f 93       	push	r16
    269a:	ff 92       	push	r15
    269c:	c9 2f       	mov	r28, r25
    269e:	dd 27       	eor	r29, r29
    26a0:	88 23       	and	r24, r24
    26a2:	2a f0       	brmi	.+10     	; 0x26ae <log+0x26>
    26a4:	21 97       	sbiw	r28, 0x01	; 1
    26a6:	66 0f       	add	r22, r22
    26a8:	77 1f       	adc	r23, r23
    26aa:	88 1f       	adc	r24, r24
    26ac:	da f7       	brpl	.-10     	; 0x26a4 <log+0x1c>
    26ae:	20 e0       	ldi	r18, 0x00	; 0
    26b0:	30 e0       	ldi	r19, 0x00	; 0
    26b2:	40 e8       	ldi	r20, 0x80	; 128
    26b4:	5f eb       	ldi	r21, 0xBF	; 191
    26b6:	9f e3       	ldi	r25, 0x3F	; 63
    26b8:	88 39       	cpi	r24, 0x98	; 152
    26ba:	20 f0       	brcs	.+8      	; 0x26c4 <log+0x3c>
    26bc:	80 3e       	cpi	r24, 0xE0	; 224
    26be:	30 f0       	brcs	.+12     	; 0x26cc <log+0x44>
    26c0:	21 96       	adiw	r28, 0x01	; 1
    26c2:	8f 77       	andi	r24, 0x7F	; 127
    26c4:	11 d9       	rcall	.-3550   	; 0x18e8 <__addsf3>
    26c6:	ec e0       	ldi	r30, 0x0C	; 12
    26c8:	f1 e0       	ldi	r31, 0x01	; 1
    26ca:	03 c0       	rjmp	.+6      	; 0x26d2 <log+0x4a>
    26cc:	0d d9       	rcall	.-3558   	; 0x18e8 <__addsf3>
    26ce:	e9 e3       	ldi	r30, 0x39	; 57
    26d0:	f1 e0       	ldi	r31, 0x01	; 1
    26d2:	4a df       	rcall	.-364    	; 0x2568 <__fp_powser>
    26d4:	8b 01       	movw	r16, r22
    26d6:	be 01       	movw	r22, r28
    26d8:	ec 01       	movw	r28, r24
    26da:	fb 2e       	mov	r15, r27
    26dc:	6f 57       	subi	r22, 0x7F	; 127
    26de:	71 09       	sbc	r23, r1
    26e0:	75 95       	asr	r23
    26e2:	77 1f       	adc	r23, r23
    26e4:	88 0b       	sbc	r24, r24
    26e6:	99 0b       	sbc	r25, r25
    26e8:	62 db       	rcall	.-2364   	; 0x1dae <__floatsisf>
    26ea:	28 e1       	ldi	r18, 0x18	; 24
    26ec:	32 e7       	ldi	r19, 0x72	; 114
    26ee:	41 e3       	ldi	r20, 0x31	; 49
    26f0:	5f e3       	ldi	r21, 0x3F	; 63
    26f2:	47 d0       	rcall	.+142    	; 0x2782 <__mulsf3x>
    26f4:	af 2d       	mov	r26, r15
    26f6:	98 01       	movw	r18, r16
    26f8:	ae 01       	movw	r20, r28
    26fa:	ff 90       	pop	r15
    26fc:	0f 91       	pop	r16
    26fe:	1f 91       	pop	r17
    2700:	cf 91       	pop	r28
    2702:	df 91       	pop	r29
    2704:	a2 d0       	rcall	.+324    	; 0x284a <__addsf3x>
    2706:	10 c1       	rjmp	.+544    	; 0x2928 <__fp_round>

00002708 <modf>:
    2708:	fa 01       	movw	r30, r20
    270a:	dc 01       	movw	r26, r24
    270c:	aa 0f       	add	r26, r26
    270e:	bb 1f       	adc	r27, r27
    2710:	9b 01       	movw	r18, r22
    2712:	ac 01       	movw	r20, r24
    2714:	bf 57       	subi	r27, 0x7F	; 127
    2716:	28 f4       	brcc	.+10     	; 0x2722 <modf+0x1a>
    2718:	22 27       	eor	r18, r18
    271a:	33 27       	eor	r19, r19
    271c:	44 27       	eor	r20, r20
    271e:	50 78       	andi	r21, 0x80	; 128
    2720:	1f c0       	rjmp	.+62     	; 0x2760 <modf+0x58>
    2722:	b7 51       	subi	r27, 0x17	; 23
    2724:	88 f4       	brcc	.+34     	; 0x2748 <modf+0x40>
    2726:	ab 2f       	mov	r26, r27
    2728:	00 24       	eor	r0, r0
    272a:	46 95       	lsr	r20
    272c:	37 95       	ror	r19
    272e:	27 95       	ror	r18
    2730:	01 1c       	adc	r0, r1
    2732:	a3 95       	inc	r26
    2734:	d2 f3       	brmi	.-12     	; 0x272a <modf+0x22>
    2736:	00 20       	and	r0, r0
    2738:	69 f0       	breq	.+26     	; 0x2754 <modf+0x4c>
    273a:	22 0f       	add	r18, r18
    273c:	33 1f       	adc	r19, r19
    273e:	44 1f       	adc	r20, r20
    2740:	b3 95       	inc	r27
    2742:	da f3       	brmi	.-10     	; 0x273a <modf+0x32>
    2744:	0d d0       	rcall	.+26     	; 0x2760 <modf+0x58>
    2746:	9f c8       	rjmp	.-3778   	; 0x1886 <__subsf3>
    2748:	61 30       	cpi	r22, 0x01	; 1
    274a:	71 05       	cpc	r23, r1
    274c:	a0 e8       	ldi	r26, 0x80	; 128
    274e:	8a 07       	cpc	r24, r26
    2750:	b9 46       	sbci	r27, 0x69	; 105
    2752:	30 f4       	brcc	.+12     	; 0x2760 <modf+0x58>
    2754:	9b 01       	movw	r18, r22
    2756:	ac 01       	movw	r20, r24
    2758:	66 27       	eor	r22, r22
    275a:	77 27       	eor	r23, r23
    275c:	88 27       	eor	r24, r24
    275e:	90 78       	andi	r25, 0x80	; 128
    2760:	30 96       	adiw	r30, 0x00	; 0
    2762:	21 f0       	breq	.+8      	; 0x276c <modf+0x64>
    2764:	20 83       	st	Z, r18
    2766:	31 83       	std	Z+1, r19	; 0x01
    2768:	42 83       	std	Z+2, r20	; 0x02
    276a:	53 83       	std	Z+3, r21	; 0x03
    276c:	08 95       	ret
    276e:	ce d0       	rcall	.+412    	; 0x290c <__fp_pscA>
    2770:	28 f0       	brcs	.+10     	; 0x277c <modf+0x74>
    2772:	d3 d0       	rcall	.+422    	; 0x291a <__fp_pscB>
    2774:	18 f0       	brcs	.+6      	; 0x277c <modf+0x74>
    2776:	95 23       	and	r25, r21
    2778:	09 f0       	breq	.+2      	; 0x277c <modf+0x74>
    277a:	ed ce       	rjmp	.-550    	; 0x2556 <__fp_inf>
    277c:	f2 ce       	rjmp	.-540    	; 0x2562 <__fp_nan>
    277e:	11 24       	eor	r1, r1
    2780:	3b cf       	rjmp	.-394    	; 0x25f8 <__fp_szero>

00002782 <__mulsf3x>:
    2782:	17 df       	rcall	.-466    	; 0x25b2 <__fp_split3>
    2784:	a0 f3       	brcs	.-24     	; 0x276e <modf+0x66>

00002786 <__mulsf3_pse>:
    2786:	95 9f       	mul	r25, r21
    2788:	d1 f3       	breq	.-12     	; 0x277e <modf+0x76>
    278a:	95 0f       	add	r25, r21
    278c:	50 e0       	ldi	r21, 0x00	; 0
    278e:	55 1f       	adc	r21, r21
    2790:	62 9f       	mul	r22, r18
    2792:	f0 01       	movw	r30, r0
    2794:	72 9f       	mul	r23, r18
    2796:	bb 27       	eor	r27, r27
    2798:	f0 0d       	add	r31, r0
    279a:	b1 1d       	adc	r27, r1
    279c:	63 9f       	mul	r22, r19
    279e:	aa 27       	eor	r26, r26
    27a0:	f0 0d       	add	r31, r0
    27a2:	b1 1d       	adc	r27, r1
    27a4:	aa 1f       	adc	r26, r26
    27a6:	64 9f       	mul	r22, r20
    27a8:	66 27       	eor	r22, r22
    27aa:	b0 0d       	add	r27, r0
    27ac:	a1 1d       	adc	r26, r1
    27ae:	66 1f       	adc	r22, r22
    27b0:	82 9f       	mul	r24, r18
    27b2:	22 27       	eor	r18, r18
    27b4:	b0 0d       	add	r27, r0
    27b6:	a1 1d       	adc	r26, r1
    27b8:	62 1f       	adc	r22, r18
    27ba:	73 9f       	mul	r23, r19
    27bc:	b0 0d       	add	r27, r0
    27be:	a1 1d       	adc	r26, r1
    27c0:	62 1f       	adc	r22, r18
    27c2:	83 9f       	mul	r24, r19
    27c4:	a0 0d       	add	r26, r0
    27c6:	61 1d       	adc	r22, r1
    27c8:	22 1f       	adc	r18, r18
    27ca:	74 9f       	mul	r23, r20
    27cc:	33 27       	eor	r19, r19
    27ce:	a0 0d       	add	r26, r0
    27d0:	61 1d       	adc	r22, r1
    27d2:	23 1f       	adc	r18, r19
    27d4:	84 9f       	mul	r24, r20
    27d6:	60 0d       	add	r22, r0
    27d8:	21 1d       	adc	r18, r1
    27da:	82 2f       	mov	r24, r18
    27dc:	76 2f       	mov	r23, r22
    27de:	6a 2f       	mov	r22, r26
    27e0:	11 24       	eor	r1, r1
    27e2:	9f 57       	subi	r25, 0x7F	; 127
    27e4:	50 40       	sbci	r21, 0x00	; 0
    27e6:	8a f0       	brmi	.+34     	; 0x280a <__mulsf3_pse+0x84>
    27e8:	e1 f0       	breq	.+56     	; 0x2822 <__mulsf3_pse+0x9c>
    27ea:	88 23       	and	r24, r24
    27ec:	4a f0       	brmi	.+18     	; 0x2800 <__mulsf3_pse+0x7a>
    27ee:	ee 0f       	add	r30, r30
    27f0:	ff 1f       	adc	r31, r31
    27f2:	bb 1f       	adc	r27, r27
    27f4:	66 1f       	adc	r22, r22
    27f6:	77 1f       	adc	r23, r23
    27f8:	88 1f       	adc	r24, r24
    27fa:	91 50       	subi	r25, 0x01	; 1
    27fc:	50 40       	sbci	r21, 0x00	; 0
    27fe:	a9 f7       	brne	.-22     	; 0x27ea <__mulsf3_pse+0x64>
    2800:	9e 3f       	cpi	r25, 0xFE	; 254
    2802:	51 05       	cpc	r21, r1
    2804:	70 f0       	brcs	.+28     	; 0x2822 <__mulsf3_pse+0x9c>
    2806:	a7 ce       	rjmp	.-690    	; 0x2556 <__fp_inf>
    2808:	f7 ce       	rjmp	.-530    	; 0x25f8 <__fp_szero>
    280a:	5f 3f       	cpi	r21, 0xFF	; 255
    280c:	ec f3       	brlt	.-6      	; 0x2808 <__mulsf3_pse+0x82>
    280e:	98 3e       	cpi	r25, 0xE8	; 232
    2810:	dc f3       	brlt	.-10     	; 0x2808 <__mulsf3_pse+0x82>
    2812:	86 95       	lsr	r24
    2814:	77 95       	ror	r23
    2816:	67 95       	ror	r22
    2818:	b7 95       	ror	r27
    281a:	f7 95       	ror	r31
    281c:	e7 95       	ror	r30
    281e:	9f 5f       	subi	r25, 0xFF	; 255
    2820:	c1 f7       	brne	.-16     	; 0x2812 <__mulsf3_pse+0x8c>
    2822:	fe 2b       	or	r31, r30
    2824:	88 0f       	add	r24, r24
    2826:	91 1d       	adc	r25, r1
    2828:	96 95       	lsr	r25
    282a:	87 95       	ror	r24
    282c:	97 f9       	bld	r25, 7
    282e:	08 95       	ret
    2830:	6d d0       	rcall	.+218    	; 0x290c <__fp_pscA>
    2832:	30 f0       	brcs	.+12     	; 0x2840 <__mulsf3_pse+0xba>
    2834:	72 d0       	rcall	.+228    	; 0x291a <__fp_pscB>
    2836:	20 f0       	brcs	.+8      	; 0x2840 <__mulsf3_pse+0xba>
    2838:	31 f4       	brne	.+12     	; 0x2846 <__mulsf3_pse+0xc0>
    283a:	9f 3f       	cpi	r25, 0xFF	; 255
    283c:	11 f4       	brne	.+4      	; 0x2842 <__mulsf3_pse+0xbc>
    283e:	1e f4       	brtc	.+6      	; 0x2846 <__mulsf3_pse+0xc0>
    2840:	90 ce       	rjmp	.-736    	; 0x2562 <__fp_nan>
    2842:	0e f4       	brtc	.+2      	; 0x2846 <__mulsf3_pse+0xc0>
    2844:	e0 95       	com	r30
    2846:	e7 fb       	bst	r30, 7
    2848:	86 ce       	rjmp	.-756    	; 0x2556 <__fp_inf>

0000284a <__addsf3x>:
    284a:	e9 2f       	mov	r30, r25
    284c:	b2 de       	rcall	.-668    	; 0x25b2 <__fp_split3>
    284e:	80 f3       	brcs	.-32     	; 0x2830 <__mulsf3_pse+0xaa>
    2850:	ba 17       	cp	r27, r26
    2852:	62 07       	cpc	r22, r18
    2854:	73 07       	cpc	r23, r19
    2856:	84 07       	cpc	r24, r20
    2858:	95 07       	cpc	r25, r21
    285a:	18 f0       	brcs	.+6      	; 0x2862 <__addsf3x+0x18>
    285c:	71 f4       	brne	.+28     	; 0x287a <__addsf3x+0x30>
    285e:	9e f5       	brtc	.+102    	; 0x28c6 <__addsf3x+0x7c>
    2860:	ca ce       	rjmp	.-620    	; 0x25f6 <__fp_zero>
    2862:	0e f4       	brtc	.+2      	; 0x2866 <__addsf3x+0x1c>
    2864:	e0 95       	com	r30
    2866:	0b 2e       	mov	r0, r27
    2868:	ba 2f       	mov	r27, r26
    286a:	a0 2d       	mov	r26, r0
    286c:	0b 01       	movw	r0, r22
    286e:	b9 01       	movw	r22, r18
    2870:	90 01       	movw	r18, r0
    2872:	0c 01       	movw	r0, r24
    2874:	ca 01       	movw	r24, r20
    2876:	a0 01       	movw	r20, r0
    2878:	11 24       	eor	r1, r1
    287a:	ff 27       	eor	r31, r31
    287c:	59 1b       	sub	r21, r25
    287e:	99 f0       	breq	.+38     	; 0x28a6 <__addsf3x+0x5c>
    2880:	59 3f       	cpi	r21, 0xF9	; 249
    2882:	50 f4       	brcc	.+20     	; 0x2898 <__addsf3x+0x4e>
    2884:	50 3e       	cpi	r21, 0xE0	; 224
    2886:	68 f1       	brcs	.+90     	; 0x28e2 <__addsf3x+0x98>
    2888:	1a 16       	cp	r1, r26
    288a:	f0 40       	sbci	r31, 0x00	; 0
    288c:	a2 2f       	mov	r26, r18
    288e:	23 2f       	mov	r18, r19
    2890:	34 2f       	mov	r19, r20
    2892:	44 27       	eor	r20, r20
    2894:	58 5f       	subi	r21, 0xF8	; 248
    2896:	f3 cf       	rjmp	.-26     	; 0x287e <__addsf3x+0x34>
    2898:	46 95       	lsr	r20
    289a:	37 95       	ror	r19
    289c:	27 95       	ror	r18
    289e:	a7 95       	ror	r26
    28a0:	f0 40       	sbci	r31, 0x00	; 0
    28a2:	53 95       	inc	r21
    28a4:	c9 f7       	brne	.-14     	; 0x2898 <__addsf3x+0x4e>
    28a6:	7e f4       	brtc	.+30     	; 0x28c6 <__addsf3x+0x7c>
    28a8:	1f 16       	cp	r1, r31
    28aa:	ba 0b       	sbc	r27, r26
    28ac:	62 0b       	sbc	r22, r18
    28ae:	73 0b       	sbc	r23, r19
    28b0:	84 0b       	sbc	r24, r20
    28b2:	ba f0       	brmi	.+46     	; 0x28e2 <__addsf3x+0x98>
    28b4:	91 50       	subi	r25, 0x01	; 1
    28b6:	a1 f0       	breq	.+40     	; 0x28e0 <__addsf3x+0x96>
    28b8:	ff 0f       	add	r31, r31
    28ba:	bb 1f       	adc	r27, r27
    28bc:	66 1f       	adc	r22, r22
    28be:	77 1f       	adc	r23, r23
    28c0:	88 1f       	adc	r24, r24
    28c2:	c2 f7       	brpl	.-16     	; 0x28b4 <__addsf3x+0x6a>
    28c4:	0e c0       	rjmp	.+28     	; 0x28e2 <__addsf3x+0x98>
    28c6:	ba 0f       	add	r27, r26
    28c8:	62 1f       	adc	r22, r18
    28ca:	73 1f       	adc	r23, r19
    28cc:	84 1f       	adc	r24, r20
    28ce:	48 f4       	brcc	.+18     	; 0x28e2 <__addsf3x+0x98>
    28d0:	87 95       	ror	r24
    28d2:	77 95       	ror	r23
    28d4:	67 95       	ror	r22
    28d6:	b7 95       	ror	r27
    28d8:	f7 95       	ror	r31
    28da:	9e 3f       	cpi	r25, 0xFE	; 254
    28dc:	08 f0       	brcs	.+2      	; 0x28e0 <__addsf3x+0x96>
    28de:	b3 cf       	rjmp	.-154    	; 0x2846 <__mulsf3_pse+0xc0>
    28e0:	93 95       	inc	r25
    28e2:	88 0f       	add	r24, r24
    28e4:	08 f0       	brcs	.+2      	; 0x28e8 <__addsf3x+0x9e>
    28e6:	99 27       	eor	r25, r25
    28e8:	ee 0f       	add	r30, r30
    28ea:	97 95       	ror	r25
    28ec:	87 95       	ror	r24
    28ee:	08 95       	ret

000028f0 <__fp_mpack>:
    28f0:	9f 3f       	cpi	r25, 0xFF	; 255
    28f2:	31 f0       	breq	.+12     	; 0x2900 <__fp_mpack_finite+0xc>

000028f4 <__fp_mpack_finite>:
    28f4:	91 50       	subi	r25, 0x01	; 1
    28f6:	20 f4       	brcc	.+8      	; 0x2900 <__fp_mpack_finite+0xc>
    28f8:	87 95       	ror	r24
    28fa:	77 95       	ror	r23
    28fc:	67 95       	ror	r22
    28fe:	b7 95       	ror	r27
    2900:	88 0f       	add	r24, r24
    2902:	91 1d       	adc	r25, r1
    2904:	96 95       	lsr	r25
    2906:	87 95       	ror	r24
    2908:	97 f9       	bld	r25, 7
    290a:	08 95       	ret

0000290c <__fp_pscA>:
    290c:	00 24       	eor	r0, r0
    290e:	0a 94       	dec	r0
    2910:	16 16       	cp	r1, r22
    2912:	17 06       	cpc	r1, r23
    2914:	18 06       	cpc	r1, r24
    2916:	09 06       	cpc	r0, r25
    2918:	08 95       	ret

0000291a <__fp_pscB>:
    291a:	00 24       	eor	r0, r0
    291c:	0a 94       	dec	r0
    291e:	12 16       	cp	r1, r18
    2920:	13 06       	cpc	r1, r19
    2922:	14 06       	cpc	r1, r20
    2924:	05 06       	cpc	r0, r21
    2926:	08 95       	ret

00002928 <__fp_round>:
    2928:	09 2e       	mov	r0, r25
    292a:	03 94       	inc	r0
    292c:	00 0c       	add	r0, r0
    292e:	11 f4       	brne	.+4      	; 0x2934 <__fp_round+0xc>
    2930:	88 23       	and	r24, r24
    2932:	52 f0       	brmi	.+20     	; 0x2948 <__fp_round+0x20>
    2934:	bb 0f       	add	r27, r27
    2936:	40 f4       	brcc	.+16     	; 0x2948 <__fp_round+0x20>
    2938:	bf 2b       	or	r27, r31
    293a:	11 f4       	brne	.+4      	; 0x2940 <__fp_round+0x18>
    293c:	60 ff       	sbrs	r22, 0
    293e:	04 c0       	rjmp	.+8      	; 0x2948 <__fp_round+0x20>
    2940:	6f 5f       	subi	r22, 0xFF	; 255
    2942:	7f 4f       	sbci	r23, 0xFF	; 255
    2944:	8f 4f       	sbci	r24, 0xFF	; 255
    2946:	9f 4f       	sbci	r25, 0xFF	; 255
    2948:	08 95       	ret

0000294a <_exit>:
    294a:	f8 94       	cli

0000294c <__stop_program>:
    294c:	ff cf       	rjmp	.-2      	; 0x294c <__stop_program>
